
JuFo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002470  10001000  10001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .VENEER_Code  00000110  2000000c  10003470  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 Stack         00000404  2000011c  00000000  0000011c  2**0
                  ALLOC
  3 .bss          000003a8  20000520  00000404  00008520  2**2
                  ALLOC
  4 .no_init      00000004  20003ffc  00003ee0  0000011c  2**2
                  ALLOC
  5 .debug_aranges 000005f8  00000000  00000000  00008120  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003967  00000000  00000000  00008718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070c  00000000  00000000  0000c07f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cae  00000000  00000000  0000c78b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000152c  00000000  00000000  0000e43c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001430  00000000  00000000  0000f968  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021f0  00000000  00000000  00010d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005a0  00000000  00000000  00012f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 0000017e  00000000  00000000  00013528  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	20 05 00 20 19 10 00 10 00 00 00 00 99 10 00 10      .. ............
10001010:	00 04 01 00 00 00 00 80                             ........

10001018 <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001018:	4911      	ldr	r1, [pc, #68]	; (10001060 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101a:	4a12      	ldr	r2, [pc, #72]	; (10001064 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
1000101c:	4b12      	ldr	r3, [pc, #72]	; (10001068 <__copy_data+0x16>)
	bl  __copy_data
1000101e:	f000 f818 	bl	10001052 <__copy_data>

    ldr  r0, =SystemInit
10001022:	4812      	ldr	r0, [pc, #72]	; (1000106c <__copy_data+0x1a>)
    blx  r0
10001024:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001026:	4912      	ldr	r1, [pc, #72]	; (10001070 <__copy_data+0x1e>)
	ldr	r2, =__data_start
10001028:	4a12      	ldr	r2, [pc, #72]	; (10001074 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102a:	4b13      	ldr	r3, [pc, #76]	; (10001078 <__copy_data+0x26>)
	bl  __copy_data
1000102c:	f000 f811 	bl	10001052 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001030:	4912      	ldr	r1, [pc, #72]	; (1000107c <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001032:	4a13      	ldr	r2, [pc, #76]	; (10001080 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001034:	4b13      	ldr	r3, [pc, #76]	; (10001084 <__copy_data+0x32>)
	bl  __copy_data
10001036:	f000 f80c 	bl	10001052 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103a:	4913      	ldr	r1, [pc, #76]	; (10001088 <__copy_data+0x36>)
	ldr	r2, =__bss_end
1000103c:	4a13      	ldr	r2, [pc, #76]	; (1000108c <__copy_data+0x3a>)

	movs	r0, 0
1000103e:	2000      	movs	r0, #0

	subs	r2, r1
10001040:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001042:	dd02      	ble.n	1000104a <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001044:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
10001046:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
10001048:	dcfc      	bgt.n	10001044 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104a:	4811      	ldr	r0, [pc, #68]	; (10001090 <__copy_data+0x3e>)
    blx  r0
1000104c:	4780      	blx	r0
#endif

    ldr  r0, =main
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x42>)
    blx  r0
10001050:	4780      	blx	r0

10001052 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001052:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001054:	dd03      	ble.n	1000105e <__copy_data+0xc>

.L_loop:
	subs	r3, #4
10001056:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
10001058:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105a:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
1000105c:	dcfb      	bgt.n	10001056 <__copy_data+0x4>

.L_loop_done:
	bx  lr
1000105e:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001060:	10003470 	.word	0x10003470
	ldr	r2, =VeneerStart
10001064:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
10001068:	2000011c 	.word	0x2000011c
	bl  __copy_data

    ldr  r0, =SystemInit
1000106c:	1000109d 	.word	0x1000109d
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001070:	10003580 	.word	0x10003580
	ldr	r2, =__data_start
10001074:	20000520 	.word	0x20000520
	ldr	r3, =__data_end
10001078:	20000520 	.word	0x20000520
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
1000107c:	10003580 	.word	0x10003580
	ldr	r2, =__ram_code_start
10001080:	20000520 	.word	0x20000520
	ldr	r3, =__ram_code_end
10001084:	20000520 	.word	0x20000520
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
10001088:	20000520 	.word	0x20000520
	ldr	r2, =__bss_end
1000108c:	200008c8 	.word	0x200008c8
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001090:	10003409 	.word	0x10003409
    blx  r0
#endif

    ldr  r0, =main
10001094:	10002f45 	.word	0x10002f45

10001098 <CCU40_0_IRQHandler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_handler:
    b  .
10001098:	e7fe      	b.n	10001098 <CCU40_0_IRQHandler>
	...

1000109c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{    
1000109c:	b580      	push	{r7, lr}
1000109e:	af00      	add	r7, sp, #0
  SystemCoreSetup();
100010a0:	f000 f804 	bl	100010ac <SystemCoreSetup>
  SystemCoreClockSetup();
100010a4:	f000 f81c 	bl	100010e0 <SystemCoreClockSetup>
}
100010a8:	46bd      	mov	sp, r7
100010aa:	bd80      	pop	{r7, pc}

100010ac <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
100010ac:	b580      	push	{r7, lr}
100010ae:	af00      	add	r7, sp, #0
#ifndef USE_DYNAMIC_FLASH_WS
  /* Fix flash wait states to 1 cycle (see DS Addendum) */
  NVM->NVMCONF |= NVM_NVMCONF_WS_Msk;
100010b0:	490a      	ldr	r1, [pc, #40]	; (100010dc <SystemCoreSetup+0x30>)
100010b2:	4b0a      	ldr	r3, [pc, #40]	; (100010dc <SystemCoreSetup+0x30>)
100010b4:	891b      	ldrh	r3, [r3, #8]
100010b6:	b29b      	uxth	r3, r3
100010b8:	2280      	movs	r2, #128	; 0x80
100010ba:	0152      	lsls	r2, r2, #5
100010bc:	4313      	orrs	r3, r2
100010be:	b29b      	uxth	r3, r3
100010c0:	810b      	strh	r3, [r1, #8]
  NVM->CONFIG1 |= NVM_CONFIG1_FIXWS_Msk;
100010c2:	4906      	ldr	r1, [pc, #24]	; (100010dc <SystemCoreSetup+0x30>)
100010c4:	4a05      	ldr	r2, [pc, #20]	; (100010dc <SystemCoreSetup+0x30>)
100010c6:	2348      	movs	r3, #72	; 0x48
100010c8:	5ad3      	ldrh	r3, [r2, r3]
100010ca:	b29b      	uxth	r3, r3
100010cc:	2280      	movs	r2, #128	; 0x80
100010ce:	0112      	lsls	r2, r2, #4
100010d0:	4313      	orrs	r3, r2
100010d2:	b29a      	uxth	r2, r3
100010d4:	2348      	movs	r3, #72	; 0x48
100010d6:	52ca      	strh	r2, [r1, r3]
#endif
}
100010d8:	46bd      	mov	sp, r7
100010da:	bd80      	pop	{r7, pc}
100010dc:	40050000 	.word	0x40050000

100010e0 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
100010e0:	b580      	push	{r7, lr}
100010e2:	af00      	add	r7, sp, #0
  /* Override values of CLOCK_VAL1 and CLOCK_VAL2 defined in vector table */
  /* MCLK = 32MHz, PCLK = 64MHz */
  
  SCU_GENERAL->PASSWD = 0x000000C0UL; /* disable bit protection */
100010e4:	4b09      	ldr	r3, [pc, #36]	; (1000110c <SystemCoreClockSetup+0x2c>)
100010e6:	22c0      	movs	r2, #192	; 0xc0
100010e8:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->CLKCR = 0x3FF10100UL;
100010ea:	4b09      	ldr	r3, [pc, #36]	; (10001110 <SystemCoreClockSetup+0x30>)
100010ec:	4a09      	ldr	r2, [pc, #36]	; (10001114 <SystemCoreClockSetup+0x34>)
100010ee:	601a      	str	r2, [r3, #0]
  while((SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk));
100010f0:	46c0      	nop			; (mov r8, r8)
100010f2:	4b07      	ldr	r3, [pc, #28]	; (10001110 <SystemCoreClockSetup+0x30>)
100010f4:	681a      	ldr	r2, [r3, #0]
100010f6:	2380      	movs	r3, #128	; 0x80
100010f8:	05db      	lsls	r3, r3, #23
100010fa:	4013      	ands	r3, r2
100010fc:	d1f9      	bne.n	100010f2 <SystemCoreClockSetup+0x12>
  SCU_GENERAL->PASSWD = 0x000000C3UL; /* enable bit protection */
100010fe:	4b03      	ldr	r3, [pc, #12]	; (1000110c <SystemCoreClockSetup+0x2c>)
10001100:	22c3      	movs	r2, #195	; 0xc3
10001102:	625a      	str	r2, [r3, #36]	; 0x24
  
  SystemCoreClockUpdate();
10001104:	f000 f808 	bl	10001118 <SystemCoreClockUpdate>
}
10001108:	46bd      	mov	sp, r7
1000110a:	bd80      	pop	{r7, pc}
1000110c:	40010000 	.word	0x40010000
10001110:	40010300 	.word	0x40010300
10001114:	3ff10100 	.word	0x3ff10100

10001118 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
10001118:	b580      	push	{r7, lr}
1000111a:	af00      	add	r7, sp, #0
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
1000111c:	4b12      	ldr	r3, [pc, #72]	; (10001168 <SystemCoreClockUpdate+0x50>)
1000111e:	681a      	ldr	r2, [r3, #0]
10001120:	23ff      	movs	r3, #255	; 0xff
10001122:	021b      	lsls	r3, r3, #8
10001124:	4013      	ands	r3, r2
10001126:	0a1a      	lsrs	r2, r3, #8
10001128:	4b10      	ldr	r3, [pc, #64]	; (1000116c <SystemCoreClockUpdate+0x54>)
1000112a:	601a      	str	r2, [r3, #0]
  FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
1000112c:	4b0e      	ldr	r3, [pc, #56]	; (10001168 <SystemCoreClockUpdate+0x50>)
1000112e:	681b      	ldr	r3, [r3, #0]
10001130:	22ff      	movs	r2, #255	; 0xff
10001132:	401a      	ands	r2, r3
10001134:	4b0e      	ldr	r3, [pc, #56]	; (10001170 <SystemCoreClockUpdate+0x58>)
10001136:	601a      	str	r2, [r3, #0]
  
  if (IDIV != 0)
10001138:	4b0c      	ldr	r3, [pc, #48]	; (1000116c <SystemCoreClockUpdate+0x54>)
1000113a:	681b      	ldr	r3, [r3, #0]
1000113c:	2b00      	cmp	r3, #0
1000113e:	d00e      	beq.n	1000115e <SystemCoreClockUpdate+0x46>
  {
    /* Fractional divider is enabled and used */
    SystemCoreClock = ((DCO1_FREQUENCY << 6U) / ((IDIV << 8) + FDIV)) << 1U;
10001140:	4b0a      	ldr	r3, [pc, #40]	; (1000116c <SystemCoreClockUpdate+0x54>)
10001142:	681b      	ldr	r3, [r3, #0]
10001144:	021a      	lsls	r2, r3, #8
10001146:	4b0a      	ldr	r3, [pc, #40]	; (10001170 <SystemCoreClockUpdate+0x58>)
10001148:	681b      	ldr	r3, [r3, #0]
1000114a:	18d3      	adds	r3, r2, r3
1000114c:	4809      	ldr	r0, [pc, #36]	; (10001174 <SystemCoreClockUpdate+0x5c>)
1000114e:	1c19      	adds	r1, r3, #0
10001150:	f002 f8c8 	bl	100032e4 <__aeabi_uidiv>
10001154:	1c03      	adds	r3, r0, #0
10001156:	005a      	lsls	r2, r3, #1
10001158:	4b07      	ldr	r3, [pc, #28]	; (10001178 <SystemCoreClockUpdate+0x60>)
1000115a:	601a      	str	r2, [r3, #0]
1000115c:	e002      	b.n	10001164 <SystemCoreClockUpdate+0x4c>
  }
  else
  {
    /* Fractional divider bypassed. Simply divide DCO_DCLK by 2 */
    SystemCoreClock = DCO1_FREQUENCY >> 1U;
1000115e:	4b06      	ldr	r3, [pc, #24]	; (10001178 <SystemCoreClockUpdate+0x60>)
10001160:	4a06      	ldr	r2, [pc, #24]	; (1000117c <SystemCoreClockUpdate+0x64>)
10001162:	601a      	str	r2, [r3, #0]
  }
}
10001164:	46bd      	mov	sp, r7
10001166:	bd80      	pop	{r7, pc}
10001168:	40010300 	.word	0x40010300
1000116c:	20000520 	.word	0x20000520
10001170:	20000524 	.word	0x20000524
10001174:	f4240000 	.word	0xf4240000
10001178:	20003ffc 	.word	0x20003ffc
1000117c:	01e84800 	.word	0x01e84800

10001180 <_init>:
  }
}

/* Init */
void _init(void)
{}
10001180:	b580      	push	{r7, lr}
10001182:	af00      	add	r7, sp, #0
10001184:	46bd      	mov	sp, r7
10001186:	bd80      	pop	{r7, pc}

10001188 <init>:
#include "XMC1100-LibHaas.h"
#include "HardwareController.h"

void init() {
10001188:	b580      	push	{r7, lr}
1000118a:	af00      	add	r7, sp, #0
	uart_init();
1000118c:	f001 fcd2 	bl	10002b34 <uart_init>
	uart_interrupt_enable();
10001190:	f001 fde6 	bl	10002d60 <uart_interrupt_enable>
	uart_select_channel(UARTCHANNEL_0);
10001194:	2003      	movs	r0, #3
10001196:	f001 fe79 	bl	10002e8c <uart_select_channel>

	rs232_init();
1000119a:	f001 fb83 	bl	100028a4 <rs232_init>
	rs232_interrupt_enable();
1000119e:	f001 fc4d 	bl	10002a3c <rs232_interrupt_enable>

	bit_init(redLEDport, redLEDpin, OUTP);
100011a2:	2001      	movs	r0, #1
100011a4:	2102      	movs	r1, #2
100011a6:	2201      	movs	r2, #1
100011a8:	f000 f9f6 	bl	10001598 <bit_init>
	bit_init(greenLEDport, greenLEDpin, OUTP);
100011ac:	2001      	movs	r0, #1
100011ae:	2103      	movs	r1, #3
100011b0:	2201      	movs	r2, #1
100011b2:	f000 f9f1 	bl	10001598 <bit_init>
	bit_init(LEDstripesport, LEDstripespin, OUTP);
100011b6:	2000      	movs	r0, #0
100011b8:	2104      	movs	r1, #4
100011ba:	2201      	movs	r2, #1
100011bc:	f000 f9ec 	bl	10001598 <bit_init>
	bit_init(laserport, laserpin, OUTP);
100011c0:	2000      	movs	r0, #0
100011c2:	2100      	movs	r1, #0
100011c4:	2201      	movs	r2, #1
100011c6:	f000 f9e7 	bl	10001598 <bit_init>
	bit_init(lightbarrier1port, lightbarrier1pin, INP);
100011ca:	2002      	movs	r0, #2
100011cc:	2103      	movs	r1, #3
100011ce:	2200      	movs	r2, #0
100011d0:	f000 f9e2 	bl	10001598 <bit_init>
	bit_init(lightbarrier2port, lightbarrier2pin, INP);
100011d4:	2002      	movs	r0, #2
100011d6:	2102      	movs	r1, #2
100011d8:	2200      	movs	r2, #0
100011da:	f000 f9dd 	bl	10001598 <bit_init>
	bit_init(lightbarrier3port, lightbarrier3pin, INP);
100011de:	2002      	movs	r0, #2
100011e0:	2101      	movs	r1, #1
100011e2:	2200      	movs	r2, #0
100011e4:	f000 f9d8 	bl	10001598 <bit_init>
	bit_init(pneumatics1port, pneumatics1pin, OUTP);
100011e8:	2000      	movs	r0, #0
100011ea:	2101      	movs	r1, #1
100011ec:	2201      	movs	r2, #1
100011ee:	f000 f9d3 	bl	10001598 <bit_init>
	bit_init(pneumatics2port, pneumatics2pin, OUTP);
100011f2:	2000      	movs	r0, #0
100011f4:	2102      	movs	r1, #2
100011f6:	2201      	movs	r2, #1
100011f8:	f000 f9ce 	bl	10001598 <bit_init>
	bit_init_mode(button1port, button1pin, INP, PULLDOWN);
100011fc:	2001      	movs	r0, #1
100011fe:	2105      	movs	r1, #5
10001200:	2200      	movs	r2, #0
10001202:	2302      	movs	r3, #2
10001204:	f000 fb88 	bl	10001918 <bit_init_mode>
	bit_init_mode(button2port, button2pin, INP, PULLDOWN);
10001208:	2001      	movs	r0, #1
1000120a:	2104      	movs	r1, #4
1000120c:	2200      	movs	r2, #0
1000120e:	2302      	movs	r3, #2
10001210:	f000 fb82 	bl	10001918 <bit_init_mode>
	bit_init(inductivSensor1Port, inductivSensor1Pin, INP);
10001214:	2000      	movs	r0, #0
10001216:	210a      	movs	r1, #10
10001218:	2200      	movs	r2, #0
1000121a:	f000 f9bd 	bl	10001598 <bit_init>
	bit_init(inductivSensor2Port, inductivSensor2Pin, INP);
1000121e:	2000      	movs	r0, #0
10001220:	210b      	movs	r1, #11
10001222:	2200      	movs	r2, #0
10001224:	f000 f9b8 	bl	10001598 <bit_init>
	bit_init(dir1port, dir1pin, OUTP);
10001228:	2000      	movs	r0, #0
1000122a:	2107      	movs	r1, #7
1000122c:	2201      	movs	r2, #1
1000122e:	f000 f9b3 	bl	10001598 <bit_init>
	bit_init(productionLineDirectionPort, productionLineDirectionPin, OUTP);
10001232:	2000      	movs	r0, #0
10001234:	2109      	movs	r1, #9
10001236:	2201      	movs	r2, #1
10001238:	f000 f9ae 	bl	10001598 <bit_init>

	pwm1_init();
1000123c:	f001 fa44 	bl	100026c8 <pwm1_init>
	pwm1_start();
10001240:	f001 fad2 	bl	100027e8 <pwm1_start>
	pwm3_init();
10001244:	f001 fa70 	bl	10002728 <pwm3_init>
	pwm3_start();
10001248:	f001 fad8 	bl	100027fc <pwm3_start>

	productionLine(0, FORWARD);
1000124c:	2000      	movs	r0, #0
1000124e:	2100      	movs	r1, #0
10001250:	f000 f868 	bl	10001324 <productionLine>
	slider(0, SLIDERFORWARD);
10001254:	2000      	movs	r0, #0
10001256:	2100      	movs	r1, #0
10001258:	f000 f964 	bl	10001524 <slider>

	bit_write(P0, laserport, OFF);
1000125c:	2000      	movs	r0, #0
1000125e:	2100      	movs	r1, #0
10001260:	2200      	movs	r2, #0
10001262:	f001 f939 	bl	100024d8 <bit_write>
	bit_write(LEDstripesport, LEDstripespin, OFF);
10001266:	2000      	movs	r0, #0
10001268:	2104      	movs	r1, #4
1000126a:	2200      	movs	r2, #0
1000126c:	f001 f934 	bl	100024d8 <bit_write>
}
10001270:	46bd      	mov	sp, r7
10001272:	bd80      	pop	{r7, pc}

10001274 <laser>:

void laser(int onOrOff) {
10001274:	b580      	push	{r7, lr}
10001276:	b082      	sub	sp, #8
10001278:	af00      	add	r7, sp, #0
1000127a:	6078      	str	r0, [r7, #4]
	onOrOff ?
			bit_write(laserport, laserpin, ON) :
1000127c:	687b      	ldr	r3, [r7, #4]
1000127e:	2b00      	cmp	r3, #0
10001280:	d005      	beq.n	1000128e <laser+0x1a>
10001282:	2000      	movs	r0, #0
10001284:	2100      	movs	r1, #0
10001286:	2201      	movs	r2, #1
10001288:	f001 f926 	bl	100024d8 <bit_write>
1000128c:	e004      	b.n	10001298 <laser+0x24>
			bit_write(laserport, laserpin, OFF);
1000128e:	2000      	movs	r0, #0
10001290:	2100      	movs	r1, #0
10001292:	2200      	movs	r2, #0
10001294:	f001 f920 	bl	100024d8 <bit_write>
}
10001298:	46bd      	mov	sp, r7
1000129a:	b002      	add	sp, #8
1000129c:	bd80      	pop	{r7, pc}
1000129e:	46c0      	nop			; (mov r8, r8)

100012a0 <LEDStripes>:

void LEDStripes(int onOrOff) {
100012a0:	b580      	push	{r7, lr}
100012a2:	b082      	sub	sp, #8
100012a4:	af00      	add	r7, sp, #0
100012a6:	6078      	str	r0, [r7, #4]
	onOrOff ?
			bit_write(LEDstripesport, LEDstripespin, OFF) :
100012a8:	687b      	ldr	r3, [r7, #4]
100012aa:	2b00      	cmp	r3, #0
100012ac:	d005      	beq.n	100012ba <LEDStripes+0x1a>
100012ae:	2000      	movs	r0, #0
100012b0:	2104      	movs	r1, #4
100012b2:	2200      	movs	r2, #0
100012b4:	f001 f910 	bl	100024d8 <bit_write>
100012b8:	e004      	b.n	100012c4 <LEDStripes+0x24>
			bit_write(LEDstripesport, LEDstripespin, ON);
100012ba:	2000      	movs	r0, #0
100012bc:	2104      	movs	r1, #4
100012be:	2201      	movs	r2, #1
100012c0:	f001 f90a 	bl	100024d8 <bit_write>
}
100012c4:	46bd      	mov	sp, r7
100012c6:	b002      	add	sp, #8
100012c8:	bd80      	pop	{r7, pc}
100012ca:	46c0      	nop			; (mov r8, r8)

100012cc <redLED>:

void redLED(int onOrOff) {
100012cc:	b580      	push	{r7, lr}
100012ce:	b082      	sub	sp, #8
100012d0:	af00      	add	r7, sp, #0
100012d2:	6078      	str	r0, [r7, #4]
	onOrOff ?
			bit_write(redLEDport, redLEDpin, OFF) :
100012d4:	687b      	ldr	r3, [r7, #4]
100012d6:	2b00      	cmp	r3, #0
100012d8:	d005      	beq.n	100012e6 <redLED+0x1a>
100012da:	2001      	movs	r0, #1
100012dc:	2102      	movs	r1, #2
100012de:	2200      	movs	r2, #0
100012e0:	f001 f8fa 	bl	100024d8 <bit_write>
100012e4:	e004      	b.n	100012f0 <redLED+0x24>
			bit_write(redLEDport, redLEDpin, ON);
100012e6:	2001      	movs	r0, #1
100012e8:	2102      	movs	r1, #2
100012ea:	2201      	movs	r2, #1
100012ec:	f001 f8f4 	bl	100024d8 <bit_write>
}
100012f0:	46bd      	mov	sp, r7
100012f2:	b002      	add	sp, #8
100012f4:	bd80      	pop	{r7, pc}
100012f6:	46c0      	nop			; (mov r8, r8)

100012f8 <greenLED>:

void greenLED(int onOrOff) {
100012f8:	b580      	push	{r7, lr}
100012fa:	b082      	sub	sp, #8
100012fc:	af00      	add	r7, sp, #0
100012fe:	6078      	str	r0, [r7, #4]
	onOrOff ?
			bit_write(greenLEDport, greenLEDpin, OFF) :
10001300:	687b      	ldr	r3, [r7, #4]
10001302:	2b00      	cmp	r3, #0
10001304:	d005      	beq.n	10001312 <greenLED+0x1a>
10001306:	2001      	movs	r0, #1
10001308:	2103      	movs	r1, #3
1000130a:	2200      	movs	r2, #0
1000130c:	f001 f8e4 	bl	100024d8 <bit_write>
10001310:	e004      	b.n	1000131c <greenLED+0x24>
			bit_write(greenLEDport, greenLEDpin, ON);
10001312:	2001      	movs	r0, #1
10001314:	2103      	movs	r1, #3
10001316:	2201      	movs	r2, #1
10001318:	f001 f8de 	bl	100024d8 <bit_write>
}
1000131c:	46bd      	mov	sp, r7
1000131e:	b002      	add	sp, #8
10001320:	bd80      	pop	{r7, pc}
10001322:	46c0      	nop			; (mov r8, r8)

10001324 <productionLine>:
			bit_write(relay2port, relay2pin, ON) :
			bit_write(relay2port, relay2pin, OFF);
}
*/

void productionLine(int velocity, int direction) {
10001324:	b580      	push	{r7, lr}
10001326:	b082      	sub	sp, #8
10001328:	af00      	add	r7, sp, #0
1000132a:	6078      	str	r0, [r7, #4]
1000132c:	6039      	str	r1, [r7, #0]
	direction ?
			bit_write(productionLineDirectionPort, productionLineDirectionPin, BACKWARD) :
1000132e:	683b      	ldr	r3, [r7, #0]
10001330:	2b00      	cmp	r3, #0
10001332:	d005      	beq.n	10001340 <productionLine+0x1c>
10001334:	2000      	movs	r0, #0
10001336:	2109      	movs	r1, #9
10001338:	2201      	movs	r2, #1
1000133a:	f001 f8cd 	bl	100024d8 <bit_write>
1000133e:	e004      	b.n	1000134a <productionLine+0x26>
			bit_write(dir1port, dir1pin, FORWARD);
10001340:	2000      	movs	r0, #0
10001342:	2107      	movs	r1, #7
10001344:	2200      	movs	r2, #0
10001346:	f001 f8c7 	bl	100024d8 <bit_write>
	// inverse velocity by 50000
	pwm3_duty_cycle(50000 - velocity);
1000134a:	687b      	ldr	r3, [r7, #4]
1000134c:	b29b      	uxth	r3, r3
1000134e:	4a04      	ldr	r2, [pc, #16]	; (10001360 <productionLine+0x3c>)
10001350:	1ad3      	subs	r3, r2, r3
10001352:	b29b      	uxth	r3, r3
10001354:	1c18      	adds	r0, r3, #0
10001356:	f001 fa2f 	bl	100027b8 <pwm3_duty_cycle>
}
1000135a:	46bd      	mov	sp, r7
1000135c:	b002      	add	sp, #8
1000135e:	bd80      	pop	{r7, pc}
10001360:	ffffc350 	.word	0xffffc350

10001364 <lightBarrier1>:


int lightBarrier1(void) {
10001364:	b580      	push	{r7, lr}
10001366:	b082      	sub	sp, #8
10001368:	af00      	add	r7, sp, #0
	int temp1 = bit_read(lightbarrier1port, lightbarrier1pin);
1000136a:	2002      	movs	r0, #2
1000136c:	2103      	movs	r1, #3
1000136e:	f001 f891 	bl	10002494 <bit_read>
10001372:	1c03      	adds	r3, r0, #0
10001374:	607b      	str	r3, [r7, #4]
	delay_ms(LED_TOLERANCE_MILLIS);
10001376:	2005      	movs	r0, #5
10001378:	f001 fa72 	bl	10002860 <delay_ms>
	int temp2 = bit_read(lightbarrier1port, lightbarrier1pin);
1000137c:	2002      	movs	r0, #2
1000137e:	2103      	movs	r1, #3
10001380:	f001 f888 	bl	10002494 <bit_read>
10001384:	1c03      	adds	r3, r0, #0
10001386:	603b      	str	r3, [r7, #0]

	// implements tolerance

	while (temp1 != temp2) {
10001388:	e00a      	b.n	100013a0 <lightBarrier1+0x3c>
		temp1 = temp2;
1000138a:	683b      	ldr	r3, [r7, #0]
1000138c:	607b      	str	r3, [r7, #4]
		delay_ms(LED_TOLERANCE_MILLIS);
1000138e:	2005      	movs	r0, #5
10001390:	f001 fa66 	bl	10002860 <delay_ms>
		temp2 = bit_read(lightbarrier1port, lightbarrier1pin);
10001394:	2002      	movs	r0, #2
10001396:	2103      	movs	r1, #3
10001398:	f001 f87c 	bl	10002494 <bit_read>
1000139c:	1c03      	adds	r3, r0, #0
1000139e:	603b      	str	r3, [r7, #0]
	delay_ms(LED_TOLERANCE_MILLIS);
	int temp2 = bit_read(lightbarrier1port, lightbarrier1pin);

	// implements tolerance

	while (temp1 != temp2) {
100013a0:	687a      	ldr	r2, [r7, #4]
100013a2:	683b      	ldr	r3, [r7, #0]
100013a4:	429a      	cmp	r2, r3
100013a6:	d1f0      	bne.n	1000138a <lightBarrier1+0x26>
		temp1 = temp2;
		delay_ms(LED_TOLERANCE_MILLIS);
		temp2 = bit_read(lightbarrier1port, lightbarrier1pin);
	}

	if (temp1 == 0) {
100013a8:	687b      	ldr	r3, [r7, #4]
100013aa:	2b00      	cmp	r3, #0
100013ac:	d101      	bne.n	100013b2 <lightBarrier1+0x4e>
		return ON;
100013ae:	2301      	movs	r3, #1
100013b0:	e000      	b.n	100013b4 <lightBarrier1+0x50>
	} else {
		return OFF;
100013b2:	2300      	movs	r3, #0
	}
}
100013b4:	1c18      	adds	r0, r3, #0
100013b6:	46bd      	mov	sp, r7
100013b8:	b002      	add	sp, #8
100013ba:	bd80      	pop	{r7, pc}

100013bc <lightBarrier2>:

int lightBarrier2(void) {
100013bc:	b580      	push	{r7, lr}
100013be:	b082      	sub	sp, #8
100013c0:	af00      	add	r7, sp, #0
	int temp1 = bit_read(lightbarrier2port, lightbarrier2pin);
100013c2:	2002      	movs	r0, #2
100013c4:	2102      	movs	r1, #2
100013c6:	f001 f865 	bl	10002494 <bit_read>
100013ca:	1c03      	adds	r3, r0, #0
100013cc:	607b      	str	r3, [r7, #4]
	delay_ms(LED_TOLERANCE_MILLIS);
100013ce:	2005      	movs	r0, #5
100013d0:	f001 fa46 	bl	10002860 <delay_ms>
	int temp2 = bit_read(lightbarrier2port, lightbarrier2pin);
100013d4:	2002      	movs	r0, #2
100013d6:	2102      	movs	r1, #2
100013d8:	f001 f85c 	bl	10002494 <bit_read>
100013dc:	1c03      	adds	r3, r0, #0
100013de:	603b      	str	r3, [r7, #0]

	// implements tolerance

	while (temp1 != temp2) {
100013e0:	e00a      	b.n	100013f8 <lightBarrier2+0x3c>
		temp1 = temp2;
100013e2:	683b      	ldr	r3, [r7, #0]
100013e4:	607b      	str	r3, [r7, #4]
		delay_ms(LED_TOLERANCE_MILLIS);
100013e6:	2005      	movs	r0, #5
100013e8:	f001 fa3a 	bl	10002860 <delay_ms>
		temp2 = bit_read(lightbarrier2port, lightbarrier2pin);
100013ec:	2002      	movs	r0, #2
100013ee:	2102      	movs	r1, #2
100013f0:	f001 f850 	bl	10002494 <bit_read>
100013f4:	1c03      	adds	r3, r0, #0
100013f6:	603b      	str	r3, [r7, #0]
	delay_ms(LED_TOLERANCE_MILLIS);
	int temp2 = bit_read(lightbarrier2port, lightbarrier2pin);

	// implements tolerance

	while (temp1 != temp2) {
100013f8:	687a      	ldr	r2, [r7, #4]
100013fa:	683b      	ldr	r3, [r7, #0]
100013fc:	429a      	cmp	r2, r3
100013fe:	d1f0      	bne.n	100013e2 <lightBarrier2+0x26>
		temp1 = temp2;
		delay_ms(LED_TOLERANCE_MILLIS);
		temp2 = bit_read(lightbarrier2port, lightbarrier2pin);
	}

	if (temp1 == 0) {
10001400:	687b      	ldr	r3, [r7, #4]
10001402:	2b00      	cmp	r3, #0
10001404:	d101      	bne.n	1000140a <lightBarrier2+0x4e>
		return ON;
10001406:	2301      	movs	r3, #1
10001408:	e000      	b.n	1000140c <lightBarrier2+0x50>
	} else {
		return OFF;
1000140a:	2300      	movs	r3, #0
	}
}
1000140c:	1c18      	adds	r0, r3, #0
1000140e:	46bd      	mov	sp, r7
10001410:	b002      	add	sp, #8
10001412:	bd80      	pop	{r7, pc}

10001414 <lightBarrier3>:

int lightBarrier3(void) {
10001414:	b580      	push	{r7, lr}
10001416:	b082      	sub	sp, #8
10001418:	af00      	add	r7, sp, #0
	int temp1 = bit_read(lightbarrier3port, lightbarrier3pin);
1000141a:	2002      	movs	r0, #2
1000141c:	2101      	movs	r1, #1
1000141e:	f001 f839 	bl	10002494 <bit_read>
10001422:	1c03      	adds	r3, r0, #0
10001424:	607b      	str	r3, [r7, #4]
	delay_ms(LED_TOLERANCE_MILLIS);
10001426:	2005      	movs	r0, #5
10001428:	f001 fa1a 	bl	10002860 <delay_ms>
	int temp2 = bit_read(lightbarrier3port, lightbarrier3pin);
1000142c:	2002      	movs	r0, #2
1000142e:	2101      	movs	r1, #1
10001430:	f001 f830 	bl	10002494 <bit_read>
10001434:	1c03      	adds	r3, r0, #0
10001436:	603b      	str	r3, [r7, #0]

	// implements tolerance

	while (temp1 != temp2) {
10001438:	e00a      	b.n	10001450 <lightBarrier3+0x3c>
		temp1 = temp2;
1000143a:	683b      	ldr	r3, [r7, #0]
1000143c:	607b      	str	r3, [r7, #4]
		delay_ms(LED_TOLERANCE_MILLIS);
1000143e:	2005      	movs	r0, #5
10001440:	f001 fa0e 	bl	10002860 <delay_ms>
		temp2 = bit_read(lightbarrier3port, lightbarrier3pin);
10001444:	2002      	movs	r0, #2
10001446:	2101      	movs	r1, #1
10001448:	f001 f824 	bl	10002494 <bit_read>
1000144c:	1c03      	adds	r3, r0, #0
1000144e:	603b      	str	r3, [r7, #0]
	delay_ms(LED_TOLERANCE_MILLIS);
	int temp2 = bit_read(lightbarrier3port, lightbarrier3pin);

	// implements tolerance

	while (temp1 != temp2) {
10001450:	687a      	ldr	r2, [r7, #4]
10001452:	683b      	ldr	r3, [r7, #0]
10001454:	429a      	cmp	r2, r3
10001456:	d1f0      	bne.n	1000143a <lightBarrier3+0x26>
		temp1 = temp2;
		delay_ms(LED_TOLERANCE_MILLIS);
		temp2 = bit_read(lightbarrier3port, lightbarrier3pin);
	}

	if (temp1 == 0) {
10001458:	687b      	ldr	r3, [r7, #4]
1000145a:	2b00      	cmp	r3, #0
1000145c:	d101      	bne.n	10001462 <lightBarrier3+0x4e>
		return ON;
1000145e:	2301      	movs	r3, #1
10001460:	e000      	b.n	10001464 <lightBarrier3+0x50>
	} else {
		return OFF;
10001462:	2300      	movs	r3, #0
	}
}
10001464:	1c18      	adds	r0, r3, #0
10001466:	46bd      	mov	sp, r7
10001468:	b002      	add	sp, #8
1000146a:	bd80      	pop	{r7, pc}

1000146c <pneumatics1>:

void pneumatics1(int outOrIn) {
1000146c:	b580      	push	{r7, lr}
1000146e:	b082      	sub	sp, #8
10001470:	af00      	add	r7, sp, #0
10001472:	6078      	str	r0, [r7, #4]
	outOrIn ?
			bit_write(pneumatics1port, pneumatics1pin, OUT) :
10001474:	687b      	ldr	r3, [r7, #4]
10001476:	2b00      	cmp	r3, #0
10001478:	d005      	beq.n	10001486 <pneumatics1+0x1a>
1000147a:	2000      	movs	r0, #0
1000147c:	2101      	movs	r1, #1
1000147e:	2201      	movs	r2, #1
10001480:	f001 f82a 	bl	100024d8 <bit_write>
10001484:	e004      	b.n	10001490 <pneumatics1+0x24>
			bit_write(pneumatics1port, pneumatics1pin, IN);
10001486:	2000      	movs	r0, #0
10001488:	2101      	movs	r1, #1
1000148a:	2200      	movs	r2, #0
1000148c:	f001 f824 	bl	100024d8 <bit_write>
}
10001490:	46bd      	mov	sp, r7
10001492:	b002      	add	sp, #8
10001494:	bd80      	pop	{r7, pc}
10001496:	46c0      	nop			; (mov r8, r8)

10001498 <pneumatics2>:

void pneumatics2(int outOrIn) {
10001498:	b580      	push	{r7, lr}
1000149a:	b082      	sub	sp, #8
1000149c:	af00      	add	r7, sp, #0
1000149e:	6078      	str	r0, [r7, #4]
	outOrIn ?
			bit_write(pneumatics2port, pneumatics2pin, OUT) :
100014a0:	687b      	ldr	r3, [r7, #4]
100014a2:	2b00      	cmp	r3, #0
100014a4:	d005      	beq.n	100014b2 <pneumatics2+0x1a>
100014a6:	2000      	movs	r0, #0
100014a8:	2102      	movs	r1, #2
100014aa:	2201      	movs	r2, #1
100014ac:	f001 f814 	bl	100024d8 <bit_write>
100014b0:	e004      	b.n	100014bc <pneumatics2+0x24>
			bit_write(pneumatics2port, pneumatics2pin, IN);
100014b2:	2000      	movs	r0, #0
100014b4:	2102      	movs	r1, #2
100014b6:	2200      	movs	r2, #0
100014b8:	f001 f80e 	bl	100024d8 <bit_write>
}
100014bc:	46bd      	mov	sp, r7
100014be:	b002      	add	sp, #8
100014c0:	bd80      	pop	{r7, pc}
100014c2:	46c0      	nop			; (mov r8, r8)

100014c4 <readButton1>:

int readButton1(void) {
100014c4:	b580      	push	{r7, lr}
100014c6:	af00      	add	r7, sp, #0
	return !bit_read(button1port, button1pin);
100014c8:	2001      	movs	r0, #1
100014ca:	2105      	movs	r1, #5
100014cc:	f000 ffe2 	bl	10002494 <bit_read>
100014d0:	1c03      	adds	r3, r0, #0
100014d2:	425a      	negs	r2, r3
100014d4:	4153      	adcs	r3, r2
100014d6:	b2db      	uxtb	r3, r3
}
100014d8:	1c18      	adds	r0, r3, #0
100014da:	46bd      	mov	sp, r7
100014dc:	bd80      	pop	{r7, pc}
100014de:	46c0      	nop			; (mov r8, r8)

100014e0 <readButton2>:

int readButton2(void) {
100014e0:	b580      	push	{r7, lr}
100014e2:	af00      	add	r7, sp, #0
	return !bit_read(button2port, button2pin);
100014e4:	2001      	movs	r0, #1
100014e6:	2104      	movs	r1, #4
100014e8:	f000 ffd4 	bl	10002494 <bit_read>
100014ec:	1c03      	adds	r3, r0, #0
100014ee:	425a      	negs	r2, r3
100014f0:	4153      	adcs	r3, r2
100014f2:	b2db      	uxtb	r3, r3
}
100014f4:	1c18      	adds	r0, r3, #0
100014f6:	46bd      	mov	sp, r7
100014f8:	bd80      	pop	{r7, pc}
100014fa:	46c0      	nop			; (mov r8, r8)

100014fc <readInductivSensor1>:

int readInductivSensor1(void) {
100014fc:	b580      	push	{r7, lr}
100014fe:	af00      	add	r7, sp, #0
	return bit_read(inductivSensor1Port, inductivSensor1Pin);
10001500:	2000      	movs	r0, #0
10001502:	210a      	movs	r1, #10
10001504:	f000 ffc6 	bl	10002494 <bit_read>
10001508:	1c03      	adds	r3, r0, #0
}
1000150a:	1c18      	adds	r0, r3, #0
1000150c:	46bd      	mov	sp, r7
1000150e:	bd80      	pop	{r7, pc}

10001510 <readInductivSensor2>:

int readInductivSensor2(void) {
10001510:	b580      	push	{r7, lr}
10001512:	af00      	add	r7, sp, #0
	return bit_read(inductivSensor2Port, inductivSensor2Pin);
10001514:	2000      	movs	r0, #0
10001516:	210b      	movs	r1, #11
10001518:	f000 ffbc 	bl	10002494 <bit_read>
1000151c:	1c03      	adds	r3, r0, #0
}
1000151e:	1c18      	adds	r0, r3, #0
10001520:	46bd      	mov	sp, r7
10001522:	bd80      	pop	{r7, pc}

10001524 <slider>:

void slider(int velocity, int direction) {
10001524:	b580      	push	{r7, lr}
10001526:	b082      	sub	sp, #8
10001528:	af00      	add	r7, sp, #0
1000152a:	6078      	str	r0, [r7, #4]
1000152c:	6039      	str	r1, [r7, #0]
	direction ?
			bit_write(dir1port, dir1pin, SLIDERBACKWARD) :
1000152e:	683b      	ldr	r3, [r7, #0]
10001530:	2b00      	cmp	r3, #0
10001532:	d005      	beq.n	10001540 <slider+0x1c>
10001534:	2000      	movs	r0, #0
10001536:	2107      	movs	r1, #7
10001538:	2201      	movs	r2, #1
1000153a:	f000 ffcd 	bl	100024d8 <bit_write>
1000153e:	e004      	b.n	1000154a <slider+0x26>
			bit_write(dir1port, dir1pin, SLIDERFORWARD);
10001540:	2000      	movs	r0, #0
10001542:	2107      	movs	r1, #7
10001544:	2200      	movs	r2, #0
10001546:	f000 ffc7 	bl	100024d8 <bit_write>
	// inverse velocity by 50000
	pwm1_duty_cycle(50000 - velocity);
1000154a:	687b      	ldr	r3, [r7, #4]
1000154c:	b29b      	uxth	r3, r3
1000154e:	4a04      	ldr	r2, [pc, #16]	; (10001560 <slider+0x3c>)
10001550:	1ad3      	subs	r3, r2, r3
10001552:	b29b      	uxth	r3, r3
10001554:	1c18      	adds	r0, r3, #0
10001556:	f001 f917 	bl	10002788 <pwm1_duty_cycle>
}
1000155a:	46bd      	mov	sp, r7
1000155c:	b002      	add	sp, #8
1000155e:	bd80      	pop	{r7, pc}
10001560:	ffffc350 	.word	0xffffc350

10001564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10001564:	b580      	push	{r7, lr}
10001566:	b082      	sub	sp, #8
10001568:	af00      	add	r7, sp, #0
1000156a:	1c02      	adds	r2, r0, #0
1000156c:	1dfb      	adds	r3, r7, #7
1000156e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10001570:	1dfb      	adds	r3, r7, #7
10001572:	781b      	ldrb	r3, [r3, #0]
10001574:	2b7f      	cmp	r3, #127	; 0x7f
10001576:	d809      	bhi.n	1000158c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
10001578:	4b06      	ldr	r3, [pc, #24]	; (10001594 <__NVIC_EnableIRQ+0x30>)
1000157a:	1dfa      	adds	r2, r7, #7
1000157c:	7812      	ldrb	r2, [r2, #0]
1000157e:	1c11      	adds	r1, r2, #0
10001580:	221f      	movs	r2, #31
10001582:	400a      	ands	r2, r1
10001584:	2101      	movs	r1, #1
10001586:	4091      	lsls	r1, r2
10001588:	1c0a      	adds	r2, r1, #0
1000158a:	601a      	str	r2, [r3, #0]
  }
}
1000158c:	46bd      	mov	sp, r7
1000158e:	b002      	add	sp, #8
10001590:	bd80      	pop	{r7, pc}
10001592:	46c0      	nop			; (mov r8, r8)
10001594:	e000e100 	.word	0xe000e100

10001598 <bit_init>:
// --------------------------------------------------------------
// Einzelnes Bit für Ein- oder Ausgabe initialisieren
// port: P0,P1,P2 bitnr: 0..15 direction: INP 0, OUTP 1
//---------------------------------------------------------------
void bit_init(uint8_t port, uint8_t bitnr, uint8_t direction)
{
10001598:	b590      	push	{r4, r7, lr}
1000159a:	b083      	sub	sp, #12
1000159c:	af00      	add	r7, sp, #0
1000159e:	1c04      	adds	r4, r0, #0
100015a0:	1c08      	adds	r0, r1, #0
100015a2:	1c11      	adds	r1, r2, #0
100015a4:	1dfb      	adds	r3, r7, #7
100015a6:	1c22      	adds	r2, r4, #0
100015a8:	701a      	strb	r2, [r3, #0]
100015aa:	1dbb      	adds	r3, r7, #6
100015ac:	1c02      	adds	r2, r0, #0
100015ae:	701a      	strb	r2, [r3, #0]
100015b0:	1d7b      	adds	r3, r7, #5
100015b2:	1c0a      	adds	r2, r1, #0
100015b4:	701a      	strb	r2, [r3, #0]
	switch (port)
100015b6:	1dfb      	adds	r3, r7, #7
100015b8:	781b      	ldrb	r3, [r3, #0]
100015ba:	2b01      	cmp	r3, #1
100015bc:	d100      	bne.n	100015c0 <bit_init+0x28>
100015be:	e0a1      	b.n	10001704 <bit_init+0x16c>
100015c0:	2b02      	cmp	r3, #2
100015c2:	d100      	bne.n	100015c6 <bit_init+0x2e>
100015c4:	e0ea      	b.n	1000179c <bit_init+0x204>
100015c6:	2b00      	cmp	r3, #0
100015c8:	d000      	beq.n	100015cc <bit_init+0x34>
100015ca:	e19b      	b.n	10001904 <bit_init+0x36c>
	{
		case 0 :
			{if (bitnr < 4 )
100015cc:	1dbb      	adds	r3, r7, #6
100015ce:	781b      	ldrb	r3, [r3, #0]
100015d0:	2b03      	cmp	r3, #3
100015d2:	d81d      	bhi.n	10001610 <bit_init+0x78>
				{ if (direction == 1) PORT0->IOCR0 |=1UL << ((bitnr * 8)+7);
100015d4:	1d7b      	adds	r3, r7, #5
100015d6:	781b      	ldrb	r3, [r3, #0]
100015d8:	2b01      	cmp	r3, #1
100015da:	d10c      	bne.n	100015f6 <bit_init+0x5e>
100015dc:	4bcb      	ldr	r3, [pc, #812]	; (1000190c <bit_init+0x374>)
100015de:	4acb      	ldr	r2, [pc, #812]	; (1000190c <bit_init+0x374>)
100015e0:	6911      	ldr	r1, [r2, #16]
100015e2:	1dba      	adds	r2, r7, #6
100015e4:	7812      	ldrb	r2, [r2, #0]
100015e6:	00d2      	lsls	r2, r2, #3
100015e8:	3207      	adds	r2, #7
100015ea:	2001      	movs	r0, #1
100015ec:	4090      	lsls	r0, r2
100015ee:	1c02      	adds	r2, r0, #0
100015f0:	430a      	orrs	r2, r1
100015f2:	611a      	str	r2, [r3, #16]
100015f4:	e00c      	b.n	10001610 <bit_init+0x78>
				  else PORT0->IOCR0 &= ~(1UL << ((bitnr * 8 ) + 7 ));
100015f6:	4bc5      	ldr	r3, [pc, #788]	; (1000190c <bit_init+0x374>)
100015f8:	4ac4      	ldr	r2, [pc, #784]	; (1000190c <bit_init+0x374>)
100015fa:	6912      	ldr	r2, [r2, #16]
100015fc:	1db9      	adds	r1, r7, #6
100015fe:	7809      	ldrb	r1, [r1, #0]
10001600:	00c9      	lsls	r1, r1, #3
10001602:	3107      	adds	r1, #7
10001604:	2001      	movs	r0, #1
10001606:	4088      	lsls	r0, r1
10001608:	1c01      	adds	r1, r0, #0
1000160a:	43c9      	mvns	r1, r1
1000160c:	400a      	ands	r2, r1
1000160e:	611a      	str	r2, [r3, #16]
				}
			 if ( (bitnr <8) && (bitnr > 3))
10001610:	1dbb      	adds	r3, r7, #6
10001612:	781b      	ldrb	r3, [r3, #0]
10001614:	2b07      	cmp	r3, #7
10001616:	d823      	bhi.n	10001660 <bit_init+0xc8>
10001618:	1dbb      	adds	r3, r7, #6
1000161a:	781b      	ldrb	r3, [r3, #0]
1000161c:	2b03      	cmp	r3, #3
1000161e:	d91f      	bls.n	10001660 <bit_init+0xc8>
					 { if (direction == 1) PORT0->IOCR4 |= 1UL<< (((bitnr-4) * 8)+7);
10001620:	1d7b      	adds	r3, r7, #5
10001622:	781b      	ldrb	r3, [r3, #0]
10001624:	2b01      	cmp	r3, #1
10001626:	d10d      	bne.n	10001644 <bit_init+0xac>
10001628:	4bb8      	ldr	r3, [pc, #736]	; (1000190c <bit_init+0x374>)
1000162a:	4ab8      	ldr	r2, [pc, #736]	; (1000190c <bit_init+0x374>)
1000162c:	6951      	ldr	r1, [r2, #20]
1000162e:	1dba      	adds	r2, r7, #6
10001630:	7812      	ldrb	r2, [r2, #0]
10001632:	3a04      	subs	r2, #4
10001634:	00d2      	lsls	r2, r2, #3
10001636:	3207      	adds	r2, #7
10001638:	2001      	movs	r0, #1
1000163a:	4090      	lsls	r0, r2
1000163c:	1c02      	adds	r2, r0, #0
1000163e:	430a      	orrs	r2, r1
10001640:	615a      	str	r2, [r3, #20]
10001642:	e00d      	b.n	10001660 <bit_init+0xc8>
					   else PORT0->IOCR4 &= ~(1UL << (((bitnr-4) * 8)+7) );
10001644:	4bb1      	ldr	r3, [pc, #708]	; (1000190c <bit_init+0x374>)
10001646:	4ab1      	ldr	r2, [pc, #708]	; (1000190c <bit_init+0x374>)
10001648:	6952      	ldr	r2, [r2, #20]
1000164a:	1db9      	adds	r1, r7, #6
1000164c:	7809      	ldrb	r1, [r1, #0]
1000164e:	3904      	subs	r1, #4
10001650:	00c9      	lsls	r1, r1, #3
10001652:	3107      	adds	r1, #7
10001654:	2001      	movs	r0, #1
10001656:	4088      	lsls	r0, r1
10001658:	1c01      	adds	r1, r0, #0
1000165a:	43c9      	mvns	r1, r1
1000165c:	400a      	ands	r2, r1
1000165e:	615a      	str	r2, [r3, #20]
					 }
			 if ( (bitnr <12) && (bitnr > 7))
10001660:	1dbb      	adds	r3, r7, #6
10001662:	781b      	ldrb	r3, [r3, #0]
10001664:	2b0b      	cmp	r3, #11
10001666:	d823      	bhi.n	100016b0 <bit_init+0x118>
10001668:	1dbb      	adds	r3, r7, #6
1000166a:	781b      	ldrb	r3, [r3, #0]
1000166c:	2b07      	cmp	r3, #7
1000166e:	d91f      	bls.n	100016b0 <bit_init+0x118>
			 		 { if (direction == 1) PORT0->IOCR8 |= 1UL << (((bitnr-8) * 8)+7);
10001670:	1d7b      	adds	r3, r7, #5
10001672:	781b      	ldrb	r3, [r3, #0]
10001674:	2b01      	cmp	r3, #1
10001676:	d10d      	bne.n	10001694 <bit_init+0xfc>
10001678:	4ba4      	ldr	r3, [pc, #656]	; (1000190c <bit_init+0x374>)
1000167a:	4aa4      	ldr	r2, [pc, #656]	; (1000190c <bit_init+0x374>)
1000167c:	6991      	ldr	r1, [r2, #24]
1000167e:	1dba      	adds	r2, r7, #6
10001680:	7812      	ldrb	r2, [r2, #0]
10001682:	3a08      	subs	r2, #8
10001684:	00d2      	lsls	r2, r2, #3
10001686:	3207      	adds	r2, #7
10001688:	2001      	movs	r0, #1
1000168a:	4090      	lsls	r0, r2
1000168c:	1c02      	adds	r2, r0, #0
1000168e:	430a      	orrs	r2, r1
10001690:	619a      	str	r2, [r3, #24]
10001692:	e00d      	b.n	100016b0 <bit_init+0x118>
			 		   else PORT0->IOCR8 &= ~(1UL << (((bitnr-8) * 8)+7) );
10001694:	4b9d      	ldr	r3, [pc, #628]	; (1000190c <bit_init+0x374>)
10001696:	4a9d      	ldr	r2, [pc, #628]	; (1000190c <bit_init+0x374>)
10001698:	6992      	ldr	r2, [r2, #24]
1000169a:	1db9      	adds	r1, r7, #6
1000169c:	7809      	ldrb	r1, [r1, #0]
1000169e:	3908      	subs	r1, #8
100016a0:	00c9      	lsls	r1, r1, #3
100016a2:	3107      	adds	r1, #7
100016a4:	2001      	movs	r0, #1
100016a6:	4088      	lsls	r0, r1
100016a8:	1c01      	adds	r1, r0, #0
100016aa:	43c9      	mvns	r1, r1
100016ac:	400a      	ands	r2, r1
100016ae:	619a      	str	r2, [r3, #24]
			 		 }
			 if ( (bitnr <16) && (bitnr > 11))
100016b0:	1dbb      	adds	r3, r7, #6
100016b2:	781b      	ldrb	r3, [r3, #0]
100016b4:	2b0f      	cmp	r3, #15
100016b6:	d824      	bhi.n	10001702 <bit_init+0x16a>
100016b8:	1dbb      	adds	r3, r7, #6
100016ba:	781b      	ldrb	r3, [r3, #0]
100016bc:	2b0b      	cmp	r3, #11
100016be:	d920      	bls.n	10001702 <bit_init+0x16a>
			 		{ if (direction == 1) PORT0->IOCR12 |= 1UL << (((bitnr-12) * 8)+7);
100016c0:	1d7b      	adds	r3, r7, #5
100016c2:	781b      	ldrb	r3, [r3, #0]
100016c4:	2b01      	cmp	r3, #1
100016c6:	d10d      	bne.n	100016e4 <bit_init+0x14c>
100016c8:	4b90      	ldr	r3, [pc, #576]	; (1000190c <bit_init+0x374>)
100016ca:	4a90      	ldr	r2, [pc, #576]	; (1000190c <bit_init+0x374>)
100016cc:	69d1      	ldr	r1, [r2, #28]
100016ce:	1dba      	adds	r2, r7, #6
100016d0:	7812      	ldrb	r2, [r2, #0]
100016d2:	3a0c      	subs	r2, #12
100016d4:	00d2      	lsls	r2, r2, #3
100016d6:	3207      	adds	r2, #7
100016d8:	2001      	movs	r0, #1
100016da:	4090      	lsls	r0, r2
100016dc:	1c02      	adds	r2, r0, #0
100016de:	430a      	orrs	r2, r1
100016e0:	61da      	str	r2, [r3, #28]
100016e2:	e00e      	b.n	10001702 <bit_init+0x16a>
			 		  else PORT0->IOCR12 &= ~(1UL << (((bitnr-12) * 8)+7) );
100016e4:	4b89      	ldr	r3, [pc, #548]	; (1000190c <bit_init+0x374>)
100016e6:	4a89      	ldr	r2, [pc, #548]	; (1000190c <bit_init+0x374>)
100016e8:	69d2      	ldr	r2, [r2, #28]
100016ea:	1db9      	adds	r1, r7, #6
100016ec:	7809      	ldrb	r1, [r1, #0]
100016ee:	390c      	subs	r1, #12
100016f0:	00c9      	lsls	r1, r1, #3
100016f2:	3107      	adds	r1, #7
100016f4:	2001      	movs	r0, #1
100016f6:	4088      	lsls	r0, r1
100016f8:	1c01      	adds	r1, r0, #0
100016fa:	43c9      	mvns	r1, r1
100016fc:	400a      	ands	r2, r1
100016fe:	61da      	str	r2, [r3, #28]
			 		}
			}
			break;
10001700:	e100      	b.n	10001904 <bit_init+0x36c>
10001702:	e0ff      	b.n	10001904 <bit_init+0x36c>
	  case 1 :
			{
				{if (bitnr < 4 )
10001704:	1dbb      	adds	r3, r7, #6
10001706:	781b      	ldrb	r3, [r3, #0]
10001708:	2b03      	cmp	r3, #3
1000170a:	d81d      	bhi.n	10001748 <bit_init+0x1b0>
					{ if (direction == 1) PORT1->IOCR0 |=1UL << ((bitnr * 8)+7);
1000170c:	1d7b      	adds	r3, r7, #5
1000170e:	781b      	ldrb	r3, [r3, #0]
10001710:	2b01      	cmp	r3, #1
10001712:	d10c      	bne.n	1000172e <bit_init+0x196>
10001714:	4b7e      	ldr	r3, [pc, #504]	; (10001910 <bit_init+0x378>)
10001716:	4a7e      	ldr	r2, [pc, #504]	; (10001910 <bit_init+0x378>)
10001718:	6911      	ldr	r1, [r2, #16]
1000171a:	1dba      	adds	r2, r7, #6
1000171c:	7812      	ldrb	r2, [r2, #0]
1000171e:	00d2      	lsls	r2, r2, #3
10001720:	3207      	adds	r2, #7
10001722:	2001      	movs	r0, #1
10001724:	4090      	lsls	r0, r2
10001726:	1c02      	adds	r2, r0, #0
10001728:	430a      	orrs	r2, r1
1000172a:	611a      	str	r2, [r3, #16]
1000172c:	e00c      	b.n	10001748 <bit_init+0x1b0>
						else PORT1->IOCR0 &= ~(1UL << ((bitnr * 8 ) + 7 ));
1000172e:	4b78      	ldr	r3, [pc, #480]	; (10001910 <bit_init+0x378>)
10001730:	4a77      	ldr	r2, [pc, #476]	; (10001910 <bit_init+0x378>)
10001732:	6912      	ldr	r2, [r2, #16]
10001734:	1db9      	adds	r1, r7, #6
10001736:	7809      	ldrb	r1, [r1, #0]
10001738:	00c9      	lsls	r1, r1, #3
1000173a:	3107      	adds	r1, #7
1000173c:	2001      	movs	r0, #1
1000173e:	4088      	lsls	r0, r1
10001740:	1c01      	adds	r1, r0, #0
10001742:	43c9      	mvns	r1, r1
10001744:	400a      	ands	r2, r1
10001746:	611a      	str	r2, [r3, #16]
					}
			if ((bitnr < 8) && (bitnr > 3)) {
10001748:	1dbb      	adds	r3, r7, #6
1000174a:	781b      	ldrb	r3, [r3, #0]
1000174c:	2b07      	cmp	r3, #7
1000174e:	d824      	bhi.n	1000179a <bit_init+0x202>
10001750:	1dbb      	adds	r3, r7, #6
10001752:	781b      	ldrb	r3, [r3, #0]
10001754:	2b03      	cmp	r3, #3
10001756:	d920      	bls.n	1000179a <bit_init+0x202>
				if (direction == 1) PORT1->IOCR4 |= 1UL << (((bitnr - 4) * 8) + 7);
10001758:	1d7b      	adds	r3, r7, #5
1000175a:	781b      	ldrb	r3, [r3, #0]
1000175c:	2b01      	cmp	r3, #1
1000175e:	d10d      	bne.n	1000177c <bit_init+0x1e4>
10001760:	4b6b      	ldr	r3, [pc, #428]	; (10001910 <bit_init+0x378>)
10001762:	4a6b      	ldr	r2, [pc, #428]	; (10001910 <bit_init+0x378>)
10001764:	6951      	ldr	r1, [r2, #20]
10001766:	1dba      	adds	r2, r7, #6
10001768:	7812      	ldrb	r2, [r2, #0]
1000176a:	3a04      	subs	r2, #4
1000176c:	00d2      	lsls	r2, r2, #3
1000176e:	3207      	adds	r2, #7
10001770:	2001      	movs	r0, #1
10001772:	4090      	lsls	r0, r2
10001774:	1c02      	adds	r2, r0, #0
10001776:	430a      	orrs	r2, r1
10001778:	615a      	str	r2, [r3, #20]
1000177a:	e00e      	b.n	1000179a <bit_init+0x202>
				else
					PORT1->IOCR4 &= ~(1UL << (((bitnr - 4) * 8) + 7));
1000177c:	4b64      	ldr	r3, [pc, #400]	; (10001910 <bit_init+0x378>)
1000177e:	4a64      	ldr	r2, [pc, #400]	; (10001910 <bit_init+0x378>)
10001780:	6952      	ldr	r2, [r2, #20]
10001782:	1db9      	adds	r1, r7, #6
10001784:	7809      	ldrb	r1, [r1, #0]
10001786:	3904      	subs	r1, #4
10001788:	00c9      	lsls	r1, r1, #3
1000178a:	3107      	adds	r1, #7
1000178c:	2001      	movs	r0, #1
1000178e:	4088      	lsls	r0, r1
10001790:	1c01      	adds	r1, r0, #0
10001792:	43c9      	mvns	r1, r1
10001794:	400a      	ands	r2, r1
10001796:	615a      	str	r2, [r3, #20]
			}

				}
			}
			break;
10001798:	e0b4      	b.n	10001904 <bit_init+0x36c>
1000179a:	e0b3      	b.n	10001904 <bit_init+0x36c>

	  case 2 : //Achtung!! Nur Pins P2.0, P2.1, P2.10 und P2.11 sind als Out Pin einstellbar
	  	{
	  		if (bitnr < 2 ) {
1000179c:	1dbb      	adds	r3, r7, #6
1000179e:	781b      	ldrb	r3, [r3, #0]
100017a0:	2b01      	cmp	r3, #1
100017a2:	d828      	bhi.n	100017f6 <bit_init+0x25e>
	  			CLR_BIT(PORT2->PDISC,bitnr); // digital Pad aktiv
100017a4:	4b5b      	ldr	r3, [pc, #364]	; (10001914 <bit_init+0x37c>)
100017a6:	4a5b      	ldr	r2, [pc, #364]	; (10001914 <bit_init+0x37c>)
100017a8:	6e12      	ldr	r2, [r2, #96]	; 0x60
100017aa:	1db9      	adds	r1, r7, #6
100017ac:	7809      	ldrb	r1, [r1, #0]
100017ae:	2001      	movs	r0, #1
100017b0:	4088      	lsls	r0, r1
100017b2:	1c01      	adds	r1, r0, #0
100017b4:	43c9      	mvns	r1, r1
100017b6:	400a      	ands	r2, r1
100017b8:	661a      	str	r2, [r3, #96]	; 0x60
	  			if (direction == 1) PORT2->IOCR0 |=1UL << ((bitnr * 8)+7);
100017ba:	1d7b      	adds	r3, r7, #5
100017bc:	781b      	ldrb	r3, [r3, #0]
100017be:	2b01      	cmp	r3, #1
100017c0:	d10c      	bne.n	100017dc <bit_init+0x244>
100017c2:	4b54      	ldr	r3, [pc, #336]	; (10001914 <bit_init+0x37c>)
100017c4:	4a53      	ldr	r2, [pc, #332]	; (10001914 <bit_init+0x37c>)
100017c6:	6911      	ldr	r1, [r2, #16]
100017c8:	1dba      	adds	r2, r7, #6
100017ca:	7812      	ldrb	r2, [r2, #0]
100017cc:	00d2      	lsls	r2, r2, #3
100017ce:	3207      	adds	r2, #7
100017d0:	2001      	movs	r0, #1
100017d2:	4090      	lsls	r0, r2
100017d4:	1c02      	adds	r2, r0, #0
100017d6:	430a      	orrs	r2, r1
100017d8:	611a      	str	r2, [r3, #16]
100017da:	e00c      	b.n	100017f6 <bit_init+0x25e>
					else PORT2->IOCR0 &= ~(1UL << ((bitnr * 8 ) + 7 ));
100017dc:	4b4d      	ldr	r3, [pc, #308]	; (10001914 <bit_init+0x37c>)
100017de:	4a4d      	ldr	r2, [pc, #308]	; (10001914 <bit_init+0x37c>)
100017e0:	6912      	ldr	r2, [r2, #16]
100017e2:	1db9      	adds	r1, r7, #6
100017e4:	7809      	ldrb	r1, [r1, #0]
100017e6:	00c9      	lsls	r1, r1, #3
100017e8:	3107      	adds	r1, #7
100017ea:	2001      	movs	r0, #1
100017ec:	4088      	lsls	r0, r1
100017ee:	1c01      	adds	r1, r0, #0
100017f0:	43c9      	mvns	r1, r1
100017f2:	400a      	ands	r2, r1
100017f4:	611a      	str	r2, [r3, #16]
	  		}
				if ((bitnr > 1)&&(bitnr<4)) {
100017f6:	1dbb      	adds	r3, r7, #6
100017f8:	781b      	ldrb	r3, [r3, #0]
100017fa:	2b01      	cmp	r3, #1
100017fc:	d91b      	bls.n	10001836 <bit_init+0x29e>
100017fe:	1dbb      	adds	r3, r7, #6
10001800:	781b      	ldrb	r3, [r3, #0]
10001802:	2b03      	cmp	r3, #3
10001804:	d817      	bhi.n	10001836 <bit_init+0x29e>
					CLR_BIT(PORT2->PDISC,bitnr); // digital Pad aktiv
10001806:	4b43      	ldr	r3, [pc, #268]	; (10001914 <bit_init+0x37c>)
10001808:	4a42      	ldr	r2, [pc, #264]	; (10001914 <bit_init+0x37c>)
1000180a:	6e12      	ldr	r2, [r2, #96]	; 0x60
1000180c:	1db9      	adds	r1, r7, #6
1000180e:	7809      	ldrb	r1, [r1, #0]
10001810:	2001      	movs	r0, #1
10001812:	4088      	lsls	r0, r1
10001814:	1c01      	adds	r1, r0, #0
10001816:	43c9      	mvns	r1, r1
10001818:	400a      	ands	r2, r1
1000181a:	661a      	str	r2, [r3, #96]	; 0x60
					PORT2->IOCR0 &= ~(1UL << ((bitnr * 8) + 7));
1000181c:	4b3d      	ldr	r3, [pc, #244]	; (10001914 <bit_init+0x37c>)
1000181e:	4a3d      	ldr	r2, [pc, #244]	; (10001914 <bit_init+0x37c>)
10001820:	6912      	ldr	r2, [r2, #16]
10001822:	1db9      	adds	r1, r7, #6
10001824:	7809      	ldrb	r1, [r1, #0]
10001826:	00c9      	lsls	r1, r1, #3
10001828:	3107      	adds	r1, #7
1000182a:	2001      	movs	r0, #1
1000182c:	4088      	lsls	r0, r1
1000182e:	1c01      	adds	r1, r0, #0
10001830:	43c9      	mvns	r1, r1
10001832:	400a      	ands	r2, r1
10001834:	611a      	str	r2, [r3, #16]
				}
	  		if ((bitnr < 8) && (bitnr > 3)) {
10001836:	1dbb      	adds	r3, r7, #6
10001838:	781b      	ldrb	r3, [r3, #0]
1000183a:	2b07      	cmp	r3, #7
1000183c:	d81c      	bhi.n	10001878 <bit_init+0x2e0>
1000183e:	1dbb      	adds	r3, r7, #6
10001840:	781b      	ldrb	r3, [r3, #0]
10001842:	2b03      	cmp	r3, #3
10001844:	d918      	bls.n	10001878 <bit_init+0x2e0>
	  			    CLR_BIT(PORT2->PDISC,bitnr); // digital Pad aktiv
10001846:	4b33      	ldr	r3, [pc, #204]	; (10001914 <bit_init+0x37c>)
10001848:	4a32      	ldr	r2, [pc, #200]	; (10001914 <bit_init+0x37c>)
1000184a:	6e12      	ldr	r2, [r2, #96]	; 0x60
1000184c:	1db9      	adds	r1, r7, #6
1000184e:	7809      	ldrb	r1, [r1, #0]
10001850:	2001      	movs	r0, #1
10001852:	4088      	lsls	r0, r1
10001854:	1c01      	adds	r1, r0, #0
10001856:	43c9      	mvns	r1, r1
10001858:	400a      	ands	r2, r1
1000185a:	661a      	str	r2, [r3, #96]	; 0x60
					PORT2->IOCR4 &= ~(1UL << (((bitnr-4) * 8 ) + 7 ));
1000185c:	4b2d      	ldr	r3, [pc, #180]	; (10001914 <bit_init+0x37c>)
1000185e:	4a2d      	ldr	r2, [pc, #180]	; (10001914 <bit_init+0x37c>)
10001860:	6952      	ldr	r2, [r2, #20]
10001862:	1db9      	adds	r1, r7, #6
10001864:	7809      	ldrb	r1, [r1, #0]
10001866:	3904      	subs	r1, #4
10001868:	00c9      	lsls	r1, r1, #3
1000186a:	3107      	adds	r1, #7
1000186c:	2001      	movs	r0, #1
1000186e:	4088      	lsls	r0, r1
10001870:	1c01      	adds	r1, r0, #0
10001872:	43c9      	mvns	r1, r1
10001874:	400a      	ands	r2, r1
10001876:	615a      	str	r2, [r3, #20]
				}
	  		if ((bitnr < 10) && (bitnr > 7)) {
10001878:	1dbb      	adds	r3, r7, #6
1000187a:	781b      	ldrb	r3, [r3, #0]
1000187c:	2b09      	cmp	r3, #9
1000187e:	d811      	bhi.n	100018a4 <bit_init+0x30c>
10001880:	1dbb      	adds	r3, r7, #6
10001882:	781b      	ldrb	r3, [r3, #0]
10001884:	2b07      	cmp	r3, #7
10001886:	d90d      	bls.n	100018a4 <bit_init+0x30c>
	  			PORT2->IOCR8 &= ~(1UL << (((bitnr-8) * 8 ) + 7 ));
10001888:	4b22      	ldr	r3, [pc, #136]	; (10001914 <bit_init+0x37c>)
1000188a:	4a22      	ldr	r2, [pc, #136]	; (10001914 <bit_init+0x37c>)
1000188c:	6992      	ldr	r2, [r2, #24]
1000188e:	1db9      	adds	r1, r7, #6
10001890:	7809      	ldrb	r1, [r1, #0]
10001892:	3908      	subs	r1, #8
10001894:	00c9      	lsls	r1, r1, #3
10001896:	3107      	adds	r1, #7
10001898:	2001      	movs	r0, #1
1000189a:	4088      	lsls	r0, r1
1000189c:	1c01      	adds	r1, r0, #0
1000189e:	43c9      	mvns	r1, r1
100018a0:	400a      	ands	r2, r1
100018a2:	619a      	str	r2, [r3, #24]
	  		}
	  		if (bitnr > 9 ) {
100018a4:	1dbb      	adds	r3, r7, #6
100018a6:	781b      	ldrb	r3, [r3, #0]
100018a8:	2b09      	cmp	r3, #9
100018aa:	d92a      	bls.n	10001902 <bit_init+0x36a>
	  			CLR_BIT(PORT2->PDISC,bitnr); // digital Pad aktiv
100018ac:	4b19      	ldr	r3, [pc, #100]	; (10001914 <bit_init+0x37c>)
100018ae:	4a19      	ldr	r2, [pc, #100]	; (10001914 <bit_init+0x37c>)
100018b0:	6e12      	ldr	r2, [r2, #96]	; 0x60
100018b2:	1db9      	adds	r1, r7, #6
100018b4:	7809      	ldrb	r1, [r1, #0]
100018b6:	2001      	movs	r0, #1
100018b8:	4088      	lsls	r0, r1
100018ba:	1c01      	adds	r1, r0, #0
100018bc:	43c9      	mvns	r1, r1
100018be:	400a      	ands	r2, r1
100018c0:	661a      	str	r2, [r3, #96]	; 0x60
	  			if (direction == 1) PORT2->IOCR8 |=1UL << (((bitnr-8) * 8)+7);
100018c2:	1d7b      	adds	r3, r7, #5
100018c4:	781b      	ldrb	r3, [r3, #0]
100018c6:	2b01      	cmp	r3, #1
100018c8:	d10d      	bne.n	100018e6 <bit_init+0x34e>
100018ca:	4b12      	ldr	r3, [pc, #72]	; (10001914 <bit_init+0x37c>)
100018cc:	4a11      	ldr	r2, [pc, #68]	; (10001914 <bit_init+0x37c>)
100018ce:	6991      	ldr	r1, [r2, #24]
100018d0:	1dba      	adds	r2, r7, #6
100018d2:	7812      	ldrb	r2, [r2, #0]
100018d4:	3a08      	subs	r2, #8
100018d6:	00d2      	lsls	r2, r2, #3
100018d8:	3207      	adds	r2, #7
100018da:	2001      	movs	r0, #1
100018dc:	4090      	lsls	r0, r2
100018de:	1c02      	adds	r2, r0, #0
100018e0:	430a      	orrs	r2, r1
100018e2:	619a      	str	r2, [r3, #24]
100018e4:	e00d      	b.n	10001902 <bit_init+0x36a>
	  			else PORT2->IOCR8 &= ~(1UL << (((bitnr-8) * 8 ) + 7 ));
100018e6:	4b0b      	ldr	r3, [pc, #44]	; (10001914 <bit_init+0x37c>)
100018e8:	4a0a      	ldr	r2, [pc, #40]	; (10001914 <bit_init+0x37c>)
100018ea:	6992      	ldr	r2, [r2, #24]
100018ec:	1db9      	adds	r1, r7, #6
100018ee:	7809      	ldrb	r1, [r1, #0]
100018f0:	3908      	subs	r1, #8
100018f2:	00c9      	lsls	r1, r1, #3
100018f4:	3107      	adds	r1, #7
100018f6:	2001      	movs	r0, #1
100018f8:	4088      	lsls	r0, r1
100018fa:	1c01      	adds	r1, r0, #0
100018fc:	43c9      	mvns	r1, r1
100018fe:	400a      	ands	r2, r1
10001900:	619a      	str	r2, [r3, #24]
	  		}
  			break;
10001902:	46c0      	nop			; (mov r8, r8)
	  	}
	  }
}
10001904:	46bd      	mov	sp, r7
10001906:	b003      	add	sp, #12
10001908:	bd90      	pop	{r4, r7, pc}
1000190a:	46c0      	nop			; (mov r8, r8)
1000190c:	40040000 	.word	0x40040000
10001910:	40040100 	.word	0x40040100
10001914:	40040200 	.word	0x40040200

10001918 <bit_init_mode>:
* Einzelnes Bit für Ein- oder Ausgabe initialisieren
* port: P0,P1,P2 bitnr: 0..15 direction: INP 0, OUTP 1
* mode: NO_PULL PULLUP PULLDOWN
*/
void bit_init_mode (uint8_t port, uint8_t bitnr, uint8_t direction, uint8_t mode)
{
10001918:	b5b0      	push	{r4, r5, r7, lr}
1000191a:	b082      	sub	sp, #8
1000191c:	af00      	add	r7, sp, #0
1000191e:	1c05      	adds	r5, r0, #0
10001920:	1c0c      	adds	r4, r1, #0
10001922:	1c10      	adds	r0, r2, #0
10001924:	1c19      	adds	r1, r3, #0
10001926:	1dfb      	adds	r3, r7, #7
10001928:	1c2a      	adds	r2, r5, #0
1000192a:	701a      	strb	r2, [r3, #0]
1000192c:	1dbb      	adds	r3, r7, #6
1000192e:	1c22      	adds	r2, r4, #0
10001930:	701a      	strb	r2, [r3, #0]
10001932:	1d7b      	adds	r3, r7, #5
10001934:	1c02      	adds	r2, r0, #0
10001936:	701a      	strb	r2, [r3, #0]
10001938:	1d3b      	adds	r3, r7, #4
1000193a:	1c0a      	adds	r2, r1, #0
1000193c:	701a      	strb	r2, [r3, #0]
	switch (port)
1000193e:	1dfb      	adds	r3, r7, #7
10001940:	781b      	ldrb	r3, [r3, #0]
10001942:	2b01      	cmp	r3, #1
10001944:	d100      	bne.n	10001948 <bit_init_mode+0x30>
10001946:	e1cf      	b.n	10001ce8 <bit_init_mode+0x3d0>
10001948:	2b02      	cmp	r3, #2
1000194a:	d100      	bne.n	1000194e <bit_init_mode+0x36>
1000194c:	e2ab      	b.n	10001ea6 <bit_init_mode+0x58e>
1000194e:	2b00      	cmp	r3, #0
10001950:	d001      	beq.n	10001956 <bit_init_mode+0x3e>
10001952:	f000 fd98 	bl	10002486 <bit_init_mode+0xb6e>
	{
		case 0 :
		{
			if (bitnr < 4 ) {
10001956:	1dbb      	adds	r3, r7, #6
10001958:	781b      	ldrb	r3, [r3, #0]
1000195a:	2b03      	cmp	r3, #3
1000195c:	d865      	bhi.n	10001a2a <bit_init_mode+0x112>
				if (direction == 1) {
1000195e:	1d7b      	adds	r3, r7, #5
10001960:	781b      	ldrb	r3, [r3, #0]
10001962:	2b01      	cmp	r3, #1
10001964:	d119      	bne.n	1000199a <bit_init_mode+0x82>
					PORT0->IOCR0 |=1UL << ((bitnr * 8)+7);
10001966:	4bdf      	ldr	r3, [pc, #892]	; (10001ce4 <bit_init_mode+0x3cc>)
10001968:	4ade      	ldr	r2, [pc, #888]	; (10001ce4 <bit_init_mode+0x3cc>)
1000196a:	6911      	ldr	r1, [r2, #16]
1000196c:	1dba      	adds	r2, r7, #6
1000196e:	7812      	ldrb	r2, [r2, #0]
10001970:	00d2      	lsls	r2, r2, #3
10001972:	3207      	adds	r2, #7
10001974:	2001      	movs	r0, #1
10001976:	4090      	lsls	r0, r2
10001978:	1c02      	adds	r2, r0, #0
1000197a:	430a      	orrs	r2, r1
1000197c:	611a      	str	r2, [r3, #16]
					PORT0->IOCR0 &= ~(0x0000000F << ((bitnr * 8)+3));
1000197e:	4bd9      	ldr	r3, [pc, #868]	; (10001ce4 <bit_init_mode+0x3cc>)
10001980:	4ad8      	ldr	r2, [pc, #864]	; (10001ce4 <bit_init_mode+0x3cc>)
10001982:	6912      	ldr	r2, [r2, #16]
10001984:	1db9      	adds	r1, r7, #6
10001986:	7809      	ldrb	r1, [r1, #0]
10001988:	00c9      	lsls	r1, r1, #3
1000198a:	3103      	adds	r1, #3
1000198c:	200f      	movs	r0, #15
1000198e:	4088      	lsls	r0, r1
10001990:	1c01      	adds	r1, r0, #0
10001992:	43c9      	mvns	r1, r1
10001994:	400a      	ands	r2, r1
10001996:	611a      	str	r2, [r3, #16]
10001998:	e047      	b.n	10001a2a <bit_init_mode+0x112>
				}
				else {
					PORT0->IOCR0 &= ~(1UL << ((bitnr * 8 ) + 7 ));
1000199a:	4bd2      	ldr	r3, [pc, #840]	; (10001ce4 <bit_init_mode+0x3cc>)
1000199c:	4ad1      	ldr	r2, [pc, #836]	; (10001ce4 <bit_init_mode+0x3cc>)
1000199e:	6912      	ldr	r2, [r2, #16]
100019a0:	1db9      	adds	r1, r7, #6
100019a2:	7809      	ldrb	r1, [r1, #0]
100019a4:	00c9      	lsls	r1, r1, #3
100019a6:	3107      	adds	r1, #7
100019a8:	2001      	movs	r0, #1
100019aa:	4088      	lsls	r0, r1
100019ac:	1c01      	adds	r1, r0, #0
100019ae:	43c9      	mvns	r1, r1
100019b0:	400a      	ands	r2, r1
100019b2:	611a      	str	r2, [r3, #16]
					if (mode == PULLUP) {
100019b4:	1d3b      	adds	r3, r7, #4
100019b6:	781b      	ldrb	r3, [r3, #0]
100019b8:	2b01      	cmp	r3, #1
100019ba:	d119      	bne.n	100019f0 <bit_init_mode+0xd8>
						PORT0->IOCR0 &= ~(0x0000001F << ((bitnr * 8)+3) );
100019bc:	4bc9      	ldr	r3, [pc, #804]	; (10001ce4 <bit_init_mode+0x3cc>)
100019be:	4ac9      	ldr	r2, [pc, #804]	; (10001ce4 <bit_init_mode+0x3cc>)
100019c0:	6912      	ldr	r2, [r2, #16]
100019c2:	1db9      	adds	r1, r7, #6
100019c4:	7809      	ldrb	r1, [r1, #0]
100019c6:	00c9      	lsls	r1, r1, #3
100019c8:	3103      	adds	r1, #3
100019ca:	201f      	movs	r0, #31
100019cc:	4088      	lsls	r0, r1
100019ce:	1c01      	adds	r1, r0, #0
100019d0:	43c9      	mvns	r1, r1
100019d2:	400a      	ands	r2, r1
100019d4:	611a      	str	r2, [r3, #16]
						PORT0->IOCR0 |= (1UL << ((bitnr * 8)+4) );
100019d6:	4bc3      	ldr	r3, [pc, #780]	; (10001ce4 <bit_init_mode+0x3cc>)
100019d8:	4ac2      	ldr	r2, [pc, #776]	; (10001ce4 <bit_init_mode+0x3cc>)
100019da:	6911      	ldr	r1, [r2, #16]
100019dc:	1dba      	adds	r2, r7, #6
100019de:	7812      	ldrb	r2, [r2, #0]
100019e0:	00d2      	lsls	r2, r2, #3
100019e2:	3204      	adds	r2, #4
100019e4:	2001      	movs	r0, #1
100019e6:	4090      	lsls	r0, r2
100019e8:	1c02      	adds	r2, r0, #0
100019ea:	430a      	orrs	r2, r1
100019ec:	611a      	str	r2, [r3, #16]
100019ee:	e01c      	b.n	10001a2a <bit_init_mode+0x112>
					} else if (mode == PULLDOWN) {
100019f0:	1d3b      	adds	r3, r7, #4
100019f2:	781b      	ldrb	r3, [r3, #0]
100019f4:	2b02      	cmp	r3, #2
100019f6:	d118      	bne.n	10001a2a <bit_init_mode+0x112>
						PORT0->IOCR0 &= ~(0x0000001F << ((bitnr * 8)+3) );
100019f8:	4bba      	ldr	r3, [pc, #744]	; (10001ce4 <bit_init_mode+0x3cc>)
100019fa:	4aba      	ldr	r2, [pc, #744]	; (10001ce4 <bit_init_mode+0x3cc>)
100019fc:	6912      	ldr	r2, [r2, #16]
100019fe:	1db9      	adds	r1, r7, #6
10001a00:	7809      	ldrb	r1, [r1, #0]
10001a02:	00c9      	lsls	r1, r1, #3
10001a04:	3103      	adds	r1, #3
10001a06:	201f      	movs	r0, #31
10001a08:	4088      	lsls	r0, r1
10001a0a:	1c01      	adds	r1, r0, #0
10001a0c:	43c9      	mvns	r1, r1
10001a0e:	400a      	ands	r2, r1
10001a10:	611a      	str	r2, [r3, #16]
						PORT0->IOCR0 |= (1UL << ((bitnr * 8)+3) );
10001a12:	4bb4      	ldr	r3, [pc, #720]	; (10001ce4 <bit_init_mode+0x3cc>)
10001a14:	4ab3      	ldr	r2, [pc, #716]	; (10001ce4 <bit_init_mode+0x3cc>)
10001a16:	6911      	ldr	r1, [r2, #16]
10001a18:	1dba      	adds	r2, r7, #6
10001a1a:	7812      	ldrb	r2, [r2, #0]
10001a1c:	00d2      	lsls	r2, r2, #3
10001a1e:	3203      	adds	r2, #3
10001a20:	2001      	movs	r0, #1
10001a22:	4090      	lsls	r0, r2
10001a24:	1c02      	adds	r2, r0, #0
10001a26:	430a      	orrs	r2, r1
10001a28:	611a      	str	r2, [r3, #16]
					}
				}
			}
			if ( (bitnr <8) && (bitnr > 3)) {
10001a2a:	1dbb      	adds	r3, r7, #6
10001a2c:	781b      	ldrb	r3, [r3, #0]
10001a2e:	2b07      	cmp	r3, #7
10001a30:	d86e      	bhi.n	10001b10 <bit_init_mode+0x1f8>
10001a32:	1dbb      	adds	r3, r7, #6
10001a34:	781b      	ldrb	r3, [r3, #0]
10001a36:	2b03      	cmp	r3, #3
10001a38:	d96a      	bls.n	10001b10 <bit_init_mode+0x1f8>
				if (direction == 1) {
10001a3a:	1d7b      	adds	r3, r7, #5
10001a3c:	781b      	ldrb	r3, [r3, #0]
10001a3e:	2b01      	cmp	r3, #1
10001a40:	d11b      	bne.n	10001a7a <bit_init_mode+0x162>
					PORT0->IOCR4 |= 1UL<< (((bitnr-4) * 8)+7);
10001a42:	4ba8      	ldr	r3, [pc, #672]	; (10001ce4 <bit_init_mode+0x3cc>)
10001a44:	4aa7      	ldr	r2, [pc, #668]	; (10001ce4 <bit_init_mode+0x3cc>)
10001a46:	6951      	ldr	r1, [r2, #20]
10001a48:	1dba      	adds	r2, r7, #6
10001a4a:	7812      	ldrb	r2, [r2, #0]
10001a4c:	3a04      	subs	r2, #4
10001a4e:	00d2      	lsls	r2, r2, #3
10001a50:	3207      	adds	r2, #7
10001a52:	2001      	movs	r0, #1
10001a54:	4090      	lsls	r0, r2
10001a56:	1c02      	adds	r2, r0, #0
10001a58:	430a      	orrs	r2, r1
10001a5a:	615a      	str	r2, [r3, #20]
					PORT0->IOCR4 &= ~(0x0000000F << (((bitnr-4) * 8)+3));
10001a5c:	4ba1      	ldr	r3, [pc, #644]	; (10001ce4 <bit_init_mode+0x3cc>)
10001a5e:	4aa1      	ldr	r2, [pc, #644]	; (10001ce4 <bit_init_mode+0x3cc>)
10001a60:	6952      	ldr	r2, [r2, #20]
10001a62:	1db9      	adds	r1, r7, #6
10001a64:	7809      	ldrb	r1, [r1, #0]
10001a66:	3904      	subs	r1, #4
10001a68:	00c9      	lsls	r1, r1, #3
10001a6a:	3103      	adds	r1, #3
10001a6c:	200f      	movs	r0, #15
10001a6e:	4088      	lsls	r0, r1
10001a70:	1c01      	adds	r1, r0, #0
10001a72:	43c9      	mvns	r1, r1
10001a74:	400a      	ands	r2, r1
10001a76:	615a      	str	r2, [r3, #20]
10001a78:	e04a      	b.n	10001b10 <bit_init_mode+0x1f8>
				}
				else {
					PORT0->IOCR4 &= ~(1UL << (((bitnr-4) * 8)+7) );
10001a7a:	4b9a      	ldr	r3, [pc, #616]	; (10001ce4 <bit_init_mode+0x3cc>)
10001a7c:	4a99      	ldr	r2, [pc, #612]	; (10001ce4 <bit_init_mode+0x3cc>)
10001a7e:	6952      	ldr	r2, [r2, #20]
10001a80:	1db9      	adds	r1, r7, #6
10001a82:	7809      	ldrb	r1, [r1, #0]
10001a84:	3904      	subs	r1, #4
10001a86:	00c9      	lsls	r1, r1, #3
10001a88:	3107      	adds	r1, #7
10001a8a:	2001      	movs	r0, #1
10001a8c:	4088      	lsls	r0, r1
10001a8e:	1c01      	adds	r1, r0, #0
10001a90:	43c9      	mvns	r1, r1
10001a92:	400a      	ands	r2, r1
10001a94:	615a      	str	r2, [r3, #20]
					if (mode == PULLUP) {
10001a96:	1d3b      	adds	r3, r7, #4
10001a98:	781b      	ldrb	r3, [r3, #0]
10001a9a:	2b01      	cmp	r3, #1
10001a9c:	d11b      	bne.n	10001ad6 <bit_init_mode+0x1be>
						PORT0->IOCR4 &= ~(0x0000001F << (((bitnr-4) * 8)+3) );
10001a9e:	4b91      	ldr	r3, [pc, #580]	; (10001ce4 <bit_init_mode+0x3cc>)
10001aa0:	4a90      	ldr	r2, [pc, #576]	; (10001ce4 <bit_init_mode+0x3cc>)
10001aa2:	6952      	ldr	r2, [r2, #20]
10001aa4:	1db9      	adds	r1, r7, #6
10001aa6:	7809      	ldrb	r1, [r1, #0]
10001aa8:	3904      	subs	r1, #4
10001aaa:	00c9      	lsls	r1, r1, #3
10001aac:	3103      	adds	r1, #3
10001aae:	201f      	movs	r0, #31
10001ab0:	4088      	lsls	r0, r1
10001ab2:	1c01      	adds	r1, r0, #0
10001ab4:	43c9      	mvns	r1, r1
10001ab6:	400a      	ands	r2, r1
10001ab8:	615a      	str	r2, [r3, #20]
						PORT0->IOCR4 |= (1UL << (((bitnr-4) * 8)+4) );
10001aba:	4b8a      	ldr	r3, [pc, #552]	; (10001ce4 <bit_init_mode+0x3cc>)
10001abc:	4a89      	ldr	r2, [pc, #548]	; (10001ce4 <bit_init_mode+0x3cc>)
10001abe:	6951      	ldr	r1, [r2, #20]
10001ac0:	1dba      	adds	r2, r7, #6
10001ac2:	7812      	ldrb	r2, [r2, #0]
10001ac4:	3a04      	subs	r2, #4
10001ac6:	00d2      	lsls	r2, r2, #3
10001ac8:	3204      	adds	r2, #4
10001aca:	2001      	movs	r0, #1
10001acc:	4090      	lsls	r0, r2
10001ace:	1c02      	adds	r2, r0, #0
10001ad0:	430a      	orrs	r2, r1
10001ad2:	615a      	str	r2, [r3, #20]
10001ad4:	e01c      	b.n	10001b10 <bit_init_mode+0x1f8>
					}else if (mode == PULLDOWN) {
10001ad6:	1d3b      	adds	r3, r7, #4
10001ad8:	781b      	ldrb	r3, [r3, #0]
10001ada:	2b02      	cmp	r3, #2
10001adc:	d118      	bne.n	10001b10 <bit_init_mode+0x1f8>
						PORT0->IOCR4 &= ~(0x0000001F << ((bitnr * 8)+3) );
10001ade:	4b81      	ldr	r3, [pc, #516]	; (10001ce4 <bit_init_mode+0x3cc>)
10001ae0:	4a80      	ldr	r2, [pc, #512]	; (10001ce4 <bit_init_mode+0x3cc>)
10001ae2:	6952      	ldr	r2, [r2, #20]
10001ae4:	1db9      	adds	r1, r7, #6
10001ae6:	7809      	ldrb	r1, [r1, #0]
10001ae8:	00c9      	lsls	r1, r1, #3
10001aea:	3103      	adds	r1, #3
10001aec:	201f      	movs	r0, #31
10001aee:	4088      	lsls	r0, r1
10001af0:	1c01      	adds	r1, r0, #0
10001af2:	43c9      	mvns	r1, r1
10001af4:	400a      	ands	r2, r1
10001af6:	615a      	str	r2, [r3, #20]
						PORT0->IOCR4 |= (1UL << ((bitnr * 8)+3) );
10001af8:	4b7a      	ldr	r3, [pc, #488]	; (10001ce4 <bit_init_mode+0x3cc>)
10001afa:	4a7a      	ldr	r2, [pc, #488]	; (10001ce4 <bit_init_mode+0x3cc>)
10001afc:	6951      	ldr	r1, [r2, #20]
10001afe:	1dba      	adds	r2, r7, #6
10001b00:	7812      	ldrb	r2, [r2, #0]
10001b02:	00d2      	lsls	r2, r2, #3
10001b04:	3203      	adds	r2, #3
10001b06:	2001      	movs	r0, #1
10001b08:	4090      	lsls	r0, r2
10001b0a:	1c02      	adds	r2, r0, #0
10001b0c:	430a      	orrs	r2, r1
10001b0e:	615a      	str	r2, [r3, #20]
					}
				}
			}
			if ( (bitnr <12) && (bitnr > 7)) {
10001b10:	1dbb      	adds	r3, r7, #6
10001b12:	781b      	ldrb	r3, [r3, #0]
10001b14:	2b0b      	cmp	r3, #11
10001b16:	d86e      	bhi.n	10001bf6 <bit_init_mode+0x2de>
10001b18:	1dbb      	adds	r3, r7, #6
10001b1a:	781b      	ldrb	r3, [r3, #0]
10001b1c:	2b07      	cmp	r3, #7
10001b1e:	d96a      	bls.n	10001bf6 <bit_init_mode+0x2de>
				if (direction == 1) {
10001b20:	1d7b      	adds	r3, r7, #5
10001b22:	781b      	ldrb	r3, [r3, #0]
10001b24:	2b01      	cmp	r3, #1
10001b26:	d11b      	bne.n	10001b60 <bit_init_mode+0x248>
					PORT0->IOCR8 |= 1UL << (((bitnr-8) * 8)+7);
10001b28:	4b6e      	ldr	r3, [pc, #440]	; (10001ce4 <bit_init_mode+0x3cc>)
10001b2a:	4a6e      	ldr	r2, [pc, #440]	; (10001ce4 <bit_init_mode+0x3cc>)
10001b2c:	6991      	ldr	r1, [r2, #24]
10001b2e:	1dba      	adds	r2, r7, #6
10001b30:	7812      	ldrb	r2, [r2, #0]
10001b32:	3a08      	subs	r2, #8
10001b34:	00d2      	lsls	r2, r2, #3
10001b36:	3207      	adds	r2, #7
10001b38:	2001      	movs	r0, #1
10001b3a:	4090      	lsls	r0, r2
10001b3c:	1c02      	adds	r2, r0, #0
10001b3e:	430a      	orrs	r2, r1
10001b40:	619a      	str	r2, [r3, #24]
					PORT0->IOCR8 &= ~(0x0000000F << (((bitnr-8) * 8)+3));
10001b42:	4b68      	ldr	r3, [pc, #416]	; (10001ce4 <bit_init_mode+0x3cc>)
10001b44:	4a67      	ldr	r2, [pc, #412]	; (10001ce4 <bit_init_mode+0x3cc>)
10001b46:	6992      	ldr	r2, [r2, #24]
10001b48:	1db9      	adds	r1, r7, #6
10001b4a:	7809      	ldrb	r1, [r1, #0]
10001b4c:	3908      	subs	r1, #8
10001b4e:	00c9      	lsls	r1, r1, #3
10001b50:	3103      	adds	r1, #3
10001b52:	200f      	movs	r0, #15
10001b54:	4088      	lsls	r0, r1
10001b56:	1c01      	adds	r1, r0, #0
10001b58:	43c9      	mvns	r1, r1
10001b5a:	400a      	ands	r2, r1
10001b5c:	619a      	str	r2, [r3, #24]
10001b5e:	e04a      	b.n	10001bf6 <bit_init_mode+0x2de>
				}
				else {
					PORT0->IOCR8 &= ~(1UL << (((bitnr-8) * 8)+7) );
10001b60:	4b60      	ldr	r3, [pc, #384]	; (10001ce4 <bit_init_mode+0x3cc>)
10001b62:	4a60      	ldr	r2, [pc, #384]	; (10001ce4 <bit_init_mode+0x3cc>)
10001b64:	6992      	ldr	r2, [r2, #24]
10001b66:	1db9      	adds	r1, r7, #6
10001b68:	7809      	ldrb	r1, [r1, #0]
10001b6a:	3908      	subs	r1, #8
10001b6c:	00c9      	lsls	r1, r1, #3
10001b6e:	3107      	adds	r1, #7
10001b70:	2001      	movs	r0, #1
10001b72:	4088      	lsls	r0, r1
10001b74:	1c01      	adds	r1, r0, #0
10001b76:	43c9      	mvns	r1, r1
10001b78:	400a      	ands	r2, r1
10001b7a:	619a      	str	r2, [r3, #24]
					if (mode == PULLUP) {
10001b7c:	1d3b      	adds	r3, r7, #4
10001b7e:	781b      	ldrb	r3, [r3, #0]
10001b80:	2b01      	cmp	r3, #1
10001b82:	d11b      	bne.n	10001bbc <bit_init_mode+0x2a4>
						PORT0->IOCR8 &= ~(0x0000001F << (((bitnr-8) * 8)+3) );
10001b84:	4b57      	ldr	r3, [pc, #348]	; (10001ce4 <bit_init_mode+0x3cc>)
10001b86:	4a57      	ldr	r2, [pc, #348]	; (10001ce4 <bit_init_mode+0x3cc>)
10001b88:	6992      	ldr	r2, [r2, #24]
10001b8a:	1db9      	adds	r1, r7, #6
10001b8c:	7809      	ldrb	r1, [r1, #0]
10001b8e:	3908      	subs	r1, #8
10001b90:	00c9      	lsls	r1, r1, #3
10001b92:	3103      	adds	r1, #3
10001b94:	201f      	movs	r0, #31
10001b96:	4088      	lsls	r0, r1
10001b98:	1c01      	adds	r1, r0, #0
10001b9a:	43c9      	mvns	r1, r1
10001b9c:	400a      	ands	r2, r1
10001b9e:	619a      	str	r2, [r3, #24]
						PORT0->IOCR8 |= (1UL << (((bitnr-8) * 8)+4) );
10001ba0:	4b50      	ldr	r3, [pc, #320]	; (10001ce4 <bit_init_mode+0x3cc>)
10001ba2:	4a50      	ldr	r2, [pc, #320]	; (10001ce4 <bit_init_mode+0x3cc>)
10001ba4:	6991      	ldr	r1, [r2, #24]
10001ba6:	1dba      	adds	r2, r7, #6
10001ba8:	7812      	ldrb	r2, [r2, #0]
10001baa:	3a08      	subs	r2, #8
10001bac:	00d2      	lsls	r2, r2, #3
10001bae:	3204      	adds	r2, #4
10001bb0:	2001      	movs	r0, #1
10001bb2:	4090      	lsls	r0, r2
10001bb4:	1c02      	adds	r2, r0, #0
10001bb6:	430a      	orrs	r2, r1
10001bb8:	619a      	str	r2, [r3, #24]
10001bba:	e01c      	b.n	10001bf6 <bit_init_mode+0x2de>
					} else if (mode == PULLDOWN) {
10001bbc:	1d3b      	adds	r3, r7, #4
10001bbe:	781b      	ldrb	r3, [r3, #0]
10001bc0:	2b02      	cmp	r3, #2
10001bc2:	d118      	bne.n	10001bf6 <bit_init_mode+0x2de>
						PORT0->IOCR8 &= ~(0x0000001F << ((bitnr * 8)+3) );
10001bc4:	4b47      	ldr	r3, [pc, #284]	; (10001ce4 <bit_init_mode+0x3cc>)
10001bc6:	4a47      	ldr	r2, [pc, #284]	; (10001ce4 <bit_init_mode+0x3cc>)
10001bc8:	6992      	ldr	r2, [r2, #24]
10001bca:	1db9      	adds	r1, r7, #6
10001bcc:	7809      	ldrb	r1, [r1, #0]
10001bce:	00c9      	lsls	r1, r1, #3
10001bd0:	3103      	adds	r1, #3
10001bd2:	201f      	movs	r0, #31
10001bd4:	4088      	lsls	r0, r1
10001bd6:	1c01      	adds	r1, r0, #0
10001bd8:	43c9      	mvns	r1, r1
10001bda:	400a      	ands	r2, r1
10001bdc:	619a      	str	r2, [r3, #24]
						PORT0->IOCR8 |= (1UL << ((bitnr * 8)+3) );
10001bde:	4b41      	ldr	r3, [pc, #260]	; (10001ce4 <bit_init_mode+0x3cc>)
10001be0:	4a40      	ldr	r2, [pc, #256]	; (10001ce4 <bit_init_mode+0x3cc>)
10001be2:	6991      	ldr	r1, [r2, #24]
10001be4:	1dba      	adds	r2, r7, #6
10001be6:	7812      	ldrb	r2, [r2, #0]
10001be8:	00d2      	lsls	r2, r2, #3
10001bea:	3203      	adds	r2, #3
10001bec:	2001      	movs	r0, #1
10001bee:	4090      	lsls	r0, r2
10001bf0:	1c02      	adds	r2, r0, #0
10001bf2:	430a      	orrs	r2, r1
10001bf4:	619a      	str	r2, [r3, #24]
					}
				}
			}
			if ( (bitnr <16) && (bitnr > 11)) {
10001bf6:	1dbb      	adds	r3, r7, #6
10001bf8:	781b      	ldrb	r3, [r3, #0]
10001bfa:	2b0f      	cmp	r3, #15
10001bfc:	d870      	bhi.n	10001ce0 <bit_init_mode+0x3c8>
10001bfe:	1dbb      	adds	r3, r7, #6
10001c00:	781b      	ldrb	r3, [r3, #0]
10001c02:	2b0b      	cmp	r3, #11
10001c04:	d96c      	bls.n	10001ce0 <bit_init_mode+0x3c8>
				if (direction == OUTP){
10001c06:	1d7b      	adds	r3, r7, #5
10001c08:	781b      	ldrb	r3, [r3, #0]
10001c0a:	2b01      	cmp	r3, #1
10001c0c:	d11b      	bne.n	10001c46 <bit_init_mode+0x32e>
					PORT0->IOCR12 |= 1UL << (((bitnr-12) * 8)+7);
10001c0e:	4b35      	ldr	r3, [pc, #212]	; (10001ce4 <bit_init_mode+0x3cc>)
10001c10:	4a34      	ldr	r2, [pc, #208]	; (10001ce4 <bit_init_mode+0x3cc>)
10001c12:	69d1      	ldr	r1, [r2, #28]
10001c14:	1dba      	adds	r2, r7, #6
10001c16:	7812      	ldrb	r2, [r2, #0]
10001c18:	3a0c      	subs	r2, #12
10001c1a:	00d2      	lsls	r2, r2, #3
10001c1c:	3207      	adds	r2, #7
10001c1e:	2001      	movs	r0, #1
10001c20:	4090      	lsls	r0, r2
10001c22:	1c02      	adds	r2, r0, #0
10001c24:	430a      	orrs	r2, r1
10001c26:	61da      	str	r2, [r3, #28]
					PORT0->IOCR12 &= ~(0x0000000F << (((bitnr-12) * 8)+3));
10001c28:	4b2e      	ldr	r3, [pc, #184]	; (10001ce4 <bit_init_mode+0x3cc>)
10001c2a:	4a2e      	ldr	r2, [pc, #184]	; (10001ce4 <bit_init_mode+0x3cc>)
10001c2c:	69d2      	ldr	r2, [r2, #28]
10001c2e:	1db9      	adds	r1, r7, #6
10001c30:	7809      	ldrb	r1, [r1, #0]
10001c32:	390c      	subs	r1, #12
10001c34:	00c9      	lsls	r1, r1, #3
10001c36:	3103      	adds	r1, #3
10001c38:	200f      	movs	r0, #15
10001c3a:	4088      	lsls	r0, r1
10001c3c:	1c01      	adds	r1, r0, #0
10001c3e:	43c9      	mvns	r1, r1
10001c40:	400a      	ands	r2, r1
10001c42:	61da      	str	r2, [r3, #28]
10001c44:	e04c      	b.n	10001ce0 <bit_init_mode+0x3c8>
				}
				else {
					PORT0->IOCR12 &= ~(1UL << (((bitnr-12) * 8)+7) );
10001c46:	4b27      	ldr	r3, [pc, #156]	; (10001ce4 <bit_init_mode+0x3cc>)
10001c48:	4a26      	ldr	r2, [pc, #152]	; (10001ce4 <bit_init_mode+0x3cc>)
10001c4a:	69d2      	ldr	r2, [r2, #28]
10001c4c:	1db9      	adds	r1, r7, #6
10001c4e:	7809      	ldrb	r1, [r1, #0]
10001c50:	390c      	subs	r1, #12
10001c52:	00c9      	lsls	r1, r1, #3
10001c54:	3107      	adds	r1, #7
10001c56:	2001      	movs	r0, #1
10001c58:	4088      	lsls	r0, r1
10001c5a:	1c01      	adds	r1, r0, #0
10001c5c:	43c9      	mvns	r1, r1
10001c5e:	400a      	ands	r2, r1
10001c60:	61da      	str	r2, [r3, #28]
					if (mode == PULLUP) {
10001c62:	1d3b      	adds	r3, r7, #4
10001c64:	781b      	ldrb	r3, [r3, #0]
10001c66:	2b01      	cmp	r3, #1
10001c68:	d11b      	bne.n	10001ca2 <bit_init_mode+0x38a>
						PORT0->IOCR12 &= ~(0x0000001F << (((bitnr-12) * 8)+3) );
10001c6a:	4b1e      	ldr	r3, [pc, #120]	; (10001ce4 <bit_init_mode+0x3cc>)
10001c6c:	4a1d      	ldr	r2, [pc, #116]	; (10001ce4 <bit_init_mode+0x3cc>)
10001c6e:	69d2      	ldr	r2, [r2, #28]
10001c70:	1db9      	adds	r1, r7, #6
10001c72:	7809      	ldrb	r1, [r1, #0]
10001c74:	390c      	subs	r1, #12
10001c76:	00c9      	lsls	r1, r1, #3
10001c78:	3103      	adds	r1, #3
10001c7a:	201f      	movs	r0, #31
10001c7c:	4088      	lsls	r0, r1
10001c7e:	1c01      	adds	r1, r0, #0
10001c80:	43c9      	mvns	r1, r1
10001c82:	400a      	ands	r2, r1
10001c84:	61da      	str	r2, [r3, #28]
						PORT0->IOCR12 |= (1UL << (((bitnr-12) * 8)+4) );
10001c86:	4b17      	ldr	r3, [pc, #92]	; (10001ce4 <bit_init_mode+0x3cc>)
10001c88:	4a16      	ldr	r2, [pc, #88]	; (10001ce4 <bit_init_mode+0x3cc>)
10001c8a:	69d1      	ldr	r1, [r2, #28]
10001c8c:	1dba      	adds	r2, r7, #6
10001c8e:	7812      	ldrb	r2, [r2, #0]
10001c90:	3a0c      	subs	r2, #12
10001c92:	00d2      	lsls	r2, r2, #3
10001c94:	3204      	adds	r2, #4
10001c96:	2001      	movs	r0, #1
10001c98:	4090      	lsls	r0, r2
10001c9a:	1c02      	adds	r2, r0, #0
10001c9c:	430a      	orrs	r2, r1
10001c9e:	61da      	str	r2, [r3, #28]
10001ca0:	e01e      	b.n	10001ce0 <bit_init_mode+0x3c8>
					}else if (mode == PULLDOWN) {
10001ca2:	1d3b      	adds	r3, r7, #4
10001ca4:	781b      	ldrb	r3, [r3, #0]
10001ca6:	2b02      	cmp	r3, #2
10001ca8:	d11a      	bne.n	10001ce0 <bit_init_mode+0x3c8>
						PORT0->IOCR12 &= ~(0x0000001F << ((bitnr * 8)+3) );
10001caa:	4b0e      	ldr	r3, [pc, #56]	; (10001ce4 <bit_init_mode+0x3cc>)
10001cac:	4a0d      	ldr	r2, [pc, #52]	; (10001ce4 <bit_init_mode+0x3cc>)
10001cae:	69d2      	ldr	r2, [r2, #28]
10001cb0:	1db9      	adds	r1, r7, #6
10001cb2:	7809      	ldrb	r1, [r1, #0]
10001cb4:	00c9      	lsls	r1, r1, #3
10001cb6:	3103      	adds	r1, #3
10001cb8:	201f      	movs	r0, #31
10001cba:	4088      	lsls	r0, r1
10001cbc:	1c01      	adds	r1, r0, #0
10001cbe:	43c9      	mvns	r1, r1
10001cc0:	400a      	ands	r2, r1
10001cc2:	61da      	str	r2, [r3, #28]
						PORT0->IOCR12 |= (1UL << ((bitnr * 8)+3) );
10001cc4:	4b07      	ldr	r3, [pc, #28]	; (10001ce4 <bit_init_mode+0x3cc>)
10001cc6:	4a07      	ldr	r2, [pc, #28]	; (10001ce4 <bit_init_mode+0x3cc>)
10001cc8:	69d1      	ldr	r1, [r2, #28]
10001cca:	1dba      	adds	r2, r7, #6
10001ccc:	7812      	ldrb	r2, [r2, #0]
10001cce:	00d2      	lsls	r2, r2, #3
10001cd0:	3203      	adds	r2, #3
10001cd2:	2001      	movs	r0, #1
10001cd4:	4090      	lsls	r0, r2
10001cd6:	1c02      	adds	r2, r0, #0
10001cd8:	430a      	orrs	r2, r1
10001cda:	61da      	str	r2, [r3, #28]
					}
				}
			}
		}
		break;
10001cdc:	f000 fbd3 	bl	10002486 <bit_init_mode+0xb6e>
10001ce0:	f000 fbd1 	bl	10002486 <bit_init_mode+0xb6e>
10001ce4:	40040000 	.word	0x40040000
		case 1 :
		{
			if (bitnr < 4 ) {
10001ce8:	1dbb      	adds	r3, r7, #6
10001cea:	781b      	ldrb	r3, [r3, #0]
10001cec:	2b03      	cmp	r3, #3
10001cee:	d865      	bhi.n	10001dbc <bit_init_mode+0x4a4>
				if (direction == 1) {
10001cf0:	1d7b      	adds	r3, r7, #5
10001cf2:	781b      	ldrb	r3, [r3, #0]
10001cf4:	2b01      	cmp	r3, #1
10001cf6:	d119      	bne.n	10001d2c <bit_init_mode+0x414>
					PORT1->IOCR0 |=1UL << ((bitnr * 8)+7);
10001cf8:	4bd8      	ldr	r3, [pc, #864]	; (1000205c <bit_init_mode+0x744>)
10001cfa:	4ad8      	ldr	r2, [pc, #864]	; (1000205c <bit_init_mode+0x744>)
10001cfc:	6911      	ldr	r1, [r2, #16]
10001cfe:	1dba      	adds	r2, r7, #6
10001d00:	7812      	ldrb	r2, [r2, #0]
10001d02:	00d2      	lsls	r2, r2, #3
10001d04:	3207      	adds	r2, #7
10001d06:	2001      	movs	r0, #1
10001d08:	4090      	lsls	r0, r2
10001d0a:	1c02      	adds	r2, r0, #0
10001d0c:	430a      	orrs	r2, r1
10001d0e:	611a      	str	r2, [r3, #16]
					PORT1->IOCR0 &= ~(0x0000000F << ((bitnr * 8)+3));
10001d10:	4bd2      	ldr	r3, [pc, #840]	; (1000205c <bit_init_mode+0x744>)
10001d12:	4ad2      	ldr	r2, [pc, #840]	; (1000205c <bit_init_mode+0x744>)
10001d14:	6912      	ldr	r2, [r2, #16]
10001d16:	1db9      	adds	r1, r7, #6
10001d18:	7809      	ldrb	r1, [r1, #0]
10001d1a:	00c9      	lsls	r1, r1, #3
10001d1c:	3103      	adds	r1, #3
10001d1e:	200f      	movs	r0, #15
10001d20:	4088      	lsls	r0, r1
10001d22:	1c01      	adds	r1, r0, #0
10001d24:	43c9      	mvns	r1, r1
10001d26:	400a      	ands	r2, r1
10001d28:	611a      	str	r2, [r3, #16]
10001d2a:	e047      	b.n	10001dbc <bit_init_mode+0x4a4>
				}
				else {
					PORT1->IOCR0 &= ~(1UL << ((bitnr * 8 ) + 7 ));
10001d2c:	4bcb      	ldr	r3, [pc, #812]	; (1000205c <bit_init_mode+0x744>)
10001d2e:	4acb      	ldr	r2, [pc, #812]	; (1000205c <bit_init_mode+0x744>)
10001d30:	6912      	ldr	r2, [r2, #16]
10001d32:	1db9      	adds	r1, r7, #6
10001d34:	7809      	ldrb	r1, [r1, #0]
10001d36:	00c9      	lsls	r1, r1, #3
10001d38:	3107      	adds	r1, #7
10001d3a:	2001      	movs	r0, #1
10001d3c:	4088      	lsls	r0, r1
10001d3e:	1c01      	adds	r1, r0, #0
10001d40:	43c9      	mvns	r1, r1
10001d42:	400a      	ands	r2, r1
10001d44:	611a      	str	r2, [r3, #16]
					if (mode == PULLUP) {
10001d46:	1d3b      	adds	r3, r7, #4
10001d48:	781b      	ldrb	r3, [r3, #0]
10001d4a:	2b01      	cmp	r3, #1
10001d4c:	d119      	bne.n	10001d82 <bit_init_mode+0x46a>
						PORT1->IOCR0 &= ~(0x0000001F << ((bitnr * 8)+3) );
10001d4e:	4bc3      	ldr	r3, [pc, #780]	; (1000205c <bit_init_mode+0x744>)
10001d50:	4ac2      	ldr	r2, [pc, #776]	; (1000205c <bit_init_mode+0x744>)
10001d52:	6912      	ldr	r2, [r2, #16]
10001d54:	1db9      	adds	r1, r7, #6
10001d56:	7809      	ldrb	r1, [r1, #0]
10001d58:	00c9      	lsls	r1, r1, #3
10001d5a:	3103      	adds	r1, #3
10001d5c:	201f      	movs	r0, #31
10001d5e:	4088      	lsls	r0, r1
10001d60:	1c01      	adds	r1, r0, #0
10001d62:	43c9      	mvns	r1, r1
10001d64:	400a      	ands	r2, r1
10001d66:	611a      	str	r2, [r3, #16]
						PORT1->IOCR0 |= (1UL << ((bitnr * 8)+4) );
10001d68:	4bbc      	ldr	r3, [pc, #752]	; (1000205c <bit_init_mode+0x744>)
10001d6a:	4abc      	ldr	r2, [pc, #752]	; (1000205c <bit_init_mode+0x744>)
10001d6c:	6911      	ldr	r1, [r2, #16]
10001d6e:	1dba      	adds	r2, r7, #6
10001d70:	7812      	ldrb	r2, [r2, #0]
10001d72:	00d2      	lsls	r2, r2, #3
10001d74:	3204      	adds	r2, #4
10001d76:	2001      	movs	r0, #1
10001d78:	4090      	lsls	r0, r2
10001d7a:	1c02      	adds	r2, r0, #0
10001d7c:	430a      	orrs	r2, r1
10001d7e:	611a      	str	r2, [r3, #16]
10001d80:	e01c      	b.n	10001dbc <bit_init_mode+0x4a4>
					} else if (mode == PULLDOWN) {
10001d82:	1d3b      	adds	r3, r7, #4
10001d84:	781b      	ldrb	r3, [r3, #0]
10001d86:	2b02      	cmp	r3, #2
10001d88:	d118      	bne.n	10001dbc <bit_init_mode+0x4a4>
						PORT1->IOCR0 &= ~(0x0000001F << ((bitnr * 8)+3) );
10001d8a:	4bb4      	ldr	r3, [pc, #720]	; (1000205c <bit_init_mode+0x744>)
10001d8c:	4ab3      	ldr	r2, [pc, #716]	; (1000205c <bit_init_mode+0x744>)
10001d8e:	6912      	ldr	r2, [r2, #16]
10001d90:	1db9      	adds	r1, r7, #6
10001d92:	7809      	ldrb	r1, [r1, #0]
10001d94:	00c9      	lsls	r1, r1, #3
10001d96:	3103      	adds	r1, #3
10001d98:	201f      	movs	r0, #31
10001d9a:	4088      	lsls	r0, r1
10001d9c:	1c01      	adds	r1, r0, #0
10001d9e:	43c9      	mvns	r1, r1
10001da0:	400a      	ands	r2, r1
10001da2:	611a      	str	r2, [r3, #16]
						PORT1->IOCR0 |= (1UL << ((bitnr * 8)+3) );
10001da4:	4bad      	ldr	r3, [pc, #692]	; (1000205c <bit_init_mode+0x744>)
10001da6:	4aad      	ldr	r2, [pc, #692]	; (1000205c <bit_init_mode+0x744>)
10001da8:	6911      	ldr	r1, [r2, #16]
10001daa:	1dba      	adds	r2, r7, #6
10001dac:	7812      	ldrb	r2, [r2, #0]
10001dae:	00d2      	lsls	r2, r2, #3
10001db0:	3203      	adds	r2, #3
10001db2:	2001      	movs	r0, #1
10001db4:	4090      	lsls	r0, r2
10001db6:	1c02      	adds	r2, r0, #0
10001db8:	430a      	orrs	r2, r1
10001dba:	611a      	str	r2, [r3, #16]
					}
				}
			}
			if ( (bitnr <8) && (bitnr > 3)) {
10001dbc:	1dbb      	adds	r3, r7, #6
10001dbe:	781b      	ldrb	r3, [r3, #0]
10001dc0:	2b07      	cmp	r3, #7
10001dc2:	d86f      	bhi.n	10001ea4 <bit_init_mode+0x58c>
10001dc4:	1dbb      	adds	r3, r7, #6
10001dc6:	781b      	ldrb	r3, [r3, #0]
10001dc8:	2b03      	cmp	r3, #3
10001dca:	d96b      	bls.n	10001ea4 <bit_init_mode+0x58c>
				if (direction == 1) {
10001dcc:	1d7b      	adds	r3, r7, #5
10001dce:	781b      	ldrb	r3, [r3, #0]
10001dd0:	2b01      	cmp	r3, #1
10001dd2:	d11b      	bne.n	10001e0c <bit_init_mode+0x4f4>
					PORT1->IOCR4 |= 1UL<< (((bitnr-4) * 8)+7);
10001dd4:	4ba1      	ldr	r3, [pc, #644]	; (1000205c <bit_init_mode+0x744>)
10001dd6:	4aa1      	ldr	r2, [pc, #644]	; (1000205c <bit_init_mode+0x744>)
10001dd8:	6951      	ldr	r1, [r2, #20]
10001dda:	1dba      	adds	r2, r7, #6
10001ddc:	7812      	ldrb	r2, [r2, #0]
10001dde:	3a04      	subs	r2, #4
10001de0:	00d2      	lsls	r2, r2, #3
10001de2:	3207      	adds	r2, #7
10001de4:	2001      	movs	r0, #1
10001de6:	4090      	lsls	r0, r2
10001de8:	1c02      	adds	r2, r0, #0
10001dea:	430a      	orrs	r2, r1
10001dec:	615a      	str	r2, [r3, #20]
					PORT1->IOCR4 &= ~(0x0000000F << (((bitnr-4) * 8)+3));
10001dee:	4b9b      	ldr	r3, [pc, #620]	; (1000205c <bit_init_mode+0x744>)
10001df0:	4a9a      	ldr	r2, [pc, #616]	; (1000205c <bit_init_mode+0x744>)
10001df2:	6952      	ldr	r2, [r2, #20]
10001df4:	1db9      	adds	r1, r7, #6
10001df6:	7809      	ldrb	r1, [r1, #0]
10001df8:	3904      	subs	r1, #4
10001dfa:	00c9      	lsls	r1, r1, #3
10001dfc:	3103      	adds	r1, #3
10001dfe:	200f      	movs	r0, #15
10001e00:	4088      	lsls	r0, r1
10001e02:	1c01      	adds	r1, r0, #0
10001e04:	43c9      	mvns	r1, r1
10001e06:	400a      	ands	r2, r1
10001e08:	615a      	str	r2, [r3, #20]
10001e0a:	e04b      	b.n	10001ea4 <bit_init_mode+0x58c>
				}
				else {
					PORT1->IOCR4 &= ~(1UL << (((bitnr-4) * 8)+7) );
10001e0c:	4b93      	ldr	r3, [pc, #588]	; (1000205c <bit_init_mode+0x744>)
10001e0e:	4a93      	ldr	r2, [pc, #588]	; (1000205c <bit_init_mode+0x744>)
10001e10:	6952      	ldr	r2, [r2, #20]
10001e12:	1db9      	adds	r1, r7, #6
10001e14:	7809      	ldrb	r1, [r1, #0]
10001e16:	3904      	subs	r1, #4
10001e18:	00c9      	lsls	r1, r1, #3
10001e1a:	3107      	adds	r1, #7
10001e1c:	2001      	movs	r0, #1
10001e1e:	4088      	lsls	r0, r1
10001e20:	1c01      	adds	r1, r0, #0
10001e22:	43c9      	mvns	r1, r1
10001e24:	400a      	ands	r2, r1
10001e26:	615a      	str	r2, [r3, #20]
					if (mode == PULLUP) {
10001e28:	1d3b      	adds	r3, r7, #4
10001e2a:	781b      	ldrb	r3, [r3, #0]
10001e2c:	2b01      	cmp	r3, #1
10001e2e:	d11b      	bne.n	10001e68 <bit_init_mode+0x550>
						PORT1->IOCR4 &= ~(0x0000001F << (((bitnr-4) * 8)+3) );
10001e30:	4b8a      	ldr	r3, [pc, #552]	; (1000205c <bit_init_mode+0x744>)
10001e32:	4a8a      	ldr	r2, [pc, #552]	; (1000205c <bit_init_mode+0x744>)
10001e34:	6952      	ldr	r2, [r2, #20]
10001e36:	1db9      	adds	r1, r7, #6
10001e38:	7809      	ldrb	r1, [r1, #0]
10001e3a:	3904      	subs	r1, #4
10001e3c:	00c9      	lsls	r1, r1, #3
10001e3e:	3103      	adds	r1, #3
10001e40:	201f      	movs	r0, #31
10001e42:	4088      	lsls	r0, r1
10001e44:	1c01      	adds	r1, r0, #0
10001e46:	43c9      	mvns	r1, r1
10001e48:	400a      	ands	r2, r1
10001e4a:	615a      	str	r2, [r3, #20]
						PORT1->IOCR4 |= (1UL << (((bitnr-4) * 8)+4) );
10001e4c:	4b83      	ldr	r3, [pc, #524]	; (1000205c <bit_init_mode+0x744>)
10001e4e:	4a83      	ldr	r2, [pc, #524]	; (1000205c <bit_init_mode+0x744>)
10001e50:	6951      	ldr	r1, [r2, #20]
10001e52:	1dba      	adds	r2, r7, #6
10001e54:	7812      	ldrb	r2, [r2, #0]
10001e56:	3a04      	subs	r2, #4
10001e58:	00d2      	lsls	r2, r2, #3
10001e5a:	3204      	adds	r2, #4
10001e5c:	2001      	movs	r0, #1
10001e5e:	4090      	lsls	r0, r2
10001e60:	1c02      	adds	r2, r0, #0
10001e62:	430a      	orrs	r2, r1
10001e64:	615a      	str	r2, [r3, #20]
10001e66:	e01d      	b.n	10001ea4 <bit_init_mode+0x58c>
					}else if (mode == PULLDOWN) {
10001e68:	1d3b      	adds	r3, r7, #4
10001e6a:	781b      	ldrb	r3, [r3, #0]
10001e6c:	2b02      	cmp	r3, #2
10001e6e:	d119      	bne.n	10001ea4 <bit_init_mode+0x58c>
						PORT1->IOCR4 &= ~(0x0000001F << ((bitnr * 8)+3) );
10001e70:	4b7a      	ldr	r3, [pc, #488]	; (1000205c <bit_init_mode+0x744>)
10001e72:	4a7a      	ldr	r2, [pc, #488]	; (1000205c <bit_init_mode+0x744>)
10001e74:	6952      	ldr	r2, [r2, #20]
10001e76:	1db9      	adds	r1, r7, #6
10001e78:	7809      	ldrb	r1, [r1, #0]
10001e7a:	00c9      	lsls	r1, r1, #3
10001e7c:	3103      	adds	r1, #3
10001e7e:	201f      	movs	r0, #31
10001e80:	4088      	lsls	r0, r1
10001e82:	1c01      	adds	r1, r0, #0
10001e84:	43c9      	mvns	r1, r1
10001e86:	400a      	ands	r2, r1
10001e88:	615a      	str	r2, [r3, #20]
						PORT1->IOCR4 |= (1UL << ((bitnr * 8)+3) );
10001e8a:	4b74      	ldr	r3, [pc, #464]	; (1000205c <bit_init_mode+0x744>)
10001e8c:	4a73      	ldr	r2, [pc, #460]	; (1000205c <bit_init_mode+0x744>)
10001e8e:	6951      	ldr	r1, [r2, #20]
10001e90:	1dba      	adds	r2, r7, #6
10001e92:	7812      	ldrb	r2, [r2, #0]
10001e94:	00d2      	lsls	r2, r2, #3
10001e96:	3203      	adds	r2, #3
10001e98:	2001      	movs	r0, #1
10001e9a:	4090      	lsls	r0, r2
10001e9c:	1c02      	adds	r2, r0, #0
10001e9e:	430a      	orrs	r2, r1
10001ea0:	615a      	str	r2, [r3, #20]
					}
				}
			}
		}
		break;
10001ea2:	e2f0      	b.n	10002486 <bit_init_mode+0xb6e>
10001ea4:	e2ef      	b.n	10002486 <bit_init_mode+0xb6e>

		case 2 :
			if (bitnr == 0) { //P2.0
10001ea6:	1dbb      	adds	r3, r7, #6
10001ea8:	781b      	ldrb	r3, [r3, #0]
10001eaa:	2b00      	cmp	r3, #0
10001eac:	d14c      	bne.n	10001f48 <bit_init_mode+0x630>
			 if (direction == OUTP) {
10001eae:	1d7b      	adds	r3, r7, #5
10001eb0:	781b      	ldrb	r3, [r3, #0]
10001eb2:	2b01      	cmp	r3, #1
10001eb4:	d112      	bne.n	10001edc <bit_init_mode+0x5c4>
				 CLR_BIT(PORT2->PDISC,0); // digital Pad aktiv
10001eb6:	4b6a      	ldr	r3, [pc, #424]	; (10002060 <bit_init_mode+0x748>)
10001eb8:	4a69      	ldr	r2, [pc, #420]	; (10002060 <bit_init_mode+0x748>)
10001eba:	6e12      	ldr	r2, [r2, #96]	; 0x60
10001ebc:	2101      	movs	r1, #1
10001ebe:	438a      	bics	r2, r1
10001ec0:	661a      	str	r2, [r3, #96]	; 0x60
				 PORT2->IOCR0 &= 0xffffff00;
10001ec2:	4b67      	ldr	r3, [pc, #412]	; (10002060 <bit_init_mode+0x748>)
10001ec4:	4a66      	ldr	r2, [pc, #408]	; (10002060 <bit_init_mode+0x748>)
10001ec6:	6912      	ldr	r2, [r2, #16]
10001ec8:	21ff      	movs	r1, #255	; 0xff
10001eca:	438a      	bics	r2, r1
10001ecc:	611a      	str	r2, [r3, #16]
				 PORT2->IOCR0 |= 0x00000080;
10001ece:	4b64      	ldr	r3, [pc, #400]	; (10002060 <bit_init_mode+0x748>)
10001ed0:	4a63      	ldr	r2, [pc, #396]	; (10002060 <bit_init_mode+0x748>)
10001ed2:	6912      	ldr	r2, [r2, #16]
10001ed4:	2180      	movs	r1, #128	; 0x80
10001ed6:	430a      	orrs	r2, r1
10001ed8:	611a      	str	r2, [r3, #16]
10001eda:	e035      	b.n	10001f48 <bit_init_mode+0x630>
			 } else if (direction == INP) {
10001edc:	1d7b      	adds	r3, r7, #5
10001ede:	781b      	ldrb	r3, [r3, #0]
10001ee0:	2b00      	cmp	r3, #0
10001ee2:	d131      	bne.n	10001f48 <bit_init_mode+0x630>
				 CLR_BIT(PORT2->PDISC,0); // digital Pad aktiv
10001ee4:	4b5e      	ldr	r3, [pc, #376]	; (10002060 <bit_init_mode+0x748>)
10001ee6:	4a5e      	ldr	r2, [pc, #376]	; (10002060 <bit_init_mode+0x748>)
10001ee8:	6e12      	ldr	r2, [r2, #96]	; 0x60
10001eea:	2101      	movs	r1, #1
10001eec:	438a      	bics	r2, r1
10001eee:	661a      	str	r2, [r3, #96]	; 0x60
				 if (mode==PULLUP) {
10001ef0:	1d3b      	adds	r3, r7, #4
10001ef2:	781b      	ldrb	r3, [r3, #0]
10001ef4:	2b01      	cmp	r3, #1
10001ef6:	d10c      	bne.n	10001f12 <bit_init_mode+0x5fa>
					 PORT2->IOCR0 &= 0xFFFFFF00;
10001ef8:	4b59      	ldr	r3, [pc, #356]	; (10002060 <bit_init_mode+0x748>)
10001efa:	4a59      	ldr	r2, [pc, #356]	; (10002060 <bit_init_mode+0x748>)
10001efc:	6912      	ldr	r2, [r2, #16]
10001efe:	21ff      	movs	r1, #255	; 0xff
10001f00:	438a      	bics	r2, r1
10001f02:	611a      	str	r2, [r3, #16]
					 PORT2->IOCR0 |= 0x00000010;
10001f04:	4b56      	ldr	r3, [pc, #344]	; (10002060 <bit_init_mode+0x748>)
10001f06:	4a56      	ldr	r2, [pc, #344]	; (10002060 <bit_init_mode+0x748>)
10001f08:	6912      	ldr	r2, [r2, #16]
10001f0a:	2110      	movs	r1, #16
10001f0c:	430a      	orrs	r2, r1
10001f0e:	611a      	str	r2, [r3, #16]
10001f10:	e01a      	b.n	10001f48 <bit_init_mode+0x630>
				 } else if (mode==PULLDOWN) {
10001f12:	1d3b      	adds	r3, r7, #4
10001f14:	781b      	ldrb	r3, [r3, #0]
10001f16:	2b02      	cmp	r3, #2
10001f18:	d10c      	bne.n	10001f34 <bit_init_mode+0x61c>
					 PORT2->IOCR0 &= 0xFFFFFF00;
10001f1a:	4b51      	ldr	r3, [pc, #324]	; (10002060 <bit_init_mode+0x748>)
10001f1c:	4a50      	ldr	r2, [pc, #320]	; (10002060 <bit_init_mode+0x748>)
10001f1e:	6912      	ldr	r2, [r2, #16]
10001f20:	21ff      	movs	r1, #255	; 0xff
10001f22:	438a      	bics	r2, r1
10001f24:	611a      	str	r2, [r3, #16]
					 PORT2->IOCR0 |= 0x00000008;
10001f26:	4b4e      	ldr	r3, [pc, #312]	; (10002060 <bit_init_mode+0x748>)
10001f28:	4a4d      	ldr	r2, [pc, #308]	; (10002060 <bit_init_mode+0x748>)
10001f2a:	6912      	ldr	r2, [r2, #16]
10001f2c:	2108      	movs	r1, #8
10001f2e:	430a      	orrs	r2, r1
10001f30:	611a      	str	r2, [r3, #16]
10001f32:	e009      	b.n	10001f48 <bit_init_mode+0x630>
				 } else if (mode == ANALOG) {
10001f34:	1d3b      	adds	r3, r7, #4
10001f36:	781b      	ldrb	r3, [r3, #0]
10001f38:	2b03      	cmp	r3, #3
10001f3a:	d105      	bne.n	10001f48 <bit_init_mode+0x630>
					SET_BIT(PORT2->PDISC,0); //Analog Modus aktiv
10001f3c:	4b48      	ldr	r3, [pc, #288]	; (10002060 <bit_init_mode+0x748>)
10001f3e:	4a48      	ldr	r2, [pc, #288]	; (10002060 <bit_init_mode+0x748>)
10001f40:	6e12      	ldr	r2, [r2, #96]	; 0x60
10001f42:	2101      	movs	r1, #1
10001f44:	430a      	orrs	r2, r1
10001f46:	661a      	str	r2, [r3, #96]	; 0x60
				 }
			 }
		 }
		 if (bitnr == 1) { //P2.1
10001f48:	1dbb      	adds	r3, r7, #6
10001f4a:	781b      	ldrb	r3, [r3, #0]
10001f4c:	2b01      	cmp	r3, #1
10001f4e:	d14f      	bne.n	10001ff0 <bit_init_mode+0x6d8>
			 if (direction == OUTP) {
10001f50:	1d7b      	adds	r3, r7, #5
10001f52:	781b      	ldrb	r3, [r3, #0]
10001f54:	2b01      	cmp	r3, #1
10001f56:	d113      	bne.n	10001f80 <bit_init_mode+0x668>
				 CLR_BIT(PORT2->PDISC,1); // digital Pad aktiv
10001f58:	4b41      	ldr	r3, [pc, #260]	; (10002060 <bit_init_mode+0x748>)
10001f5a:	4a41      	ldr	r2, [pc, #260]	; (10002060 <bit_init_mode+0x748>)
10001f5c:	6e12      	ldr	r2, [r2, #96]	; 0x60
10001f5e:	2102      	movs	r1, #2
10001f60:	438a      	bics	r2, r1
10001f62:	661a      	str	r2, [r3, #96]	; 0x60
				 PORT2->IOCR0 &= 0xffff00ff;
10001f64:	4b3e      	ldr	r3, [pc, #248]	; (10002060 <bit_init_mode+0x748>)
10001f66:	4a3e      	ldr	r2, [pc, #248]	; (10002060 <bit_init_mode+0x748>)
10001f68:	6912      	ldr	r2, [r2, #16]
10001f6a:	493e      	ldr	r1, [pc, #248]	; (10002064 <bit_init_mode+0x74c>)
10001f6c:	400a      	ands	r2, r1
10001f6e:	611a      	str	r2, [r3, #16]
				 PORT2->IOCR0 |= 0x00008000;
10001f70:	4b3b      	ldr	r3, [pc, #236]	; (10002060 <bit_init_mode+0x748>)
10001f72:	4a3b      	ldr	r2, [pc, #236]	; (10002060 <bit_init_mode+0x748>)
10001f74:	6912      	ldr	r2, [r2, #16]
10001f76:	2180      	movs	r1, #128	; 0x80
10001f78:	0209      	lsls	r1, r1, #8
10001f7a:	430a      	orrs	r2, r1
10001f7c:	611a      	str	r2, [r3, #16]
10001f7e:	e037      	b.n	10001ff0 <bit_init_mode+0x6d8>
			 } else if (direction == INP) {
10001f80:	1d7b      	adds	r3, r7, #5
10001f82:	781b      	ldrb	r3, [r3, #0]
10001f84:	2b00      	cmp	r3, #0
10001f86:	d133      	bne.n	10001ff0 <bit_init_mode+0x6d8>
				 CLR_BIT(PORT2->PDISC,1); // digital Pad aktiv
10001f88:	4b35      	ldr	r3, [pc, #212]	; (10002060 <bit_init_mode+0x748>)
10001f8a:	4a35      	ldr	r2, [pc, #212]	; (10002060 <bit_init_mode+0x748>)
10001f8c:	6e12      	ldr	r2, [r2, #96]	; 0x60
10001f8e:	2102      	movs	r1, #2
10001f90:	438a      	bics	r2, r1
10001f92:	661a      	str	r2, [r3, #96]	; 0x60
				 if (mode==PULLUP) {
10001f94:	1d3b      	adds	r3, r7, #4
10001f96:	781b      	ldrb	r3, [r3, #0]
10001f98:	2b01      	cmp	r3, #1
10001f9a:	d10d      	bne.n	10001fb8 <bit_init_mode+0x6a0>
					 PORT2->IOCR0 &= 0xFFFF00ff;
10001f9c:	4b30      	ldr	r3, [pc, #192]	; (10002060 <bit_init_mode+0x748>)
10001f9e:	4a30      	ldr	r2, [pc, #192]	; (10002060 <bit_init_mode+0x748>)
10001fa0:	6912      	ldr	r2, [r2, #16]
10001fa2:	4930      	ldr	r1, [pc, #192]	; (10002064 <bit_init_mode+0x74c>)
10001fa4:	400a      	ands	r2, r1
10001fa6:	611a      	str	r2, [r3, #16]
					 PORT2->IOCR0 |= 0x00001000;
10001fa8:	4b2d      	ldr	r3, [pc, #180]	; (10002060 <bit_init_mode+0x748>)
10001faa:	4a2d      	ldr	r2, [pc, #180]	; (10002060 <bit_init_mode+0x748>)
10001fac:	6912      	ldr	r2, [r2, #16]
10001fae:	2180      	movs	r1, #128	; 0x80
10001fb0:	0149      	lsls	r1, r1, #5
10001fb2:	430a      	orrs	r2, r1
10001fb4:	611a      	str	r2, [r3, #16]
10001fb6:	e01b      	b.n	10001ff0 <bit_init_mode+0x6d8>
				 } else if (mode==PULLDOWN) {
10001fb8:	1d3b      	adds	r3, r7, #4
10001fba:	781b      	ldrb	r3, [r3, #0]
10001fbc:	2b02      	cmp	r3, #2
10001fbe:	d10d      	bne.n	10001fdc <bit_init_mode+0x6c4>
					 PORT2->IOCR0 &= 0xFFFF00ff;
10001fc0:	4b27      	ldr	r3, [pc, #156]	; (10002060 <bit_init_mode+0x748>)
10001fc2:	4a27      	ldr	r2, [pc, #156]	; (10002060 <bit_init_mode+0x748>)
10001fc4:	6912      	ldr	r2, [r2, #16]
10001fc6:	4927      	ldr	r1, [pc, #156]	; (10002064 <bit_init_mode+0x74c>)
10001fc8:	400a      	ands	r2, r1
10001fca:	611a      	str	r2, [r3, #16]
					 PORT2->IOCR0 |= 0x00000800;
10001fcc:	4b24      	ldr	r3, [pc, #144]	; (10002060 <bit_init_mode+0x748>)
10001fce:	4a24      	ldr	r2, [pc, #144]	; (10002060 <bit_init_mode+0x748>)
10001fd0:	6912      	ldr	r2, [r2, #16]
10001fd2:	2180      	movs	r1, #128	; 0x80
10001fd4:	0109      	lsls	r1, r1, #4
10001fd6:	430a      	orrs	r2, r1
10001fd8:	611a      	str	r2, [r3, #16]
10001fda:	e009      	b.n	10001ff0 <bit_init_mode+0x6d8>
				 } else if (mode == ANALOG) {
10001fdc:	1d3b      	adds	r3, r7, #4
10001fde:	781b      	ldrb	r3, [r3, #0]
10001fe0:	2b03      	cmp	r3, #3
10001fe2:	d105      	bne.n	10001ff0 <bit_init_mode+0x6d8>
					SET_BIT(PORT2->PDISC,1); //Analog Modus aktiv
10001fe4:	4b1e      	ldr	r3, [pc, #120]	; (10002060 <bit_init_mode+0x748>)
10001fe6:	4a1e      	ldr	r2, [pc, #120]	; (10002060 <bit_init_mode+0x748>)
10001fe8:	6e12      	ldr	r2, [r2, #96]	; 0x60
10001fea:	2102      	movs	r1, #2
10001fec:	430a      	orrs	r2, r1
10001fee:	661a      	str	r2, [r3, #96]	; 0x60
				 }
			 }
		 }
		 if (bitnr == 2) { //P2.2
10001ff0:	1dbb      	adds	r3, r7, #6
10001ff2:	781b      	ldrb	r3, [r3, #0]
10001ff4:	2b02      	cmp	r3, #2
10001ff6:	d143      	bne.n	10002080 <bit_init_mode+0x768>
			 if (direction == OUTP) {
10001ff8:	1d7b      	adds	r3, r7, #5
10001ffa:	781b      	ldrb	r3, [r3, #0]
10001ffc:	2b01      	cmp	r3, #1
10001ffe:	d03f      	beq.n	10002080 <bit_init_mode+0x768>
				 // nicht moeglich
			 } else if (direction == INP) {
10002000:	1d7b      	adds	r3, r7, #5
10002002:	781b      	ldrb	r3, [r3, #0]
10002004:	2b00      	cmp	r3, #0
10002006:	d13b      	bne.n	10002080 <bit_init_mode+0x768>
				 CLR_BIT(PORT2->PDISC,2); // digital Pad aktiv
10002008:	4b15      	ldr	r3, [pc, #84]	; (10002060 <bit_init_mode+0x748>)
1000200a:	4a15      	ldr	r2, [pc, #84]	; (10002060 <bit_init_mode+0x748>)
1000200c:	6e12      	ldr	r2, [r2, #96]	; 0x60
1000200e:	2104      	movs	r1, #4
10002010:	438a      	bics	r2, r1
10002012:	661a      	str	r2, [r3, #96]	; 0x60
				 if (mode==PULLUP) {
10002014:	1d3b      	adds	r3, r7, #4
10002016:	781b      	ldrb	r3, [r3, #0]
10002018:	2b01      	cmp	r3, #1
1000201a:	d10d      	bne.n	10002038 <bit_init_mode+0x720>
					 PORT2->IOCR0 &= 0xFF00ffff;
1000201c:	4b10      	ldr	r3, [pc, #64]	; (10002060 <bit_init_mode+0x748>)
1000201e:	4a10      	ldr	r2, [pc, #64]	; (10002060 <bit_init_mode+0x748>)
10002020:	6912      	ldr	r2, [r2, #16]
10002022:	4911      	ldr	r1, [pc, #68]	; (10002068 <bit_init_mode+0x750>)
10002024:	400a      	ands	r2, r1
10002026:	611a      	str	r2, [r3, #16]
					 PORT2->IOCR0 |= 0x00100000;
10002028:	4b0d      	ldr	r3, [pc, #52]	; (10002060 <bit_init_mode+0x748>)
1000202a:	4a0d      	ldr	r2, [pc, #52]	; (10002060 <bit_init_mode+0x748>)
1000202c:	6912      	ldr	r2, [r2, #16]
1000202e:	2180      	movs	r1, #128	; 0x80
10002030:	0349      	lsls	r1, r1, #13
10002032:	430a      	orrs	r2, r1
10002034:	611a      	str	r2, [r3, #16]
10002036:	e023      	b.n	10002080 <bit_init_mode+0x768>
				 } else if (mode==PULLDOWN) {
10002038:	1d3b      	adds	r3, r7, #4
1000203a:	781b      	ldrb	r3, [r3, #0]
1000203c:	2b02      	cmp	r3, #2
1000203e:	d115      	bne.n	1000206c <bit_init_mode+0x754>
					 PORT2->IOCR0 &= 0xFF00ffff;
10002040:	4b07      	ldr	r3, [pc, #28]	; (10002060 <bit_init_mode+0x748>)
10002042:	4a07      	ldr	r2, [pc, #28]	; (10002060 <bit_init_mode+0x748>)
10002044:	6912      	ldr	r2, [r2, #16]
10002046:	4908      	ldr	r1, [pc, #32]	; (10002068 <bit_init_mode+0x750>)
10002048:	400a      	ands	r2, r1
1000204a:	611a      	str	r2, [r3, #16]
					 PORT2->IOCR0 |= 0x00080000;
1000204c:	4b04      	ldr	r3, [pc, #16]	; (10002060 <bit_init_mode+0x748>)
1000204e:	4a04      	ldr	r2, [pc, #16]	; (10002060 <bit_init_mode+0x748>)
10002050:	6912      	ldr	r2, [r2, #16]
10002052:	2180      	movs	r1, #128	; 0x80
10002054:	0309      	lsls	r1, r1, #12
10002056:	430a      	orrs	r2, r1
10002058:	611a      	str	r2, [r3, #16]
1000205a:	e011      	b.n	10002080 <bit_init_mode+0x768>
1000205c:	40040100 	.word	0x40040100
10002060:	40040200 	.word	0x40040200
10002064:	ffff00ff 	.word	0xffff00ff
10002068:	ff00ffff 	.word	0xff00ffff
				 } else if (mode == ANALOG) {
1000206c:	1d3b      	adds	r3, r7, #4
1000206e:	781b      	ldrb	r3, [r3, #0]
10002070:	2b03      	cmp	r3, #3
10002072:	d105      	bne.n	10002080 <bit_init_mode+0x768>
					SET_BIT(PORT2->PDISC,2); //Analog Modus aktiv
10002074:	4bcd      	ldr	r3, [pc, #820]	; (100023ac <bit_init_mode+0xa94>)
10002076:	4acd      	ldr	r2, [pc, #820]	; (100023ac <bit_init_mode+0xa94>)
10002078:	6e12      	ldr	r2, [r2, #96]	; 0x60
1000207a:	2104      	movs	r1, #4
1000207c:	430a      	orrs	r2, r1
1000207e:	661a      	str	r2, [r3, #96]	; 0x60
				 }
			 }
		 }
		 if (bitnr == 3) { //P2.3
10002080:	1dbb      	adds	r3, r7, #6
10002082:	781b      	ldrb	r3, [r3, #0]
10002084:	2b03      	cmp	r3, #3
10002086:	d13b      	bne.n	10002100 <bit_init_mode+0x7e8>
			 if (direction == OUTP) {
10002088:	1d7b      	adds	r3, r7, #5
1000208a:	781b      	ldrb	r3, [r3, #0]
1000208c:	2b01      	cmp	r3, #1
1000208e:	d037      	beq.n	10002100 <bit_init_mode+0x7e8>
				 // nicht moeglich
			 } else if (direction == INP) {
10002090:	1d7b      	adds	r3, r7, #5
10002092:	781b      	ldrb	r3, [r3, #0]
10002094:	2b00      	cmp	r3, #0
10002096:	d133      	bne.n	10002100 <bit_init_mode+0x7e8>
				 CLR_BIT(PORT2->PDISC,3); // digital Pad aktiv
10002098:	4bc4      	ldr	r3, [pc, #784]	; (100023ac <bit_init_mode+0xa94>)
1000209a:	4ac4      	ldr	r2, [pc, #784]	; (100023ac <bit_init_mode+0xa94>)
1000209c:	6e12      	ldr	r2, [r2, #96]	; 0x60
1000209e:	2108      	movs	r1, #8
100020a0:	438a      	bics	r2, r1
100020a2:	661a      	str	r2, [r3, #96]	; 0x60
				 if (mode==PULLUP) {
100020a4:	1d3b      	adds	r3, r7, #4
100020a6:	781b      	ldrb	r3, [r3, #0]
100020a8:	2b01      	cmp	r3, #1
100020aa:	d10d      	bne.n	100020c8 <bit_init_mode+0x7b0>
					 PORT2->IOCR0 &= 0x00ffffff;
100020ac:	4bbf      	ldr	r3, [pc, #764]	; (100023ac <bit_init_mode+0xa94>)
100020ae:	4abf      	ldr	r2, [pc, #764]	; (100023ac <bit_init_mode+0xa94>)
100020b0:	6912      	ldr	r2, [r2, #16]
100020b2:	0212      	lsls	r2, r2, #8
100020b4:	0a12      	lsrs	r2, r2, #8
100020b6:	611a      	str	r2, [r3, #16]
					 PORT2->IOCR0 |= 0x10000000;
100020b8:	4bbc      	ldr	r3, [pc, #752]	; (100023ac <bit_init_mode+0xa94>)
100020ba:	4abc      	ldr	r2, [pc, #752]	; (100023ac <bit_init_mode+0xa94>)
100020bc:	6912      	ldr	r2, [r2, #16]
100020be:	2180      	movs	r1, #128	; 0x80
100020c0:	0549      	lsls	r1, r1, #21
100020c2:	430a      	orrs	r2, r1
100020c4:	611a      	str	r2, [r3, #16]
100020c6:	e01b      	b.n	10002100 <bit_init_mode+0x7e8>
				 } else if (mode==PULLDOWN) {
100020c8:	1d3b      	adds	r3, r7, #4
100020ca:	781b      	ldrb	r3, [r3, #0]
100020cc:	2b02      	cmp	r3, #2
100020ce:	d10d      	bne.n	100020ec <bit_init_mode+0x7d4>
					 PORT2->IOCR0 &= 0x00ffffff;
100020d0:	4bb6      	ldr	r3, [pc, #728]	; (100023ac <bit_init_mode+0xa94>)
100020d2:	4ab6      	ldr	r2, [pc, #728]	; (100023ac <bit_init_mode+0xa94>)
100020d4:	6912      	ldr	r2, [r2, #16]
100020d6:	0212      	lsls	r2, r2, #8
100020d8:	0a12      	lsrs	r2, r2, #8
100020da:	611a      	str	r2, [r3, #16]
					 PORT2->IOCR0 |= 0x08000000;
100020dc:	4bb3      	ldr	r3, [pc, #716]	; (100023ac <bit_init_mode+0xa94>)
100020de:	4ab3      	ldr	r2, [pc, #716]	; (100023ac <bit_init_mode+0xa94>)
100020e0:	6912      	ldr	r2, [r2, #16]
100020e2:	2180      	movs	r1, #128	; 0x80
100020e4:	0509      	lsls	r1, r1, #20
100020e6:	430a      	orrs	r2, r1
100020e8:	611a      	str	r2, [r3, #16]
100020ea:	e009      	b.n	10002100 <bit_init_mode+0x7e8>
				 } else if (mode == ANALOG) {
100020ec:	1d3b      	adds	r3, r7, #4
100020ee:	781b      	ldrb	r3, [r3, #0]
100020f0:	2b03      	cmp	r3, #3
100020f2:	d105      	bne.n	10002100 <bit_init_mode+0x7e8>
					SET_BIT(PORT2->PDISC,3); //Analog Modus aktiv
100020f4:	4bad      	ldr	r3, [pc, #692]	; (100023ac <bit_init_mode+0xa94>)
100020f6:	4aad      	ldr	r2, [pc, #692]	; (100023ac <bit_init_mode+0xa94>)
100020f8:	6e12      	ldr	r2, [r2, #96]	; 0x60
100020fa:	2108      	movs	r1, #8
100020fc:	430a      	orrs	r2, r1
100020fe:	661a      	str	r2, [r3, #96]	; 0x60
				 }
			 }
		 }
		 if ((bitnr > 3) && (bitnr < 8)) { //P2.4 bis P2.7
10002100:	1dbb      	adds	r3, r7, #6
10002102:	781b      	ldrb	r3, [r3, #0]
10002104:	2b03      	cmp	r3, #3
10002106:	d960      	bls.n	100021ca <bit_init_mode+0x8b2>
10002108:	1dbb      	adds	r3, r7, #6
1000210a:	781b      	ldrb	r3, [r3, #0]
1000210c:	2b07      	cmp	r3, #7
1000210e:	d85c      	bhi.n	100021ca <bit_init_mode+0x8b2>
			 if (direction == OUTP) {
10002110:	1d7b      	adds	r3, r7, #5
10002112:	781b      	ldrb	r3, [r3, #0]
10002114:	2b01      	cmp	r3, #1
10002116:	d058      	beq.n	100021ca <bit_init_mode+0x8b2>
				 // nicht moeglich
			 } else if (direction == INP) {
10002118:	1d7b      	adds	r3, r7, #5
1000211a:	781b      	ldrb	r3, [r3, #0]
1000211c:	2b00      	cmp	r3, #0
1000211e:	d154      	bne.n	100021ca <bit_init_mode+0x8b2>
				 CLR_BIT(PORT2->PDISC,bitnr); // digital Pad aktiv
10002120:	4ba2      	ldr	r3, [pc, #648]	; (100023ac <bit_init_mode+0xa94>)
10002122:	4aa2      	ldr	r2, [pc, #648]	; (100023ac <bit_init_mode+0xa94>)
10002124:	6e12      	ldr	r2, [r2, #96]	; 0x60
10002126:	1db9      	adds	r1, r7, #6
10002128:	7809      	ldrb	r1, [r1, #0]
1000212a:	2001      	movs	r0, #1
1000212c:	4088      	lsls	r0, r1
1000212e:	1c01      	adds	r1, r0, #0
10002130:	43c9      	mvns	r1, r1
10002132:	400a      	ands	r2, r1
10002134:	661a      	str	r2, [r3, #96]	; 0x60
				 if (mode==PULLUP) {
10002136:	1d3b      	adds	r3, r7, #4
10002138:	781b      	ldrb	r3, [r3, #0]
1000213a:	2b01      	cmp	r3, #1
1000213c:	d119      	bne.n	10002172 <bit_init_mode+0x85a>
					 PORT2->IOCR4 &= ~(0xff<<((bitnr-4)*8)); //PORT2->IOCR1 &= 0xffffff00;
1000213e:	4b9b      	ldr	r3, [pc, #620]	; (100023ac <bit_init_mode+0xa94>)
10002140:	4a9a      	ldr	r2, [pc, #616]	; (100023ac <bit_init_mode+0xa94>)
10002142:	6952      	ldr	r2, [r2, #20]
10002144:	1db9      	adds	r1, r7, #6
10002146:	7809      	ldrb	r1, [r1, #0]
10002148:	3904      	subs	r1, #4
1000214a:	00c9      	lsls	r1, r1, #3
1000214c:	20ff      	movs	r0, #255	; 0xff
1000214e:	4088      	lsls	r0, r1
10002150:	1c01      	adds	r1, r0, #0
10002152:	43c9      	mvns	r1, r1
10002154:	400a      	ands	r2, r1
10002156:	615a      	str	r2, [r3, #20]
					 PORT2->IOCR4 |= 0x10<<((bitnr-4)*8);    //PORT2->IOCR4 |= 0x00000010;
10002158:	4b94      	ldr	r3, [pc, #592]	; (100023ac <bit_init_mode+0xa94>)
1000215a:	4a94      	ldr	r2, [pc, #592]	; (100023ac <bit_init_mode+0xa94>)
1000215c:	6952      	ldr	r2, [r2, #20]
1000215e:	1db9      	adds	r1, r7, #6
10002160:	7809      	ldrb	r1, [r1, #0]
10002162:	3904      	subs	r1, #4
10002164:	00c9      	lsls	r1, r1, #3
10002166:	2010      	movs	r0, #16
10002168:	4088      	lsls	r0, r1
1000216a:	1c01      	adds	r1, r0, #0
1000216c:	430a      	orrs	r2, r1
1000216e:	615a      	str	r2, [r3, #20]
10002170:	e02b      	b.n	100021ca <bit_init_mode+0x8b2>
				 } else if (mode==PULLDOWN) {
10002172:	1d3b      	adds	r3, r7, #4
10002174:	781b      	ldrb	r3, [r3, #0]
10002176:	2b02      	cmp	r3, #2
10002178:	d119      	bne.n	100021ae <bit_init_mode+0x896>
					 PORT2->IOCR4 &= ~(0xff<<((bitnr-4)*8)); //PORT2->IOCR1 &= 0xffffff00;
1000217a:	4b8c      	ldr	r3, [pc, #560]	; (100023ac <bit_init_mode+0xa94>)
1000217c:	4a8b      	ldr	r2, [pc, #556]	; (100023ac <bit_init_mode+0xa94>)
1000217e:	6952      	ldr	r2, [r2, #20]
10002180:	1db9      	adds	r1, r7, #6
10002182:	7809      	ldrb	r1, [r1, #0]
10002184:	3904      	subs	r1, #4
10002186:	00c9      	lsls	r1, r1, #3
10002188:	20ff      	movs	r0, #255	; 0xff
1000218a:	4088      	lsls	r0, r1
1000218c:	1c01      	adds	r1, r0, #0
1000218e:	43c9      	mvns	r1, r1
10002190:	400a      	ands	r2, r1
10002192:	615a      	str	r2, [r3, #20]
					 PORT2->IOCR4 |= 0x08<<((bitnr-4)*8);    //PORT2->IOCR4 |= 0x00000010;
10002194:	4b85      	ldr	r3, [pc, #532]	; (100023ac <bit_init_mode+0xa94>)
10002196:	4a85      	ldr	r2, [pc, #532]	; (100023ac <bit_init_mode+0xa94>)
10002198:	6952      	ldr	r2, [r2, #20]
1000219a:	1db9      	adds	r1, r7, #6
1000219c:	7809      	ldrb	r1, [r1, #0]
1000219e:	3904      	subs	r1, #4
100021a0:	00c9      	lsls	r1, r1, #3
100021a2:	2008      	movs	r0, #8
100021a4:	4088      	lsls	r0, r1
100021a6:	1c01      	adds	r1, r0, #0
100021a8:	430a      	orrs	r2, r1
100021aa:	615a      	str	r2, [r3, #20]
100021ac:	e00d      	b.n	100021ca <bit_init_mode+0x8b2>
				 } else if (mode == ANALOG) {
100021ae:	1d3b      	adds	r3, r7, #4
100021b0:	781b      	ldrb	r3, [r3, #0]
100021b2:	2b03      	cmp	r3, #3
100021b4:	d109      	bne.n	100021ca <bit_init_mode+0x8b2>
					 SET_BIT(PORT2->PDISC,bitnr); //Analog Modus aktiv
100021b6:	4b7d      	ldr	r3, [pc, #500]	; (100023ac <bit_init_mode+0xa94>)
100021b8:	4a7c      	ldr	r2, [pc, #496]	; (100023ac <bit_init_mode+0xa94>)
100021ba:	6e11      	ldr	r1, [r2, #96]	; 0x60
100021bc:	1dba      	adds	r2, r7, #6
100021be:	7812      	ldrb	r2, [r2, #0]
100021c0:	2001      	movs	r0, #1
100021c2:	4090      	lsls	r0, r2
100021c4:	1c02      	adds	r2, r0, #0
100021c6:	430a      	orrs	r2, r1
100021c8:	661a      	str	r2, [r3, #96]	; 0x60
				 }
			 }
		 }
		 if (bitnr == 8) { //P2.8
100021ca:	1dbb      	adds	r3, r7, #6
100021cc:	781b      	ldrb	r3, [r3, #0]
100021ce:	2b08      	cmp	r3, #8
100021d0:	d14d      	bne.n	1000226e <bit_init_mode+0x956>
			if (direction == OUTP) {
100021d2:	1d7b      	adds	r3, r7, #5
100021d4:	781b      	ldrb	r3, [r3, #0]
100021d6:	2b01      	cmp	r3, #1
100021d8:	d112      	bne.n	10002200 <bit_init_mode+0x8e8>
				CLR_BIT(PORT2->PDISC,8); // digital Pad aktiv
100021da:	4b74      	ldr	r3, [pc, #464]	; (100023ac <bit_init_mode+0xa94>)
100021dc:	4a73      	ldr	r2, [pc, #460]	; (100023ac <bit_init_mode+0xa94>)
100021de:	6e12      	ldr	r2, [r2, #96]	; 0x60
100021e0:	4973      	ldr	r1, [pc, #460]	; (100023b0 <bit_init_mode+0xa98>)
100021e2:	400a      	ands	r2, r1
100021e4:	661a      	str	r2, [r3, #96]	; 0x60
				PORT2->IOCR8 &= 0xffffff00;
100021e6:	4b71      	ldr	r3, [pc, #452]	; (100023ac <bit_init_mode+0xa94>)
100021e8:	4a70      	ldr	r2, [pc, #448]	; (100023ac <bit_init_mode+0xa94>)
100021ea:	6992      	ldr	r2, [r2, #24]
100021ec:	21ff      	movs	r1, #255	; 0xff
100021ee:	438a      	bics	r2, r1
100021f0:	619a      	str	r2, [r3, #24]
				PORT2->IOCR8 |= 0x00000080;
100021f2:	4b6e      	ldr	r3, [pc, #440]	; (100023ac <bit_init_mode+0xa94>)
100021f4:	4a6d      	ldr	r2, [pc, #436]	; (100023ac <bit_init_mode+0xa94>)
100021f6:	6992      	ldr	r2, [r2, #24]
100021f8:	2180      	movs	r1, #128	; 0x80
100021fa:	430a      	orrs	r2, r1
100021fc:	619a      	str	r2, [r3, #24]
100021fe:	e036      	b.n	1000226e <bit_init_mode+0x956>
			} else if (direction == INP) {
10002200:	1d7b      	adds	r3, r7, #5
10002202:	781b      	ldrb	r3, [r3, #0]
10002204:	2b00      	cmp	r3, #0
10002206:	d132      	bne.n	1000226e <bit_init_mode+0x956>
				CLR_BIT(PORT2->PDISC,8); // digital Pad aktiv
10002208:	4b68      	ldr	r3, [pc, #416]	; (100023ac <bit_init_mode+0xa94>)
1000220a:	4a68      	ldr	r2, [pc, #416]	; (100023ac <bit_init_mode+0xa94>)
1000220c:	6e12      	ldr	r2, [r2, #96]	; 0x60
1000220e:	4968      	ldr	r1, [pc, #416]	; (100023b0 <bit_init_mode+0xa98>)
10002210:	400a      	ands	r2, r1
10002212:	661a      	str	r2, [r3, #96]	; 0x60
				if (mode==PULLUP) {
10002214:	1d3b      	adds	r3, r7, #4
10002216:	781b      	ldrb	r3, [r3, #0]
10002218:	2b01      	cmp	r3, #1
1000221a:	d10c      	bne.n	10002236 <bit_init_mode+0x91e>
					PORT2->IOCR8 &= 0xFFFFFF00;
1000221c:	4b63      	ldr	r3, [pc, #396]	; (100023ac <bit_init_mode+0xa94>)
1000221e:	4a63      	ldr	r2, [pc, #396]	; (100023ac <bit_init_mode+0xa94>)
10002220:	6992      	ldr	r2, [r2, #24]
10002222:	21ff      	movs	r1, #255	; 0xff
10002224:	438a      	bics	r2, r1
10002226:	619a      	str	r2, [r3, #24]
					PORT2->IOCR8 |= 0x00000010;
10002228:	4b60      	ldr	r3, [pc, #384]	; (100023ac <bit_init_mode+0xa94>)
1000222a:	4a60      	ldr	r2, [pc, #384]	; (100023ac <bit_init_mode+0xa94>)
1000222c:	6992      	ldr	r2, [r2, #24]
1000222e:	2110      	movs	r1, #16
10002230:	430a      	orrs	r2, r1
10002232:	619a      	str	r2, [r3, #24]
10002234:	e01b      	b.n	1000226e <bit_init_mode+0x956>
				} else if (mode==PULLDOWN) {
10002236:	1d3b      	adds	r3, r7, #4
10002238:	781b      	ldrb	r3, [r3, #0]
1000223a:	2b02      	cmp	r3, #2
1000223c:	d10c      	bne.n	10002258 <bit_init_mode+0x940>
					PORT2->IOCR8 &= 0xFFFFFF00;
1000223e:	4b5b      	ldr	r3, [pc, #364]	; (100023ac <bit_init_mode+0xa94>)
10002240:	4a5a      	ldr	r2, [pc, #360]	; (100023ac <bit_init_mode+0xa94>)
10002242:	6992      	ldr	r2, [r2, #24]
10002244:	21ff      	movs	r1, #255	; 0xff
10002246:	438a      	bics	r2, r1
10002248:	619a      	str	r2, [r3, #24]
					PORT2->IOCR8 |= 0x00000008;
1000224a:	4b58      	ldr	r3, [pc, #352]	; (100023ac <bit_init_mode+0xa94>)
1000224c:	4a57      	ldr	r2, [pc, #348]	; (100023ac <bit_init_mode+0xa94>)
1000224e:	6992      	ldr	r2, [r2, #24]
10002250:	2108      	movs	r1, #8
10002252:	430a      	orrs	r2, r1
10002254:	619a      	str	r2, [r3, #24]
10002256:	e00a      	b.n	1000226e <bit_init_mode+0x956>
				} else if (mode == ANALOG) {
10002258:	1d3b      	adds	r3, r7, #4
1000225a:	781b      	ldrb	r3, [r3, #0]
1000225c:	2b03      	cmp	r3, #3
1000225e:	d106      	bne.n	1000226e <bit_init_mode+0x956>
					SET_BIT(PORT2->PDISC,8); //Analog Modus aktiv
10002260:	4b52      	ldr	r3, [pc, #328]	; (100023ac <bit_init_mode+0xa94>)
10002262:	4a52      	ldr	r2, [pc, #328]	; (100023ac <bit_init_mode+0xa94>)
10002264:	6e12      	ldr	r2, [r2, #96]	; 0x60
10002266:	2180      	movs	r1, #128	; 0x80
10002268:	0049      	lsls	r1, r1, #1
1000226a:	430a      	orrs	r2, r1
1000226c:	661a      	str	r2, [r3, #96]	; 0x60
				}
			}
		 }
		 if (bitnr == 9) { //P2.9
1000226e:	1dbb      	adds	r3, r7, #6
10002270:	781b      	ldrb	r3, [r3, #0]
10002272:	2b09      	cmp	r3, #9
10002274:	d150      	bne.n	10002318 <bit_init_mode+0xa00>
			if (direction == OUTP) {
10002276:	1d7b      	adds	r3, r7, #5
10002278:	781b      	ldrb	r3, [r3, #0]
1000227a:	2b01      	cmp	r3, #1
1000227c:	d113      	bne.n	100022a6 <bit_init_mode+0x98e>
				CLR_BIT(PORT2->PDISC,9); // digital Pad aktiv
1000227e:	4b4b      	ldr	r3, [pc, #300]	; (100023ac <bit_init_mode+0xa94>)
10002280:	4a4a      	ldr	r2, [pc, #296]	; (100023ac <bit_init_mode+0xa94>)
10002282:	6e12      	ldr	r2, [r2, #96]	; 0x60
10002284:	494b      	ldr	r1, [pc, #300]	; (100023b4 <bit_init_mode+0xa9c>)
10002286:	400a      	ands	r2, r1
10002288:	661a      	str	r2, [r3, #96]	; 0x60
				PORT2->IOCR8 &= 0xffff00ff;
1000228a:	4b48      	ldr	r3, [pc, #288]	; (100023ac <bit_init_mode+0xa94>)
1000228c:	4a47      	ldr	r2, [pc, #284]	; (100023ac <bit_init_mode+0xa94>)
1000228e:	6992      	ldr	r2, [r2, #24]
10002290:	4949      	ldr	r1, [pc, #292]	; (100023b8 <bit_init_mode+0xaa0>)
10002292:	400a      	ands	r2, r1
10002294:	619a      	str	r2, [r3, #24]
				PORT2->IOCR8 |= 0x00008000;
10002296:	4b45      	ldr	r3, [pc, #276]	; (100023ac <bit_init_mode+0xa94>)
10002298:	4a44      	ldr	r2, [pc, #272]	; (100023ac <bit_init_mode+0xa94>)
1000229a:	6992      	ldr	r2, [r2, #24]
1000229c:	2180      	movs	r1, #128	; 0x80
1000229e:	0209      	lsls	r1, r1, #8
100022a0:	430a      	orrs	r2, r1
100022a2:	619a      	str	r2, [r3, #24]
100022a4:	e038      	b.n	10002318 <bit_init_mode+0xa00>
			} else if (direction == INP) {
100022a6:	1d7b      	adds	r3, r7, #5
100022a8:	781b      	ldrb	r3, [r3, #0]
100022aa:	2b00      	cmp	r3, #0
100022ac:	d134      	bne.n	10002318 <bit_init_mode+0xa00>
				CLR_BIT(PORT2->PDISC,9); // digital Pad aktiv
100022ae:	4b3f      	ldr	r3, [pc, #252]	; (100023ac <bit_init_mode+0xa94>)
100022b0:	4a3e      	ldr	r2, [pc, #248]	; (100023ac <bit_init_mode+0xa94>)
100022b2:	6e12      	ldr	r2, [r2, #96]	; 0x60
100022b4:	493f      	ldr	r1, [pc, #252]	; (100023b4 <bit_init_mode+0xa9c>)
100022b6:	400a      	ands	r2, r1
100022b8:	661a      	str	r2, [r3, #96]	; 0x60
				if (mode==PULLUP) {
100022ba:	1d3b      	adds	r3, r7, #4
100022bc:	781b      	ldrb	r3, [r3, #0]
100022be:	2b01      	cmp	r3, #1
100022c0:	d10d      	bne.n	100022de <bit_init_mode+0x9c6>
					PORT2->IOCR8 &= 0xFFFF00FF;
100022c2:	4b3a      	ldr	r3, [pc, #232]	; (100023ac <bit_init_mode+0xa94>)
100022c4:	4a39      	ldr	r2, [pc, #228]	; (100023ac <bit_init_mode+0xa94>)
100022c6:	6992      	ldr	r2, [r2, #24]
100022c8:	493b      	ldr	r1, [pc, #236]	; (100023b8 <bit_init_mode+0xaa0>)
100022ca:	400a      	ands	r2, r1
100022cc:	619a      	str	r2, [r3, #24]
					PORT2->IOCR8 |= 0x00001000;
100022ce:	4b37      	ldr	r3, [pc, #220]	; (100023ac <bit_init_mode+0xa94>)
100022d0:	4a36      	ldr	r2, [pc, #216]	; (100023ac <bit_init_mode+0xa94>)
100022d2:	6992      	ldr	r2, [r2, #24]
100022d4:	2180      	movs	r1, #128	; 0x80
100022d6:	0149      	lsls	r1, r1, #5
100022d8:	430a      	orrs	r2, r1
100022da:	619a      	str	r2, [r3, #24]
100022dc:	e01c      	b.n	10002318 <bit_init_mode+0xa00>
				} else if (mode==PULLDOWN) {
100022de:	1d3b      	adds	r3, r7, #4
100022e0:	781b      	ldrb	r3, [r3, #0]
100022e2:	2b02      	cmp	r3, #2
100022e4:	d10d      	bne.n	10002302 <bit_init_mode+0x9ea>
					PORT2->IOCR8 &= 0xFFFF00FF;
100022e6:	4b31      	ldr	r3, [pc, #196]	; (100023ac <bit_init_mode+0xa94>)
100022e8:	4a30      	ldr	r2, [pc, #192]	; (100023ac <bit_init_mode+0xa94>)
100022ea:	6992      	ldr	r2, [r2, #24]
100022ec:	4932      	ldr	r1, [pc, #200]	; (100023b8 <bit_init_mode+0xaa0>)
100022ee:	400a      	ands	r2, r1
100022f0:	619a      	str	r2, [r3, #24]
					PORT2->IOCR8 |= 0x00000800;
100022f2:	4b2e      	ldr	r3, [pc, #184]	; (100023ac <bit_init_mode+0xa94>)
100022f4:	4a2d      	ldr	r2, [pc, #180]	; (100023ac <bit_init_mode+0xa94>)
100022f6:	6992      	ldr	r2, [r2, #24]
100022f8:	2180      	movs	r1, #128	; 0x80
100022fa:	0109      	lsls	r1, r1, #4
100022fc:	430a      	orrs	r2, r1
100022fe:	619a      	str	r2, [r3, #24]
10002300:	e00a      	b.n	10002318 <bit_init_mode+0xa00>
				} else if (mode == ANALOG) {
10002302:	1d3b      	adds	r3, r7, #4
10002304:	781b      	ldrb	r3, [r3, #0]
10002306:	2b03      	cmp	r3, #3
10002308:	d106      	bne.n	10002318 <bit_init_mode+0xa00>
					SET_BIT(PORT2->PDISC,9); //Analog Modus aktiv
1000230a:	4b28      	ldr	r3, [pc, #160]	; (100023ac <bit_init_mode+0xa94>)
1000230c:	4a27      	ldr	r2, [pc, #156]	; (100023ac <bit_init_mode+0xa94>)
1000230e:	6e12      	ldr	r2, [r2, #96]	; 0x60
10002310:	2180      	movs	r1, #128	; 0x80
10002312:	0089      	lsls	r1, r1, #2
10002314:	430a      	orrs	r2, r1
10002316:	661a      	str	r2, [r3, #96]	; 0x60
				}
			}
		 }
		 if (bitnr == 10) { //P2.10
10002318:	1dbb      	adds	r3, r7, #6
1000231a:	781b      	ldrb	r3, [r3, #0]
1000231c:	2b0a      	cmp	r3, #10
1000231e:	d15c      	bne.n	100023da <bit_init_mode+0xac2>
			 if (direction == OUTP) {
10002320:	1d7b      	adds	r3, r7, #5
10002322:	781b      	ldrb	r3, [r3, #0]
10002324:	2b01      	cmp	r3, #1
10002326:	d113      	bne.n	10002350 <bit_init_mode+0xa38>
				 CLR_BIT(PORT2->PDISC,10); // digital Pad aktiv
10002328:	4b20      	ldr	r3, [pc, #128]	; (100023ac <bit_init_mode+0xa94>)
1000232a:	4a20      	ldr	r2, [pc, #128]	; (100023ac <bit_init_mode+0xa94>)
1000232c:	6e12      	ldr	r2, [r2, #96]	; 0x60
1000232e:	4923      	ldr	r1, [pc, #140]	; (100023bc <bit_init_mode+0xaa4>)
10002330:	400a      	ands	r2, r1
10002332:	661a      	str	r2, [r3, #96]	; 0x60
				 PORT2->IOCR8 &= 0xff00ffff;
10002334:	4b1d      	ldr	r3, [pc, #116]	; (100023ac <bit_init_mode+0xa94>)
10002336:	4a1d      	ldr	r2, [pc, #116]	; (100023ac <bit_init_mode+0xa94>)
10002338:	6992      	ldr	r2, [r2, #24]
1000233a:	4921      	ldr	r1, [pc, #132]	; (100023c0 <bit_init_mode+0xaa8>)
1000233c:	400a      	ands	r2, r1
1000233e:	619a      	str	r2, [r3, #24]
				 PORT2->IOCR8 |= 0x00800000;
10002340:	4b1a      	ldr	r3, [pc, #104]	; (100023ac <bit_init_mode+0xa94>)
10002342:	4a1a      	ldr	r2, [pc, #104]	; (100023ac <bit_init_mode+0xa94>)
10002344:	6992      	ldr	r2, [r2, #24]
10002346:	2180      	movs	r1, #128	; 0x80
10002348:	0409      	lsls	r1, r1, #16
1000234a:	430a      	orrs	r2, r1
1000234c:	619a      	str	r2, [r3, #24]
1000234e:	e044      	b.n	100023da <bit_init_mode+0xac2>
			 } else if (direction == INP) {
10002350:	1d7b      	adds	r3, r7, #5
10002352:	781b      	ldrb	r3, [r3, #0]
10002354:	2b00      	cmp	r3, #0
10002356:	d140      	bne.n	100023da <bit_init_mode+0xac2>
				 CLR_BIT(PORT2->PDISC,10); // digital Pad aktiv
10002358:	4b14      	ldr	r3, [pc, #80]	; (100023ac <bit_init_mode+0xa94>)
1000235a:	4a14      	ldr	r2, [pc, #80]	; (100023ac <bit_init_mode+0xa94>)
1000235c:	6e12      	ldr	r2, [r2, #96]	; 0x60
1000235e:	4917      	ldr	r1, [pc, #92]	; (100023bc <bit_init_mode+0xaa4>)
10002360:	400a      	ands	r2, r1
10002362:	661a      	str	r2, [r3, #96]	; 0x60
				 if (mode==PULLUP) {
10002364:	1d3b      	adds	r3, r7, #4
10002366:	781b      	ldrb	r3, [r3, #0]
10002368:	2b01      	cmp	r3, #1
1000236a:	d10d      	bne.n	10002388 <bit_init_mode+0xa70>
					 PORT2->IOCR8 &= 0xFF00FFFF;
1000236c:	4b0f      	ldr	r3, [pc, #60]	; (100023ac <bit_init_mode+0xa94>)
1000236e:	4a0f      	ldr	r2, [pc, #60]	; (100023ac <bit_init_mode+0xa94>)
10002370:	6992      	ldr	r2, [r2, #24]
10002372:	4913      	ldr	r1, [pc, #76]	; (100023c0 <bit_init_mode+0xaa8>)
10002374:	400a      	ands	r2, r1
10002376:	619a      	str	r2, [r3, #24]
					 PORT2->IOCR8 |= 0x00100000;
10002378:	4b0c      	ldr	r3, [pc, #48]	; (100023ac <bit_init_mode+0xa94>)
1000237a:	4a0c      	ldr	r2, [pc, #48]	; (100023ac <bit_init_mode+0xa94>)
1000237c:	6992      	ldr	r2, [r2, #24]
1000237e:	2180      	movs	r1, #128	; 0x80
10002380:	0349      	lsls	r1, r1, #13
10002382:	430a      	orrs	r2, r1
10002384:	619a      	str	r2, [r3, #24]
10002386:	e028      	b.n	100023da <bit_init_mode+0xac2>
				 } else if (mode==PULLDOWN) {
10002388:	1d3b      	adds	r3, r7, #4
1000238a:	781b      	ldrb	r3, [r3, #0]
1000238c:	2b02      	cmp	r3, #2
1000238e:	d119      	bne.n	100023c4 <bit_init_mode+0xaac>
					 PORT2->IOCR8 &= 0xFF00FFFF;
10002390:	4b06      	ldr	r3, [pc, #24]	; (100023ac <bit_init_mode+0xa94>)
10002392:	4a06      	ldr	r2, [pc, #24]	; (100023ac <bit_init_mode+0xa94>)
10002394:	6992      	ldr	r2, [r2, #24]
10002396:	490a      	ldr	r1, [pc, #40]	; (100023c0 <bit_init_mode+0xaa8>)
10002398:	400a      	ands	r2, r1
1000239a:	619a      	str	r2, [r3, #24]
					 PORT2->IOCR8 |= 0x00080000;
1000239c:	4b03      	ldr	r3, [pc, #12]	; (100023ac <bit_init_mode+0xa94>)
1000239e:	4a03      	ldr	r2, [pc, #12]	; (100023ac <bit_init_mode+0xa94>)
100023a0:	6992      	ldr	r2, [r2, #24]
100023a2:	2180      	movs	r1, #128	; 0x80
100023a4:	0309      	lsls	r1, r1, #12
100023a6:	430a      	orrs	r2, r1
100023a8:	619a      	str	r2, [r3, #24]
100023aa:	e016      	b.n	100023da <bit_init_mode+0xac2>
100023ac:	40040200 	.word	0x40040200
100023b0:	fffffeff 	.word	0xfffffeff
100023b4:	fffffdff 	.word	0xfffffdff
100023b8:	ffff00ff 	.word	0xffff00ff
100023bc:	fffffbff 	.word	0xfffffbff
100023c0:	ff00ffff 	.word	0xff00ffff
				 } else if (mode == ANALOG) {
100023c4:	1d3b      	adds	r3, r7, #4
100023c6:	781b      	ldrb	r3, [r3, #0]
100023c8:	2b03      	cmp	r3, #3
100023ca:	d106      	bne.n	100023da <bit_init_mode+0xac2>
					 SET_BIT(PORT2->PDISC,10); //Analog Modus aktiv
100023cc:	4b2f      	ldr	r3, [pc, #188]	; (1000248c <bit_init_mode+0xb74>)
100023ce:	4a2f      	ldr	r2, [pc, #188]	; (1000248c <bit_init_mode+0xb74>)
100023d0:	6e12      	ldr	r2, [r2, #96]	; 0x60
100023d2:	2180      	movs	r1, #128	; 0x80
100023d4:	00c9      	lsls	r1, r1, #3
100023d6:	430a      	orrs	r2, r1
100023d8:	661a      	str	r2, [r3, #96]	; 0x60
				 }
			 }
		 }
		 if (bitnr == 11) { //P2.11
100023da:	1dbb      	adds	r3, r7, #6
100023dc:	781b      	ldrb	r3, [r3, #0]
100023de:	2b0b      	cmp	r3, #11
100023e0:	d150      	bne.n	10002484 <bit_init_mode+0xb6c>
			if (direction == OUTP) {
100023e2:	1d7b      	adds	r3, r7, #5
100023e4:	781b      	ldrb	r3, [r3, #0]
100023e6:	2b01      	cmp	r3, #1
100023e8:	d113      	bne.n	10002412 <bit_init_mode+0xafa>
				CLR_BIT(PORT2->PDISC,11); // digital Pad aktiv
100023ea:	4b28      	ldr	r3, [pc, #160]	; (1000248c <bit_init_mode+0xb74>)
100023ec:	4a27      	ldr	r2, [pc, #156]	; (1000248c <bit_init_mode+0xb74>)
100023ee:	6e12      	ldr	r2, [r2, #96]	; 0x60
100023f0:	4927      	ldr	r1, [pc, #156]	; (10002490 <bit_init_mode+0xb78>)
100023f2:	400a      	ands	r2, r1
100023f4:	661a      	str	r2, [r3, #96]	; 0x60
				PORT2->IOCR8 &= 0x00ffffff;
100023f6:	4b25      	ldr	r3, [pc, #148]	; (1000248c <bit_init_mode+0xb74>)
100023f8:	4a24      	ldr	r2, [pc, #144]	; (1000248c <bit_init_mode+0xb74>)
100023fa:	6992      	ldr	r2, [r2, #24]
100023fc:	0212      	lsls	r2, r2, #8
100023fe:	0a12      	lsrs	r2, r2, #8
10002400:	619a      	str	r2, [r3, #24]
				PORT2->IOCR8 |= 0x80000000;
10002402:	4b22      	ldr	r3, [pc, #136]	; (1000248c <bit_init_mode+0xb74>)
10002404:	4a21      	ldr	r2, [pc, #132]	; (1000248c <bit_init_mode+0xb74>)
10002406:	6992      	ldr	r2, [r2, #24]
10002408:	2180      	movs	r1, #128	; 0x80
1000240a:	0609      	lsls	r1, r1, #24
1000240c:	430a      	orrs	r2, r1
1000240e:	619a      	str	r2, [r3, #24]
10002410:	e038      	b.n	10002484 <bit_init_mode+0xb6c>
			} else if (direction == INP) {
10002412:	1d7b      	adds	r3, r7, #5
10002414:	781b      	ldrb	r3, [r3, #0]
10002416:	2b00      	cmp	r3, #0
10002418:	d134      	bne.n	10002484 <bit_init_mode+0xb6c>
				CLR_BIT(PORT2->PDISC,11); // digital Pad aktiv
1000241a:	4b1c      	ldr	r3, [pc, #112]	; (1000248c <bit_init_mode+0xb74>)
1000241c:	4a1b      	ldr	r2, [pc, #108]	; (1000248c <bit_init_mode+0xb74>)
1000241e:	6e12      	ldr	r2, [r2, #96]	; 0x60
10002420:	491b      	ldr	r1, [pc, #108]	; (10002490 <bit_init_mode+0xb78>)
10002422:	400a      	ands	r2, r1
10002424:	661a      	str	r2, [r3, #96]	; 0x60
				if (mode==PULLUP) {
10002426:	1d3b      	adds	r3, r7, #4
10002428:	781b      	ldrb	r3, [r3, #0]
1000242a:	2b01      	cmp	r3, #1
1000242c:	d10d      	bne.n	1000244a <bit_init_mode+0xb32>
					PORT2->IOCR8 &= 0x00FFFFFF;
1000242e:	4b17      	ldr	r3, [pc, #92]	; (1000248c <bit_init_mode+0xb74>)
10002430:	4a16      	ldr	r2, [pc, #88]	; (1000248c <bit_init_mode+0xb74>)
10002432:	6992      	ldr	r2, [r2, #24]
10002434:	0212      	lsls	r2, r2, #8
10002436:	0a12      	lsrs	r2, r2, #8
10002438:	619a      	str	r2, [r3, #24]
					PORT2->IOCR8 |= 0x10000000;
1000243a:	4b14      	ldr	r3, [pc, #80]	; (1000248c <bit_init_mode+0xb74>)
1000243c:	4a13      	ldr	r2, [pc, #76]	; (1000248c <bit_init_mode+0xb74>)
1000243e:	6992      	ldr	r2, [r2, #24]
10002440:	2180      	movs	r1, #128	; 0x80
10002442:	0549      	lsls	r1, r1, #21
10002444:	430a      	orrs	r2, r1
10002446:	619a      	str	r2, [r3, #24]
10002448:	e01c      	b.n	10002484 <bit_init_mode+0xb6c>
				} else if (mode==PULLDOWN) {
1000244a:	1d3b      	adds	r3, r7, #4
1000244c:	781b      	ldrb	r3, [r3, #0]
1000244e:	2b02      	cmp	r3, #2
10002450:	d10d      	bne.n	1000246e <bit_init_mode+0xb56>
					PORT2->IOCR8 &= 0x00FFFFFF;
10002452:	4b0e      	ldr	r3, [pc, #56]	; (1000248c <bit_init_mode+0xb74>)
10002454:	4a0d      	ldr	r2, [pc, #52]	; (1000248c <bit_init_mode+0xb74>)
10002456:	6992      	ldr	r2, [r2, #24]
10002458:	0212      	lsls	r2, r2, #8
1000245a:	0a12      	lsrs	r2, r2, #8
1000245c:	619a      	str	r2, [r3, #24]
					PORT2->IOCR8 |= 0x08000000;
1000245e:	4b0b      	ldr	r3, [pc, #44]	; (1000248c <bit_init_mode+0xb74>)
10002460:	4a0a      	ldr	r2, [pc, #40]	; (1000248c <bit_init_mode+0xb74>)
10002462:	6992      	ldr	r2, [r2, #24]
10002464:	2180      	movs	r1, #128	; 0x80
10002466:	0509      	lsls	r1, r1, #20
10002468:	430a      	orrs	r2, r1
1000246a:	619a      	str	r2, [r3, #24]
1000246c:	e00a      	b.n	10002484 <bit_init_mode+0xb6c>
				} else if (mode == ANALOG) {
1000246e:	1d3b      	adds	r3, r7, #4
10002470:	781b      	ldrb	r3, [r3, #0]
10002472:	2b03      	cmp	r3, #3
10002474:	d106      	bne.n	10002484 <bit_init_mode+0xb6c>
					SET_BIT(PORT2->PDISC,11); //Analog Modus aktiv
10002476:	4b05      	ldr	r3, [pc, #20]	; (1000248c <bit_init_mode+0xb74>)
10002478:	4a04      	ldr	r2, [pc, #16]	; (1000248c <bit_init_mode+0xb74>)
1000247a:	6e12      	ldr	r2, [r2, #96]	; 0x60
1000247c:	2180      	movs	r1, #128	; 0x80
1000247e:	0109      	lsls	r1, r1, #4
10002480:	430a      	orrs	r2, r1
10002482:	661a      	str	r2, [r3, #96]	; 0x60
				}
			}
		 }
		 break;
10002484:	46c0      	nop			; (mov r8, r8)
	}
}
10002486:	46bd      	mov	sp, r7
10002488:	b002      	add	sp, #8
1000248a:	bdb0      	pop	{r4, r5, r7, pc}
1000248c:	40040200 	.word	0x40040200
10002490:	fffff7ff 	.word	0xfffff7ff

10002494 <bit_read>:
//---------------------------------------------------------------
// Einzelnes Portbit einlesen
// port: P0,P1,P2 bitnr: 0..15
//---------------------------------------------------------------
uint8_t bit_read(uint8_t port, uint8_t bitnr)
{
10002494:	b590      	push	{r4, r7, lr}
10002496:	b085      	sub	sp, #20
10002498:	af00      	add	r7, sp, #0
1000249a:	1c02      	adds	r2, r0, #0
1000249c:	1dfb      	adds	r3, r7, #7
1000249e:	701a      	strb	r2, [r3, #0]
100024a0:	1dbb      	adds	r3, r7, #6
100024a2:	1c0a      	adds	r2, r1, #0
100024a4:	701a      	strb	r2, [r3, #0]
  uint16_t temp;

  temp = port_read(port);
100024a6:	230e      	movs	r3, #14
100024a8:	18fc      	adds	r4, r7, r3
100024aa:	1dfb      	adds	r3, r7, #7
100024ac:	781b      	ldrb	r3, [r3, #0]
100024ae:	1c18      	adds	r0, r3, #0
100024b0:	f000 f8a0 	bl	100025f4 <port_read>
100024b4:	1c03      	adds	r3, r0, #0
100024b6:	8023      	strh	r3, [r4, #0]
  return ((temp>>bitnr) & 0x01);
100024b8:	230e      	movs	r3, #14
100024ba:	18fb      	adds	r3, r7, r3
100024bc:	881a      	ldrh	r2, [r3, #0]
100024be:	1dbb      	adds	r3, r7, #6
100024c0:	781b      	ldrb	r3, [r3, #0]
100024c2:	411a      	asrs	r2, r3
100024c4:	1c13      	adds	r3, r2, #0
100024c6:	b2db      	uxtb	r3, r3
100024c8:	2201      	movs	r2, #1
100024ca:	4013      	ands	r3, r2
100024cc:	b2db      	uxtb	r3, r3
}
100024ce:	1c18      	adds	r0, r3, #0
100024d0:	46bd      	mov	sp, r7
100024d2:	b005      	add	sp, #20
100024d4:	bd90      	pop	{r4, r7, pc}
100024d6:	46c0      	nop			; (mov r8, r8)

100024d8 <bit_write>:
//---------------------------------------------------------------
// Einzelnes Portbit ausgeben
// port: P0,P1 bitnr: 0..15 P2=>bitnr 9..11
//---------------------------------------------------------------
void bit_write(uint8_t port, uint8_t bitnr, uint8_t value)
{
100024d8:	b590      	push	{r4, r7, lr}
100024da:	b083      	sub	sp, #12
100024dc:	af00      	add	r7, sp, #0
100024de:	1c04      	adds	r4, r0, #0
100024e0:	1c08      	adds	r0, r1, #0
100024e2:	1c11      	adds	r1, r2, #0
100024e4:	1dfb      	adds	r3, r7, #7
100024e6:	1c22      	adds	r2, r4, #0
100024e8:	701a      	strb	r2, [r3, #0]
100024ea:	1dbb      	adds	r3, r7, #6
100024ec:	1c02      	adds	r2, r0, #0
100024ee:	701a      	strb	r2, [r3, #0]
100024f0:	1d7b      	adds	r3, r7, #5
100024f2:	1c0a      	adds	r2, r1, #0
100024f4:	701a      	strb	r2, [r3, #0]
	//uint32_t temp;
	value &= 0x01;       // value darf nur 0 oder 1 sein!
100024f6:	1d7b      	adds	r3, r7, #5
100024f8:	1d7a      	adds	r2, r7, #5
100024fa:	7812      	ldrb	r2, [r2, #0]
100024fc:	2101      	movs	r1, #1
100024fe:	400a      	ands	r2, r1
10002500:	701a      	strb	r2, [r3, #0]
	switch (port)
10002502:	1dfb      	adds	r3, r7, #7
10002504:	781b      	ldrb	r3, [r3, #0]
10002506:	2b01      	cmp	r3, #1
10002508:	d035      	beq.n	10002576 <bit_write+0x9e>
1000250a:	2b02      	cmp	r3, #2
1000250c:	d04e      	beq.n	100025ac <bit_write+0xd4>
1000250e:	2b00      	cmp	r3, #0
10002510:	d167      	bne.n	100025e2 <bit_write+0x10a>
	{
		case 0 :
			if (value == 1) {
10002512:	1d7b      	adds	r3, r7, #5
10002514:	781b      	ldrb	r3, [r3, #0]
10002516:	2b01      	cmp	r3, #1
10002518:	d116      	bne.n	10002548 <bit_write+0x70>
				//PORT0->OUT |= 1UL << bitnr ;
				PORT0->OMR &= ~(1UL << (bitnr + 16)); // loeschen des Bits
1000251a:	4b33      	ldr	r3, [pc, #204]	; (100025e8 <bit_write+0x110>)
1000251c:	4a32      	ldr	r2, [pc, #200]	; (100025e8 <bit_write+0x110>)
1000251e:	6852      	ldr	r2, [r2, #4]
10002520:	1db9      	adds	r1, r7, #6
10002522:	7809      	ldrb	r1, [r1, #0]
10002524:	3110      	adds	r1, #16
10002526:	2001      	movs	r0, #1
10002528:	4088      	lsls	r0, r1
1000252a:	1c01      	adds	r1, r0, #0
1000252c:	43c9      	mvns	r1, r1
1000252e:	400a      	ands	r2, r1
10002530:	605a      	str	r2, [r3, #4]
				PORT0->OMR |= 1UL << bitnr;      // setzen
10002532:	4b2d      	ldr	r3, [pc, #180]	; (100025e8 <bit_write+0x110>)
10002534:	4a2c      	ldr	r2, [pc, #176]	; (100025e8 <bit_write+0x110>)
10002536:	6851      	ldr	r1, [r2, #4]
10002538:	1dba      	adds	r2, r7, #6
1000253a:	7812      	ldrb	r2, [r2, #0]
1000253c:	2001      	movs	r0, #1
1000253e:	4090      	lsls	r0, r2
10002540:	1c02      	adds	r2, r0, #0
10002542:	430a      	orrs	r2, r1
10002544:	605a      	str	r2, [r3, #4]
				//temp = PORT0->OMR;
				//temp &= ~(1UL << bitnr);      // Set = 0
				//temp |= 1UL << (bitnr + 16); // Reset = 0
				//PORT0->OMR = temp;
			}
			break;
10002546:	e04c      	b.n	100025e2 <bit_write+0x10a>
				//temp |= 1UL << bitnr;      // setzen
				//PORT0->OMR = temp;
			}
			else {
				//PORT0->OUT &= ~( 1UL << bitnr);
				PORT0->OMR &= ~(1UL << bitnr);      // Set = 0
10002548:	4b27      	ldr	r3, [pc, #156]	; (100025e8 <bit_write+0x110>)
1000254a:	4a27      	ldr	r2, [pc, #156]	; (100025e8 <bit_write+0x110>)
1000254c:	6852      	ldr	r2, [r2, #4]
1000254e:	1db9      	adds	r1, r7, #6
10002550:	7809      	ldrb	r1, [r1, #0]
10002552:	2001      	movs	r0, #1
10002554:	4088      	lsls	r0, r1
10002556:	1c01      	adds	r1, r0, #0
10002558:	43c9      	mvns	r1, r1
1000255a:	400a      	ands	r2, r1
1000255c:	605a      	str	r2, [r3, #4]
				PORT0->OMR |= 1UL << (bitnr + 16); // Reset = 0
1000255e:	4b22      	ldr	r3, [pc, #136]	; (100025e8 <bit_write+0x110>)
10002560:	4a21      	ldr	r2, [pc, #132]	; (100025e8 <bit_write+0x110>)
10002562:	6851      	ldr	r1, [r2, #4]
10002564:	1dba      	adds	r2, r7, #6
10002566:	7812      	ldrb	r2, [r2, #0]
10002568:	3210      	adds	r2, #16
1000256a:	2001      	movs	r0, #1
1000256c:	4090      	lsls	r0, r2
1000256e:	1c02      	adds	r2, r0, #0
10002570:	430a      	orrs	r2, r1
10002572:	605a      	str	r2, [r3, #4]
				//temp = PORT0->OMR;
				//temp &= ~(1UL << bitnr);      // Set = 0
				//temp |= 1UL << (bitnr + 16); // Reset = 0
				//PORT0->OMR = temp;
			}
			break;
10002574:	e035      	b.n	100025e2 <bit_write+0x10a>
	    case 1 :
	  	  	  {if (value == 1) PORT1->OUT |= 1UL << bitnr ;
10002576:	1d7b      	adds	r3, r7, #5
10002578:	781b      	ldrb	r3, [r3, #0]
1000257a:	2b01      	cmp	r3, #1
1000257c:	d10a      	bne.n	10002594 <bit_write+0xbc>
1000257e:	4b1b      	ldr	r3, [pc, #108]	; (100025ec <bit_write+0x114>)
10002580:	4a1a      	ldr	r2, [pc, #104]	; (100025ec <bit_write+0x114>)
10002582:	6811      	ldr	r1, [r2, #0]
10002584:	1dba      	adds	r2, r7, #6
10002586:	7812      	ldrb	r2, [r2, #0]
10002588:	2001      	movs	r0, #1
1000258a:	4090      	lsls	r0, r2
1000258c:	1c02      	adds	r2, r0, #0
1000258e:	430a      	orrs	r2, r1
10002590:	601a      	str	r2, [r3, #0]
	  		   else PORT1->OUT &= ~( 1UL << bitnr);
	  		  }
			break;
10002592:	e026      	b.n	100025e2 <bit_write+0x10a>
				//PORT0->OMR = temp;
			}
			break;
	    case 1 :
	  	  	  {if (value == 1) PORT1->OUT |= 1UL << bitnr ;
	  		   else PORT1->OUT &= ~( 1UL << bitnr);
10002594:	4b15      	ldr	r3, [pc, #84]	; (100025ec <bit_write+0x114>)
10002596:	4a15      	ldr	r2, [pc, #84]	; (100025ec <bit_write+0x114>)
10002598:	6812      	ldr	r2, [r2, #0]
1000259a:	1db9      	adds	r1, r7, #6
1000259c:	7809      	ldrb	r1, [r1, #0]
1000259e:	2001      	movs	r0, #1
100025a0:	4088      	lsls	r0, r1
100025a2:	1c01      	adds	r1, r0, #0
100025a4:	43c9      	mvns	r1, r1
100025a6:	400a      	ands	r2, r1
100025a8:	601a      	str	r2, [r3, #0]
	  		  }
			break;
100025aa:	e01a      	b.n	100025e2 <bit_write+0x10a>

	    case 2 :
			  {if (value == 1) PORT2->OUT |= 1UL << bitnr ;
100025ac:	1d7b      	adds	r3, r7, #5
100025ae:	781b      	ldrb	r3, [r3, #0]
100025b0:	2b01      	cmp	r3, #1
100025b2:	d10a      	bne.n	100025ca <bit_write+0xf2>
100025b4:	4b0e      	ldr	r3, [pc, #56]	; (100025f0 <bit_write+0x118>)
100025b6:	4a0e      	ldr	r2, [pc, #56]	; (100025f0 <bit_write+0x118>)
100025b8:	6811      	ldr	r1, [r2, #0]
100025ba:	1dba      	adds	r2, r7, #6
100025bc:	7812      	ldrb	r2, [r2, #0]
100025be:	2001      	movs	r0, #1
100025c0:	4090      	lsls	r0, r2
100025c2:	1c02      	adds	r2, r0, #0
100025c4:	430a      	orrs	r2, r1
100025c6:	601a      	str	r2, [r3, #0]
100025c8:	e00a      	b.n	100025e0 <bit_write+0x108>
			   else PORT2->OUT &= ~( 1UL << bitnr);
100025ca:	4b09      	ldr	r3, [pc, #36]	; (100025f0 <bit_write+0x118>)
100025cc:	4a08      	ldr	r2, [pc, #32]	; (100025f0 <bit_write+0x118>)
100025ce:	6812      	ldr	r2, [r2, #0]
100025d0:	1db9      	adds	r1, r7, #6
100025d2:	7809      	ldrb	r1, [r1, #0]
100025d4:	2001      	movs	r0, #1
100025d6:	4088      	lsls	r0, r1
100025d8:	1c01      	adds	r1, r0, #0
100025da:	43c9      	mvns	r1, r1
100025dc:	400a      	ands	r2, r1
100025de:	601a      	str	r2, [r3, #0]
			  }
			break;
100025e0:	46c0      	nop			; (mov r8, r8)
		}
 }
100025e2:	46bd      	mov	sp, r7
100025e4:	b003      	add	sp, #12
100025e6:	bd90      	pop	{r4, r7, pc}
100025e8:	40040000 	.word	0x40040000
100025ec:	40040100 	.word	0x40040100
100025f0:	40040200 	.word	0x40040200

100025f4 <port_read>:
//---------------------------------------------------------------
// Gesamtes Port einlesen
// port: P0,P1,P2
//---------------------------------------------------------------
uint16_t port_read (uint8_t port)
{
100025f4:	b580      	push	{r7, lr}
100025f6:	b084      	sub	sp, #16
100025f8:	af00      	add	r7, sp, #0
100025fa:	1c02      	adds	r2, r0, #0
100025fc:	1dfb      	adds	r3, r7, #7
100025fe:	701a      	strb	r2, [r3, #0]
	uint16_t temp;
  switch (port)
10002600:	1dfb      	adds	r3, r7, #7
10002602:	781b      	ldrb	r3, [r3, #0]
10002604:	2b01      	cmp	r3, #1
10002606:	d00c      	beq.n	10002622 <port_read+0x2e>
10002608:	2b02      	cmp	r3, #2
1000260a:	d013      	beq.n	10002634 <port_read+0x40>
1000260c:	2b00      	cmp	r3, #0
1000260e:	d11a      	bne.n	10002646 <port_read+0x52>
  {
    case 0: temp = PORT0->IN; return temp; break;
10002610:	4b0f      	ldr	r3, [pc, #60]	; (10002650 <port_read+0x5c>)
10002612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10002614:	230e      	movs	r3, #14
10002616:	18fb      	adds	r3, r7, r3
10002618:	801a      	strh	r2, [r3, #0]
1000261a:	230e      	movs	r3, #14
1000261c:	18fb      	adds	r3, r7, r3
1000261e:	881b      	ldrh	r3, [r3, #0]
10002620:	e012      	b.n	10002648 <port_read+0x54>
    case 1: temp = PORT1->IN; return temp; break;
10002622:	4b0c      	ldr	r3, [pc, #48]	; (10002654 <port_read+0x60>)
10002624:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10002626:	230e      	movs	r3, #14
10002628:	18fb      	adds	r3, r7, r3
1000262a:	801a      	strh	r2, [r3, #0]
1000262c:	230e      	movs	r3, #14
1000262e:	18fb      	adds	r3, r7, r3
10002630:	881b      	ldrh	r3, [r3, #0]
10002632:	e009      	b.n	10002648 <port_read+0x54>
    case 2: temp = PORT2->IN; return temp; break;
10002634:	4b08      	ldr	r3, [pc, #32]	; (10002658 <port_read+0x64>)
10002636:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10002638:	230e      	movs	r3, #14
1000263a:	18fb      	adds	r3, r7, r3
1000263c:	801a      	strh	r2, [r3, #0]
1000263e:	230e      	movs	r3, #14
10002640:	18fb      	adds	r3, r7, r3
10002642:	881b      	ldrh	r3, [r3, #0]
10002644:	e000      	b.n	10002648 <port_read+0x54>
    default: return 0; break;
10002646:	2300      	movs	r3, #0
  }
  //return 0;
}
10002648:	1c18      	adds	r0, r3, #0
1000264a:	46bd      	mov	sp, r7
1000264c:	b004      	add	sp, #16
1000264e:	bd80      	pop	{r7, pc}
10002650:	40040000 	.word	0x40040000
10002654:	40040100 	.word	0x40040100
10002658:	40040200 	.word	0x40040200

1000265c <clock_init>:
//#define periode_pwm 0xffff // max 16-Bit-Periode


//------- Takt für 8-Bit- und 16-Bit-Funktionen PWM --------------------------------
void clock_init(void)
{
1000265c:	b580      	push	{r7, lr}
1000265e:	af00      	add	r7, sp, #0
	SCU_GENERAL->PASSWD = 0x000000C0UL;
10002660:	4b15      	ldr	r3, [pc, #84]	; (100026b8 <clock_init+0x5c>)
10002662:	22c0      	movs	r2, #192	; 0xc0
10002664:	625a      	str	r2, [r3, #36]	; 0x24
	SCU_CLK->CLKCR = 0x3FF10100;			// Config SCU Clock = 32MHz , PCLK = 64 MHz
10002666:	4b15      	ldr	r3, [pc, #84]	; (100026bc <clock_init+0x60>)
10002668:	4a15      	ldr	r2, [pc, #84]	; (100026c0 <clock_init+0x64>)
1000266a:	601a      	str	r2, [r3, #0]
	while((SCU_CLK->CLKCR)&0x40000000UL);	// wait for VDDC to stabilize
1000266c:	46c0      	nop			; (mov r8, r8)
1000266e:	4b13      	ldr	r3, [pc, #76]	; (100026bc <clock_init+0x60>)
10002670:	681a      	ldr	r2, [r3, #0]
10002672:	2380      	movs	r3, #128	; 0x80
10002674:	05db      	lsls	r3, r3, #23
10002676:	4013      	ands	r3, r2
10002678:	d1f9      	bne.n	1000266e <clock_init+0x12>
	SCU_GENERAL->PASSWD = 0x000000C3UL;
1000267a:	4b0f      	ldr	r3, [pc, #60]	; (100026b8 <clock_init+0x5c>)
1000267c:	22c3      	movs	r2, #195	; 0xc3
1000267e:	625a      	str	r2, [r3, #36]	; 0x24
	SCU_GENERAL->PASSWD = 0x000000C0UL;
10002680:	4b0d      	ldr	r3, [pc, #52]	; (100026b8 <clock_init+0x5c>)
10002682:	22c0      	movs	r2, #192	; 0xc0
10002684:	625a      	str	r2, [r3, #36]	; 0x24
	SCU_CLK->CGATCLR0 |= 0x04;				// Disable CCU4 Gating
10002686:	4b0d      	ldr	r3, [pc, #52]	; (100026bc <clock_init+0x60>)
10002688:	4a0c      	ldr	r2, [pc, #48]	; (100026bc <clock_init+0x60>)
1000268a:	6912      	ldr	r2, [r2, #16]
1000268c:	2104      	movs	r1, #4
1000268e:	430a      	orrs	r2, r1
10002690:	611a      	str	r2, [r3, #16]
	while((SCU_CLK->CLKCR)&0x40000000UL);	// wait for VDDC to stabilize
10002692:	46c0      	nop			; (mov r8, r8)
10002694:	4b09      	ldr	r3, [pc, #36]	; (100026bc <clock_init+0x60>)
10002696:	681a      	ldr	r2, [r3, #0]
10002698:	2380      	movs	r3, #128	; 0x80
1000269a:	05db      	lsls	r3, r3, #23
1000269c:	4013      	ands	r3, r2
1000269e:	d1f9      	bne.n	10002694 <clock_init+0x38>
	SCU_GENERAL->PASSWD = 0x000000C3UL;
100026a0:	4b05      	ldr	r3, [pc, #20]	; (100026b8 <clock_init+0x5c>)
100026a2:	22c3      	movs	r2, #195	; 0xc3
100026a4:	625a      	str	r2, [r3, #36]	; 0x24
	SCU_CLK->CGATSET0 |= 0xfff;				// Modul  Clock enable , all Modul's
100026a6:	4b05      	ldr	r3, [pc, #20]	; (100026bc <clock_init+0x60>)
100026a8:	4a04      	ldr	r2, [pc, #16]	; (100026bc <clock_init+0x60>)
100026aa:	68d2      	ldr	r2, [r2, #12]
100026ac:	4905      	ldr	r1, [pc, #20]	; (100026c4 <clock_init+0x68>)
100026ae:	430a      	orrs	r2, r1
100026b0:	60da      	str	r2, [r3, #12]
}
100026b2:	46bd      	mov	sp, r7
100026b4:	bd80      	pop	{r7, pc}
100026b6:	46c0      	nop			; (mov r8, r8)
100026b8:	40010000 	.word	0x40010000
100026bc:	40010300 	.word	0x40010300
100026c0:	3ff10100 	.word	0x3ff10100
100026c4:	00000fff 	.word	0x00000fff

100026c8 <pwm1_init>:
// PWM1-Ausgang P0.6 initialisieren (16-Bit),
// Hinweis: anschließend starten mit pwm1_start oder pwm1_start_interrupt
// eingestellte Periodendauer bei #define periode_pwm 50000
//----------------------------------------------------------------
void pwm1_init(void)
{
100026c8:	b580      	push	{r7, lr}
100026ca:	af00      	add	r7, sp, #0
	clock_init();
100026cc:	f7ff ffc6 	bl	1000265c <clock_init>
	SCU_GENERAL->CCUCON = 1;				// Enable CCU40
100026d0:	4b0f      	ldr	r3, [pc, #60]	; (10002710 <pwm1_init+0x48>)
100026d2:	2201      	movs	r2, #1
100026d4:	631a      	str	r2, [r3, #48]	; 0x30
	// CCU40 Init:
	CCU40->GIDLC = 0x10F; 					// Vorteiler enable,CCU4x enable
100026d6:	4b0f      	ldr	r3, [pc, #60]	; (10002714 <pwm1_init+0x4c>)
100026d8:	2210      	movs	r2, #16
100026da:	32ff      	adds	r2, #255	; 0xff
100026dc:	60da      	str	r2, [r3, #12]
	CCU40_CC40->TC = 4;  					// Shadow transfer enable on clear
100026de:	4b0e      	ldr	r3, [pc, #56]	; (10002718 <pwm1_init+0x50>)
100026e0:	2204      	movs	r2, #4
100026e2:	615a      	str	r2, [r3, #20]
	CCU40_CC40->PSC = 0x1;					// Vorteiler , hier 64Mhz/2
100026e4:	4b0c      	ldr	r3, [pc, #48]	; (10002718 <pwm1_init+0x50>)
100026e6:	2201      	movs	r2, #1
100026e8:	625a      	str	r2, [r3, #36]	; 0x24
	CCU40_CC40->PRS = periode_pwm; 			// Period Register set, hier ca. 640 Hz
100026ea:	4b0b      	ldr	r3, [pc, #44]	; (10002718 <pwm1_init+0x50>)
100026ec:	4a0b      	ldr	r2, [pc, #44]	; (1000271c <pwm1_init+0x54>)
100026ee:	635a      	str	r2, [r3, #52]	; 0x34

	// CCU40 Compare:  (Ausganspin P0.6)
	CCU40_CC40->CRS = 25000;				// Compare Wert,hier 1:1 Imp
100026f0:	4b09      	ldr	r3, [pc, #36]	; (10002718 <pwm1_init+0x50>)
100026f2:	4a0b      	ldr	r2, [pc, #44]	; (10002720 <pwm1_init+0x58>)
100026f4:	63da      	str	r2, [r3, #60]	; 0x3c
	CCU40->GCSS = 1; 						// Shadow transfer request slice 0
100026f6:	4b07      	ldr	r3, [pc, #28]	; (10002714 <pwm1_init+0x4c>)
100026f8:	2201      	movs	r2, #1
100026fa:	611a      	str	r2, [r3, #16]
	//PORT0->IOCR0 = 0xA0;					// Alt4=>OUT bei P0.0
	PORT0->IOCR4 |= 0xA0<<16;				// Alt4=>OUT bei P0.6
100026fc:	4b09      	ldr	r3, [pc, #36]	; (10002724 <pwm1_init+0x5c>)
100026fe:	4a09      	ldr	r2, [pc, #36]	; (10002724 <pwm1_init+0x5c>)
10002700:	6952      	ldr	r2, [r2, #20]
10002702:	21a0      	movs	r1, #160	; 0xa0
10002704:	0409      	lsls	r1, r1, #16
10002706:	430a      	orrs	r2, r1
10002708:	615a      	str	r2, [r3, #20]
	//CCU40_CC40->TCSET = 0x1; //starts counting
}
1000270a:	46bd      	mov	sp, r7
1000270c:	bd80      	pop	{r7, pc}
1000270e:	46c0      	nop			; (mov r8, r8)
10002710:	40010000 	.word	0x40010000
10002714:	48040000 	.word	0x48040000
10002718:	48040100 	.word	0x48040100
1000271c:	0000c350 	.word	0x0000c350
10002720:	000061a8 	.word	0x000061a8
10002724:	40040000 	.word	0x40040000

10002728 <pwm3_init>:
// PWM3-Ausgang P0.8 initialisieren (16-Bit)
// Hinweis: anschließend starten mit pwm3_start oder pwm3_start_interrupt
// eingestellte Periodendauer bei #define periode_pwm 50000
//---------------------------------------------------------------
void pwm3_init(void)
{
10002728:	b580      	push	{r7, lr}
1000272a:	af00      	add	r7, sp, #0
	clock_init();
1000272c:	f7ff ff96 	bl	1000265c <clock_init>
	SCU_GENERAL->CCUCON = 1;			// Enable CCU40
10002730:	4b0f      	ldr	r3, [pc, #60]	; (10002770 <pwm3_init+0x48>)
10002732:	2201      	movs	r2, #1
10002734:	631a      	str	r2, [r3, #48]	; 0x30
		// CCU42 Init:
	CCU40->GIDLC = 0x10F; 				// Vorteiler enable,CCU4x enable
10002736:	4b0f      	ldr	r3, [pc, #60]	; (10002774 <pwm3_init+0x4c>)
10002738:	2210      	movs	r2, #16
1000273a:	32ff      	adds	r2, #255	; 0xff
1000273c:	60da      	str	r2, [r3, #12]
	CCU40_CC42->TC = 4;  				// Shadow transfer enable on clear
1000273e:	4b0e      	ldr	r3, [pc, #56]	; (10002778 <pwm3_init+0x50>)
10002740:	2204      	movs	r2, #4
10002742:	615a      	str	r2, [r3, #20]
	CCU40_CC42->PSC = 0x1;				// Vorteiler , hier 64Mhz/2
10002744:	4b0c      	ldr	r3, [pc, #48]	; (10002778 <pwm3_init+0x50>)
10002746:	2201      	movs	r2, #1
10002748:	625a      	str	r2, [r3, #36]	; 0x24
	CCU40_CC42->PRS = periode_pwm; 		// Period Register set , hier ca. 640 Hz
1000274a:	4b0b      	ldr	r3, [pc, #44]	; (10002778 <pwm3_init+0x50>)
1000274c:	4a0b      	ldr	r2, [pc, #44]	; (1000277c <pwm3_init+0x54>)
1000274e:	635a      	str	r2, [r3, #52]	; 0x34

	// CCU40 Compare:  (Ausganspin P0.8)
	CCU40_CC42->CRS = 25000;			// Compare Wert,hier 1:1 Imp
10002750:	4b09      	ldr	r3, [pc, #36]	; (10002778 <pwm3_init+0x50>)
10002752:	4a0b      	ldr	r2, [pc, #44]	; (10002780 <pwm3_init+0x58>)
10002754:	63da      	str	r2, [r3, #60]	; 0x3c
	CCU40->GCSS = 1<<8; 				// Shadow transfer request slice 2
10002756:	4b07      	ldr	r3, [pc, #28]	; (10002774 <pwm3_init+0x4c>)
10002758:	2280      	movs	r2, #128	; 0x80
1000275a:	0052      	lsls	r2, r2, #1
1000275c:	611a      	str	r2, [r3, #16]
	//PORT0->IOCR0 |= 0xA0 << 16;		// Alt4=>OUT bei P0.2
	PORT0->IOCR8 |= 0xA0;				// Alt4=>OUT bei P0.8
1000275e:	4b09      	ldr	r3, [pc, #36]	; (10002784 <pwm3_init+0x5c>)
10002760:	4a08      	ldr	r2, [pc, #32]	; (10002784 <pwm3_init+0x5c>)
10002762:	6992      	ldr	r2, [r2, #24]
10002764:	21a0      	movs	r1, #160	; 0xa0
10002766:	430a      	orrs	r2, r1
10002768:	619a      	str	r2, [r3, #24]
}
1000276a:	46bd      	mov	sp, r7
1000276c:	bd80      	pop	{r7, pc}
1000276e:	46c0      	nop			; (mov r8, r8)
10002770:	40010000 	.word	0x40010000
10002774:	48040000 	.word	0x48040000
10002778:	48040300 	.word	0x48040300
1000277c:	0000c350 	.word	0x0000c350
10002780:	000061a8 	.word	0x000061a8
10002784:	40040000 	.word	0x40040000

10002788 <pwm1_duty_cycle>:
// 16-Bit-Comparewert einstellen, der den Tastgrad des PWM-Singals verändert
// eingestellte Periodendauer bei #define periode_pwm 50000
// compare = 0...50000, Tastgrad 50% bei compare = 25000
//---------------------------------------------------------------
void pwm1_duty_cycle (uint16_t compare)
{
10002788:	b580      	push	{r7, lr}
1000278a:	b082      	sub	sp, #8
1000278c:	af00      	add	r7, sp, #0
1000278e:	1c02      	adds	r2, r0, #0
10002790:	1dbb      	adds	r3, r7, #6
10002792:	801a      	strh	r2, [r3, #0]
	CCU40_CC40->CRS = compare; 	// Compare Wert, hier 1:1 Imp
10002794:	4b06      	ldr	r3, [pc, #24]	; (100027b0 <pwm1_duty_cycle+0x28>)
10002796:	1dba      	adds	r2, r7, #6
10002798:	8812      	ldrh	r2, [r2, #0]
1000279a:	63da      	str	r2, [r3, #60]	; 0x3c
	CCU40->GCSS |= 1; 					// Shadow transfer request slice 0
1000279c:	4b05      	ldr	r3, [pc, #20]	; (100027b4 <pwm1_duty_cycle+0x2c>)
1000279e:	4a05      	ldr	r2, [pc, #20]	; (100027b4 <pwm1_duty_cycle+0x2c>)
100027a0:	6912      	ldr	r2, [r2, #16]
100027a2:	2101      	movs	r1, #1
100027a4:	430a      	orrs	r2, r1
100027a6:	611a      	str	r2, [r3, #16]
}
100027a8:	46bd      	mov	sp, r7
100027aa:	b002      	add	sp, #8
100027ac:	bd80      	pop	{r7, pc}
100027ae:	46c0      	nop			; (mov r8, r8)
100027b0:	48040100 	.word	0x48040100
100027b4:	48040000 	.word	0x48040000

100027b8 <pwm3_duty_cycle>:
// 16-Bit-Comparewert einstellen, der den Tastgrad des PWM-Singals verändert
// eingestellte Periodendauer bei #define periode_pwm 50000
// compare = 0...50000, Tastgrad 50% bei compare = 25000
//---------------------------------------------------------------
void pwm3_duty_cycle (uint16_t compare)
{
100027b8:	b580      	push	{r7, lr}
100027ba:	b082      	sub	sp, #8
100027bc:	af00      	add	r7, sp, #0
100027be:	1c02      	adds	r2, r0, #0
100027c0:	1dbb      	adds	r3, r7, #6
100027c2:	801a      	strh	r2, [r3, #0]
	CCU40_CC42->CRS = compare;	// Compare Wert,hier 1:1 Imp
100027c4:	4b06      	ldr	r3, [pc, #24]	; (100027e0 <pwm3_duty_cycle+0x28>)
100027c6:	1dba      	adds	r2, r7, #6
100027c8:	8812      	ldrh	r2, [r2, #0]
100027ca:	63da      	str	r2, [r3, #60]	; 0x3c
	CCU40->GCSS |= 1<<8; 				// Shadow transfer request slice 2
100027cc:	4b05      	ldr	r3, [pc, #20]	; (100027e4 <pwm3_duty_cycle+0x2c>)
100027ce:	4a05      	ldr	r2, [pc, #20]	; (100027e4 <pwm3_duty_cycle+0x2c>)
100027d0:	6912      	ldr	r2, [r2, #16]
100027d2:	2180      	movs	r1, #128	; 0x80
100027d4:	0049      	lsls	r1, r1, #1
100027d6:	430a      	orrs	r2, r1
100027d8:	611a      	str	r2, [r3, #16]
}
100027da:	46bd      	mov	sp, r7
100027dc:	b002      	add	sp, #8
100027de:	bd80      	pop	{r7, pc}
100027e0:	48040300 	.word	0x48040300
100027e4:	48040000 	.word	0x48040000

100027e8 <pwm1_start>:
}
//----------------------------------------------------------------
// PWM1-Ausgang P0.6 Ausgabe starten ohne Interrupt starten, 8- oder 16-Bit
//----------------------------------------------------------------
void pwm1_start(void)
{
100027e8:	b580      	push	{r7, lr}
100027ea:	af00      	add	r7, sp, #0
	 CCU40_CC40->TCSET = 0x1; //starts counting
100027ec:	4b02      	ldr	r3, [pc, #8]	; (100027f8 <pwm1_start+0x10>)
100027ee:	2201      	movs	r2, #1
100027f0:	60da      	str	r2, [r3, #12]
}
100027f2:	46bd      	mov	sp, r7
100027f4:	bd80      	pop	{r7, pc}
100027f6:	46c0      	nop			; (mov r8, r8)
100027f8:	48040100 	.word	0x48040100

100027fc <pwm3_start>:
}
//----------------------------------------------------------------
// PWM3-Ausgang P0.8 Ausgabe starten ohne Interrupt starten
//----------------------------------------------------------------
void pwm3_start(void)
{
100027fc:	b580      	push	{r7, lr}
100027fe:	af00      	add	r7, sp, #0
	 CCU40_CC42->TCSET = 0x1; //starts counting
10002800:	4b02      	ldr	r3, [pc, #8]	; (1000280c <pwm3_start+0x10>)
10002802:	2201      	movs	r2, #1
10002804:	60da      	str	r2, [r3, #12]
}
10002806:	46bd      	mov	sp, r7
10002808:	bd80      	pop	{r7, pc}
1000280a:	46c0      	nop			; (mov r8, r8)
1000280c:	48040300 	.word	0x48040300

10002810 <delay_100us>:
}
//---------------------------------------------------------------
// Zeitverzögerung n mal 100µs
//---------------------------------------------------------------
void delay_100us (uint8_t n)
{
10002810:	b580      	push	{r7, lr}
10002812:	b084      	sub	sp, #16
10002814:	af00      	add	r7, sp, #0
10002816:	1c02      	adds	r2, r0, #0
10002818:	1dfb      	adds	r3, r7, #7
1000281a:	701a      	strb	r2, [r3, #0]
	volatile uint16_t z;
	for (;n != 0;--n)
1000281c:	e018      	b.n	10002850 <delay_100us+0x40>
		for (z = _T_CONST_; 	z!= 0; 	--z);
1000281e:	230e      	movs	r3, #14
10002820:	18fb      	adds	r3, r7, r3
10002822:	226d      	movs	r2, #109	; 0x6d
10002824:	801a      	strh	r2, [r3, #0]
10002826:	e008      	b.n	1000283a <delay_100us+0x2a>
10002828:	230e      	movs	r3, #14
1000282a:	18fb      	adds	r3, r7, r3
1000282c:	881b      	ldrh	r3, [r3, #0]
1000282e:	b29b      	uxth	r3, r3
10002830:	3b01      	subs	r3, #1
10002832:	b29a      	uxth	r2, r3
10002834:	230e      	movs	r3, #14
10002836:	18fb      	adds	r3, r7, r3
10002838:	801a      	strh	r2, [r3, #0]
1000283a:	230e      	movs	r3, #14
1000283c:	18fb      	adds	r3, r7, r3
1000283e:	881b      	ldrh	r3, [r3, #0]
10002840:	b29b      	uxth	r3, r3
10002842:	2b00      	cmp	r3, #0
10002844:	d1f0      	bne.n	10002828 <delay_100us+0x18>
// Zeitverzögerung n mal 100µs
//---------------------------------------------------------------
void delay_100us (uint8_t n)
{
	volatile uint16_t z;
	for (;n != 0;--n)
10002846:	1dfb      	adds	r3, r7, #7
10002848:	1dfa      	adds	r2, r7, #7
1000284a:	7812      	ldrb	r2, [r2, #0]
1000284c:	3a01      	subs	r2, #1
1000284e:	701a      	strb	r2, [r3, #0]
10002850:	1dfb      	adds	r3, r7, #7
10002852:	781b      	ldrb	r3, [r3, #0]
10002854:	2b00      	cmp	r3, #0
10002856:	d1e2      	bne.n	1000281e <delay_100us+0xe>
		for (z = _T_CONST_; 	z!= 0; 	--z);
}
10002858:	46bd      	mov	sp, r7
1000285a:	b004      	add	sp, #16
1000285c:	bd80      	pop	{r7, pc}
1000285e:	46c0      	nop			; (mov r8, r8)

10002860 <delay_ms>:

//---------------------------------------------------------------
// Zeitverzögerung Millisekunden
//---------------------------------------------------------------
void delay_ms( uint16_t millisekunden)
{
10002860:	b580      	push	{r7, lr}
10002862:	b084      	sub	sp, #16
10002864:	af00      	add	r7, sp, #0
10002866:	1c02      	adds	r2, r0, #0
10002868:	1dbb      	adds	r3, r7, #6
1000286a:	801a      	strh	r2, [r3, #0]
	volatile uint16_t n = 0;
1000286c:	230e      	movs	r3, #14
1000286e:	18fb      	adds	r3, r7, r3
10002870:	2200      	movs	r2, #0
10002872:	801a      	strh	r2, [r3, #0]

	while(n < millisekunden)
10002874:	e00b      	b.n	1000288e <delay_ms+0x2e>
	{
		delay_100us(10);
10002876:	200a      	movs	r0, #10
10002878:	f7ff ffca 	bl	10002810 <delay_100us>
		n++;
1000287c:	230e      	movs	r3, #14
1000287e:	18fb      	adds	r3, r7, r3
10002880:	881b      	ldrh	r3, [r3, #0]
10002882:	b29b      	uxth	r3, r3
10002884:	3301      	adds	r3, #1
10002886:	b29a      	uxth	r2, r3
10002888:	230e      	movs	r3, #14
1000288a:	18fb      	adds	r3, r7, r3
1000288c:	801a      	strh	r2, [r3, #0]
//---------------------------------------------------------------
void delay_ms( uint16_t millisekunden)
{
	volatile uint16_t n = 0;

	while(n < millisekunden)
1000288e:	230e      	movs	r3, #14
10002890:	18fb      	adds	r3, r7, r3
10002892:	881b      	ldrh	r3, [r3, #0]
10002894:	b29b      	uxth	r3, r3
10002896:	1dba      	adds	r2, r7, #6
10002898:	8812      	ldrh	r2, [r2, #0]
1000289a:	429a      	cmp	r2, r3
1000289c:	d8eb      	bhi.n	10002876 <delay_ms+0x16>
	{
		delay_100us(10);
		n++;
	}
}
1000289e:	46bd      	mov	sp, r7
100028a0:	b004      	add	sp, #16
100028a2:	bd80      	pop	{r7, pc}

100028a4 <rs232_init>:
// Serielle Schnittstelle initialisieren
// RxD auf P1.3 , XMC1100 TxD auf P1.2, 9600 Baud, 8N1
// über USB als virtuelle Schnittstelle COM x am PC verwendbar
//---------------------------------------------------------------
void rs232_init ( void )
{	//USIC0 Cannel 1 wird verwendet:
100028a4:	b580      	push	{r7, lr}
100028a6:	af00      	add	r7, sp, #0
	SCU_GENERAL->PASSWD = 0x000000C0UL;
100028a8:	4b59      	ldr	r3, [pc, #356]	; (10002a10 <rs232_init+0x16c>)
100028aa:	22c0      	movs	r2, #192	; 0xc0
100028ac:	625a      	str	r2, [r3, #36]	; 0x24
	SCU_CLK->CGATCLR0 |= 0x00000008;		// stop gating USIC
100028ae:	4b59      	ldr	r3, [pc, #356]	; (10002a14 <rs232_init+0x170>)
100028b0:	4a58      	ldr	r2, [pc, #352]	; (10002a14 <rs232_init+0x170>)
100028b2:	6912      	ldr	r2, [r2, #16]
100028b4:	2108      	movs	r1, #8
100028b6:	430a      	orrs	r2, r1
100028b8:	611a      	str	r2, [r3, #16]
		while((SCU_CLK->CLKCR)&0x40000000UL);	// wait for VDDC to stabilize
100028ba:	46c0      	nop			; (mov r8, r8)
100028bc:	4b55      	ldr	r3, [pc, #340]	; (10002a14 <rs232_init+0x170>)
100028be:	681a      	ldr	r2, [r3, #0]
100028c0:	2380      	movs	r3, #128	; 0x80
100028c2:	05db      	lsls	r3, r3, #23
100028c4:	4013      	ands	r3, r2
100028c6:	d1f9      	bne.n	100028bc <rs232_init+0x18>
	SCU_GENERAL->PASSWD = 0x000000C3UL;
100028c8:	4b51      	ldr	r3, [pc, #324]	; (10002a10 <rs232_init+0x16c>)
100028ca:	22c3      	movs	r2, #195	; 0xc3
100028cc:	625a      	str	r2, [r3, #36]	; 0x24

	USIC0_CH1->KSCFG |= 3UL ;	//  Mode enable + Freigabe write
100028ce:	4b52      	ldr	r3, [pc, #328]	; (10002a18 <rs232_init+0x174>)
100028d0:	4a51      	ldr	r2, [pc, #324]	; (10002a18 <rs232_init+0x174>)
100028d2:	68d2      	ldr	r2, [r2, #12]
100028d4:	2103      	movs	r1, #3
100028d6:	430a      	orrs	r2, r1
100028d8:	60da      	str	r2, [r3, #12]
	//WR_REG(USIC0_CH1->FDR, USIC_CH_FDR_DM_Msk, USIC_CH_FDR_DM_Pos, 2);
	USIC0_CH1->FDR |= 1UL << 15 ;	//Fractional divider mode selected
100028da:	4b4f      	ldr	r3, [pc, #316]	; (10002a18 <rs232_init+0x174>)
100028dc:	4a4e      	ldr	r2, [pc, #312]	; (10002a18 <rs232_init+0x174>)
100028de:	6912      	ldr	r2, [r2, #16]
100028e0:	2180      	movs	r1, #128	; 0x80
100028e2:	0209      	lsls	r1, r1, #8
100028e4:	430a      	orrs	r2, r1
100028e6:	611a      	str	r2, [r3, #16]
		//Step value
	USIC0_CH1->FDR|= FDR_STEP ;
100028e8:	4b4b      	ldr	r3, [pc, #300]	; (10002a18 <rs232_init+0x174>)
100028ea:	4a4b      	ldr	r2, [pc, #300]	; (10002a18 <rs232_init+0x174>)
100028ec:	6912      	ldr	r2, [r2, #16]
100028ee:	2176      	movs	r1, #118	; 0x76
100028f0:	430a      	orrs	r2, r1
100028f2:	611a      	str	r2, [r3, #16]
		//Vorteiler:
		// Baudrate = 32 MHz * Step/1024 * 1/(PDIV +1)  * 1/ (PCTQ +1) * 1/ (DCTQ +1)
	USIC0_CH1->BRG |= (BRG_PDIV << 16) ;
100028f4:	4b48      	ldr	r3, [pc, #288]	; (10002a18 <rs232_init+0x174>)
100028f6:	4a48      	ldr	r2, [pc, #288]	; (10002a18 <rs232_init+0x174>)
100028f8:	6952      	ldr	r2, [r2, #20]
100028fa:	21b8      	movs	r1, #184	; 0xb8
100028fc:	0349      	lsls	r1, r1, #13
100028fe:	430a      	orrs	r2, r1
10002900:	615a      	str	r2, [r3, #20]
	USIC0_CH1->BRG |= BRG_DCTQ << 10 ;
10002902:	4b45      	ldr	r3, [pc, #276]	; (10002a18 <rs232_init+0x174>)
10002904:	4a44      	ldr	r2, [pc, #272]	; (10002a18 <rs232_init+0x174>)
10002906:	6952      	ldr	r2, [r2, #20]
10002908:	21f0      	movs	r1, #240	; 0xf0
1000290a:	0189      	lsls	r1, r1, #6
1000290c:	430a      	orrs	r2, r1
1000290e:	615a      	str	r2, [r3, #20]
	USIC0_CH1->BRG |= BRG_PCTQ << 8 ;
10002910:	4b41      	ldr	r3, [pc, #260]	; (10002a18 <rs232_init+0x174>)
10002912:	4a41      	ldr	r2, [pc, #260]	; (10002a18 <rs232_init+0x174>)
10002914:	6952      	ldr	r2, [r2, #20]
10002916:	615a      	str	r2, [r3, #20]

		//Configuration of USIC Shift Control
		//Transmit/Receive LSB first is selected, Transmission Mode (TRM) = 1, Passive Data Level (PDL) = 1
	WR_REG(USIC0_CH1->SCTR, USIC_CH_SCTR_PDL_Msk, USIC_CH_SCTR_PDL_Pos, 1);
10002918:	4b3f      	ldr	r3, [pc, #252]	; (10002a18 <rs232_init+0x174>)
1000291a:	4a3f      	ldr	r2, [pc, #252]	; (10002a18 <rs232_init+0x174>)
1000291c:	6b52      	ldr	r2, [r2, #52]	; 0x34
1000291e:	2102      	movs	r1, #2
10002920:	430a      	orrs	r2, r1
10002922:	635a      	str	r2, [r3, #52]	; 0x34
	WR_REG(USIC0_CH1->SCTR, USIC_CH_SCTR_TRM_Msk, USIC_CH_SCTR_TRM_Pos, 1);
10002924:	4b3c      	ldr	r3, [pc, #240]	; (10002a18 <rs232_init+0x174>)
10002926:	4a3c      	ldr	r2, [pc, #240]	; (10002a18 <rs232_init+0x174>)
10002928:	6b52      	ldr	r2, [r2, #52]	; 0x34
1000292a:	493c      	ldr	r1, [pc, #240]	; (10002a1c <rs232_init+0x178>)
1000292c:	400a      	ands	r2, r1
1000292e:	2180      	movs	r1, #128	; 0x80
10002930:	0049      	lsls	r1, r1, #1
10002932:	430a      	orrs	r2, r1
10002934:	635a      	str	r2, [r3, #52]	; 0x34
		//Set Word Length (WLE) & Frame Length (FLE)
	WR_REG(USIC0_CH1->SCTR, USIC_CH_SCTR_FLE_Msk, USIC_CH_SCTR_FLE_Pos, 7);
10002936:	4b38      	ldr	r3, [pc, #224]	; (10002a18 <rs232_init+0x174>)
10002938:	4a37      	ldr	r2, [pc, #220]	; (10002a18 <rs232_init+0x174>)
1000293a:	6b52      	ldr	r2, [r2, #52]	; 0x34
1000293c:	4938      	ldr	r1, [pc, #224]	; (10002a20 <rs232_init+0x17c>)
1000293e:	400a      	ands	r2, r1
10002940:	21e0      	movs	r1, #224	; 0xe0
10002942:	02c9      	lsls	r1, r1, #11
10002944:	430a      	orrs	r2, r1
10002946:	635a      	str	r2, [r3, #52]	; 0x34
	WR_REG(USIC0_CH1->SCTR, USIC_CH_SCTR_WLE_Msk, USIC_CH_SCTR_WLE_Pos, 7);
10002948:	4b33      	ldr	r3, [pc, #204]	; (10002a18 <rs232_init+0x174>)
1000294a:	4a33      	ldr	r2, [pc, #204]	; (10002a18 <rs232_init+0x174>)
1000294c:	6b52      	ldr	r2, [r2, #52]	; 0x34
1000294e:	4935      	ldr	r1, [pc, #212]	; (10002a24 <rs232_init+0x180>)
10002950:	400a      	ands	r2, r1
10002952:	21e0      	movs	r1, #224	; 0xe0
10002954:	04c9      	lsls	r1, r1, #19
10002956:	430a      	orrs	r2, r1
10002958:	635a      	str	r2, [r3, #52]	; 0x34

		//Configuration of USIC Transmit Control/Status Register
		//TBUF Data Enable (TDEN) = 1, TBUF Data Single Shot Mode (TDSSM) = 1
	WR_REG(USIC0_CH1->TCSR, USIC_CH_TCSR_TDEN_Msk, USIC_CH_TCSR_TDEN_Pos, 1);
1000295a:	4b2f      	ldr	r3, [pc, #188]	; (10002a18 <rs232_init+0x174>)
1000295c:	4a2e      	ldr	r2, [pc, #184]	; (10002a18 <rs232_init+0x174>)
1000295e:	6b92      	ldr	r2, [r2, #56]	; 0x38
10002960:	4931      	ldr	r1, [pc, #196]	; (10002a28 <rs232_init+0x184>)
10002962:	400a      	ands	r2, r1
10002964:	2180      	movs	r1, #128	; 0x80
10002966:	00c9      	lsls	r1, r1, #3
10002968:	430a      	orrs	r2, r1
1000296a:	639a      	str	r2, [r3, #56]	; 0x38
	WR_REG(USIC0_CH1->TCSR, USIC_CH_TCSR_TDSSM_Msk, USIC_CH_TCSR_TDSSM_Pos, 1);
1000296c:	4b2a      	ldr	r3, [pc, #168]	; (10002a18 <rs232_init+0x174>)
1000296e:	4a2a      	ldr	r2, [pc, #168]	; (10002a18 <rs232_init+0x174>)
10002970:	6b92      	ldr	r2, [r2, #56]	; 0x38
10002972:	2180      	movs	r1, #128	; 0x80
10002974:	0049      	lsls	r1, r1, #1
10002976:	430a      	orrs	r2, r1
10002978:	639a      	str	r2, [r3, #56]	; 0x38

		//Configuration of Protocol Control Register
		//Sample Mode (SMD) = 1, 1 Stop bit is selected, Sample Point (SP) = 2, Pulse Length (PL) = 0
	WR_REG(USIC0_CH1->PCR_ASCMode, USIC_CH_PCR_ASCMode_SMD_Msk,
1000297a:	4b27      	ldr	r3, [pc, #156]	; (10002a18 <rs232_init+0x174>)
1000297c:	4a26      	ldr	r2, [pc, #152]	; (10002a18 <rs232_init+0x174>)
1000297e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
10002980:	2101      	movs	r1, #1
10002982:	430a      	orrs	r2, r1
10002984:	63da      	str	r2, [r3, #60]	; 0x3c
				USIC_CH_PCR_ASCMode_SMD_Pos, 1);
	WR_REG(USIC0_CH1->PCR_ASCMode, USIC_CH_PCR_ASCMode_STPB_Msk, USIC_CH_PCR_ASCMode_STPB_Pos, 0);
10002986:	4b24      	ldr	r3, [pc, #144]	; (10002a18 <rs232_init+0x174>)
10002988:	4a23      	ldr	r2, [pc, #140]	; (10002a18 <rs232_init+0x174>)
1000298a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
1000298c:	2102      	movs	r1, #2
1000298e:	438a      	bics	r2, r1
10002990:	63da      	str	r2, [r3, #60]	; 0x3c
	WR_REG(USIC0_CH1->PCR_ASCMode, USIC_CH_PCR_ASCMode_SP_Msk, USIC_CH_PCR_ASCMode_SP_Pos, 9);
10002992:	4b21      	ldr	r3, [pc, #132]	; (10002a18 <rs232_init+0x174>)
10002994:	4a20      	ldr	r2, [pc, #128]	; (10002a18 <rs232_init+0x174>)
10002996:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
10002998:	4924      	ldr	r1, [pc, #144]	; (10002a2c <rs232_init+0x188>)
1000299a:	400a      	ands	r2, r1
1000299c:	2190      	movs	r1, #144	; 0x90
1000299e:	0109      	lsls	r1, r1, #4
100029a0:	430a      	orrs	r2, r1
100029a2:	63da      	str	r2, [r3, #60]	; 0x3c
		//TBIF is set to simplify polling
	WR_REG(USIC0_CH1->PSR_ASCMode, USIC_CH_PSR_TBIF_Msk, USIC_CH_PSR_TBIF_Pos, 1);
100029a4:	4b1c      	ldr	r3, [pc, #112]	; (10002a18 <rs232_init+0x174>)
100029a6:	4a1c      	ldr	r2, [pc, #112]	; (10002a18 <rs232_init+0x174>)
100029a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
100029aa:	2180      	movs	r1, #128	; 0x80
100029ac:	0189      	lsls	r1, r1, #6
100029ae:	430a      	orrs	r2, r1
100029b0:	649a      	str	r2, [r3, #72]	; 0x48
		//Configuration of Transmitter Buffer Control Register
	WR_REG(USIC0_CH1->TBCTR, USIC_CH_TBCTR_LIMIT_Msk, USIC_CH_TBCTR_LIMIT_Pos, 0);
100029b2:	4919      	ldr	r1, [pc, #100]	; (10002a18 <rs232_init+0x174>)
100029b4:	4a18      	ldr	r2, [pc, #96]	; (10002a18 <rs232_init+0x174>)
100029b6:	2384      	movs	r3, #132	; 0x84
100029b8:	005b      	lsls	r3, r3, #1
100029ba:	58d3      	ldr	r3, [r2, r3]
100029bc:	4a1c      	ldr	r2, [pc, #112]	; (10002a30 <rs232_init+0x18c>)
100029be:	401a      	ands	r2, r3
100029c0:	2384      	movs	r3, #132	; 0x84
100029c2:	005b      	lsls	r3, r3, #1
100029c4:	50ca      	str	r2, [r1, r3]

		//Configuration of Channel Control Register
		//parity generation is disabled
	USIC0_CH1->CCR |=  0x02;	// ASC Mode
100029c6:	4b14      	ldr	r3, [pc, #80]	; (10002a18 <rs232_init+0x174>)
100029c8:	4a13      	ldr	r2, [pc, #76]	; (10002a18 <rs232_init+0x174>)
100029ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
100029cc:	2102      	movs	r1, #2
100029ce:	430a      	orrs	r2, r1
100029d0:	641a      	str	r2, [r3, #64]	; 0x40

		//Data Pointer & Buffer Size for Transmitter Buffer Control - DPTR = 64,  SIZE = 6
	WR_REG(USIC0_CH1->TBCTR, USIC_CH_TBCTR_DPTRSIZE_Msk, USIC_CH_TBCTR_DPTRSIZE_Pos, 0x06000040);
100029d2:	4911      	ldr	r1, [pc, #68]	; (10002a18 <rs232_init+0x174>)
100029d4:	4a10      	ldr	r2, [pc, #64]	; (10002a18 <rs232_init+0x174>)
100029d6:	2384      	movs	r3, #132	; 0x84
100029d8:	005b      	lsls	r3, r3, #1
100029da:	58d3      	ldr	r3, [r2, r3]
100029dc:	4a15      	ldr	r2, [pc, #84]	; (10002a34 <rs232_init+0x190>)
100029de:	4013      	ands	r3, r2
100029e0:	22c0      	movs	r2, #192	; 0xc0
100029e2:	04d2      	lsls	r2, r2, #19
100029e4:	431a      	orrs	r2, r3
100029e6:	2384      	movs	r3, #132	; 0x84
100029e8:	005b      	lsls	r3, r3, #1
100029ea:	50ca      	str	r2, [r1, r3]
		// Rx Pin:
	USIC0_CH1->DX0CR = 0x00;	// Kanal: USIC0_CH1 => DXnB auf P1.3 ( siehe Pin Mapping)
100029ec:	4b0a      	ldr	r3, [pc, #40]	; (10002a18 <rs232_init+0x174>)
100029ee:	2200      	movs	r2, #0
100029f0:	61da      	str	r2, [r3, #28]
	PORT1->IOCR0  |= 0b10111 << 19 ; // ALT 7 fuer P1.2 => TxD d.h. XMC1100 sendet auf P1.2
100029f2:	4b11      	ldr	r3, [pc, #68]	; (10002a38 <rs232_init+0x194>)
100029f4:	4a10      	ldr	r2, [pc, #64]	; (10002a38 <rs232_init+0x194>)
100029f6:	6912      	ldr	r2, [r2, #16]
100029f8:	21b8      	movs	r1, #184	; 0xb8
100029fa:	0409      	lsls	r1, r1, #16
100029fc:	430a      	orrs	r2, r1
100029fe:	611a      	str	r2, [r3, #16]
	PORT1->IOCR0 &= 0x00ffffff;	// P1.3 => INPUT =>  RxD
10002a00:	4b0d      	ldr	r3, [pc, #52]	; (10002a38 <rs232_init+0x194>)
10002a02:	4a0d      	ldr	r2, [pc, #52]	; (10002a38 <rs232_init+0x194>)
10002a04:	6912      	ldr	r2, [r2, #16]
10002a06:	0212      	lsls	r2, r2, #8
10002a08:	0a12      	lsrs	r2, r2, #8
10002a0a:	611a      	str	r2, [r3, #16]
}
10002a0c:	46bd      	mov	sp, r7
10002a0e:	bd80      	pop	{r7, pc}
10002a10:	40010000 	.word	0x40010000
10002a14:	40010300 	.word	0x40010300
10002a18:	48000200 	.word	0x48000200
10002a1c:	fffffcff 	.word	0xfffffcff
10002a20:	ffc0ffff 	.word	0xffc0ffff
10002a24:	f0ffffff 	.word	0xf0ffffff
10002a28:	fffff3ff 	.word	0xfffff3ff
10002a2c:	ffffe0ff 	.word	0xffffe0ff
10002a30:	ffffc0ff 	.word	0xffffc0ff
10002a34:	f8ffffc0 	.word	0xf8ffffc0
10002a38:	40040100 	.word	0x40040100

10002a3c <rs232_interrupt_enable>:
	PORT1->IOCR0  |= 0b10111 << 19 ; // ALT 7 fuer P1.2 => TxD d.h. XMC1100 sendet auf P1.2
	PORT1->IOCR0 &= 0x00ffffff;	// P1.3 => INPUT =>  RxD
}

void rs232_interrupt_enable()
{
10002a3c:	b580      	push	{r7, lr}
10002a3e:	af00      	add	r7, sp, #0
	USIC0_CH1->CCR  |=0x00004000;
10002a40:	4b0c      	ldr	r3, [pc, #48]	; (10002a74 <rs232_interrupt_enable+0x38>)
10002a42:	4a0c      	ldr	r2, [pc, #48]	; (10002a74 <rs232_interrupt_enable+0x38>)
10002a44:	6c12      	ldr	r2, [r2, #64]	; 0x40
10002a46:	2180      	movs	r1, #128	; 0x80
10002a48:	01c9      	lsls	r1, r1, #7
10002a4a:	430a      	orrs	r2, r1
10002a4c:	641a      	str	r2, [r3, #64]	; 0x40
	USIC0_CH1->INPR &=0xFFFFF8FF;
10002a4e:	4b09      	ldr	r3, [pc, #36]	; (10002a74 <rs232_interrupt_enable+0x38>)
10002a50:	4a08      	ldr	r2, [pc, #32]	; (10002a74 <rs232_interrupt_enable+0x38>)
10002a52:	6992      	ldr	r2, [r2, #24]
10002a54:	4908      	ldr	r1, [pc, #32]	; (10002a78 <rs232_interrupt_enable+0x3c>)
10002a56:	400a      	ands	r2, r1
10002a58:	619a      	str	r2, [r3, #24]
	USIC0_CH1->PSCR |=0x00000400;
10002a5a:	4b06      	ldr	r3, [pc, #24]	; (10002a74 <rs232_interrupt_enable+0x38>)
10002a5c:	4a05      	ldr	r2, [pc, #20]	; (10002a74 <rs232_interrupt_enable+0x38>)
10002a5e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
10002a60:	2180      	movs	r1, #128	; 0x80
10002a62:	00c9      	lsls	r1, r1, #3
10002a64:	430a      	orrs	r2, r1
10002a66:	64da      	str	r2, [r3, #76]	; 0x4c
	//NVIC_EnableIRQ(USIC0_0_IRQn); 	// Int Freigabe  SR0 für empfange Zeichen
	NVIC_EnableIRQ(9); 	// Int Freigabe  SR0 für empfange Zeichen
10002a68:	2009      	movs	r0, #9
10002a6a:	f7fe fd7b 	bl	10001564 <__NVIC_EnableIRQ>
}
10002a6e:	46bd      	mov	sp, r7
10002a70:	bd80      	pop	{r7, pc}
10002a72:	46c0      	nop			; (mov r8, r8)
10002a74:	48000200 	.word	0x48000200
10002a78:	fffff8ff 	.word	0xfffff8ff

10002a7c <rs232_put>:
}
//---------------------------------------------------------------
// schreibt ein Byte auf COM
//---------------------------------------------------------------
void rs232_put ( char value )
{
10002a7c:	b580      	push	{r7, lr}
10002a7e:	b082      	sub	sp, #8
10002a80:	af00      	add	r7, sp, #0
10002a82:	1c02      	adds	r2, r0, #0
10002a84:	1dfb      	adds	r3, r7, #7
10002a86:	701a      	strb	r2, [r3, #0]
	USIC0_CH1->IN[0] = value;
10002a88:	4908      	ldr	r1, [pc, #32]	; (10002aac <rs232_put+0x30>)
10002a8a:	1dfb      	adds	r3, r7, #7
10002a8c:	781a      	ldrb	r2, [r3, #0]
10002a8e:	23c0      	movs	r3, #192	; 0xc0
10002a90:	005b      	lsls	r3, r3, #1
10002a92:	50ca      	str	r2, [r1, r3]
	while((USIC0_CH1->TRBSR & (1U<< 11))  == 0);  // Warten , falls Transmit Buffer empty
10002a94:	46c0      	nop			; (mov r8, r8)
10002a96:	4a05      	ldr	r2, [pc, #20]	; (10002aac <rs232_put+0x30>)
10002a98:	238a      	movs	r3, #138	; 0x8a
10002a9a:	005b      	lsls	r3, r3, #1
10002a9c:	58d2      	ldr	r2, [r2, r3]
10002a9e:	2380      	movs	r3, #128	; 0x80
10002aa0:	011b      	lsls	r3, r3, #4
10002aa2:	4013      	ands	r3, r2
10002aa4:	d0f7      	beq.n	10002a96 <rs232_put+0x1a>

}
10002aa6:	46bd      	mov	sp, r7
10002aa8:	b002      	add	sp, #8
10002aaa:	bd80      	pop	{r7, pc}
10002aac:	48000200 	.word	0x48000200

10002ab0 <rs232_print>:
//---------------------------------------------------------------
// schreibt eine nullterminierte Zeichenfolge auf COM
//---------------------------------------------------------------
void rs232_print ( char *text )
{
10002ab0:	b580      	push	{r7, lr}
10002ab2:	b082      	sub	sp, #8
10002ab4:	af00      	add	r7, sp, #0
10002ab6:	6078      	str	r0, [r7, #4]
  while (*text != '\0')
10002ab8:	e006      	b.n	10002ac8 <rs232_print+0x18>
    rs232_put(*text++);
10002aba:	687b      	ldr	r3, [r7, #4]
10002abc:	1c5a      	adds	r2, r3, #1
10002abe:	607a      	str	r2, [r7, #4]
10002ac0:	781b      	ldrb	r3, [r3, #0]
10002ac2:	1c18      	adds	r0, r3, #0
10002ac4:	f7ff ffda 	bl	10002a7c <rs232_put>
//---------------------------------------------------------------
// schreibt eine nullterminierte Zeichenfolge auf COM
//---------------------------------------------------------------
void rs232_print ( char *text )
{
  while (*text != '\0')
10002ac8:	687b      	ldr	r3, [r7, #4]
10002aca:	781b      	ldrb	r3, [r3, #0]
10002acc:	2b00      	cmp	r3, #0
10002ace:	d1f4      	bne.n	10002aba <rs232_print+0xa>
    rs232_put(*text++);
}
10002ad0:	46bd      	mov	sp, r7
10002ad2:	b002      	add	sp, #8
10002ad4:	bd80      	pop	{r7, pc}
10002ad6:	46c0      	nop			; (mov r8, r8)

10002ad8 <USIC0_0_IRQHandler>:
* rs232_wait_of_enter(), rs232_clear_receivedata()
* Es werden folgende globale Variablen benötigt:
* rs232Receivedata, rs232ReceivedataPointer, rs232EnterReceive
*/
void USIC0_0_IRQHandler(void)
{
10002ad8:	b580      	push	{r7, lr}
10002ada:	b082      	sub	sp, #8
10002adc:	af00      	add	r7, sp, #0
	char temp=USIC0_CH1->RBUF & 0xff;	// Rx-Buffer auslesen
10002ade:	4b11      	ldr	r3, [pc, #68]	; (10002b24 <USIC0_0_IRQHandler+0x4c>)
10002ae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
10002ae2:	1dfb      	adds	r3, r7, #7
10002ae4:	701a      	strb	r2, [r3, #0]
	if (temp == '\r') {					// Enterzeichen empfangen?
10002ae6:	1dfb      	adds	r3, r7, #7
10002ae8:	781b      	ldrb	r3, [r3, #0]
10002aea:	2b0d      	cmp	r3, #13
10002aec:	d109      	bne.n	10002b02 <USIC0_0_IRQHandler+0x2a>
		rs232Receivedata[rs232ReceivedataPointer]='\0';
10002aee:	4b0e      	ldr	r3, [pc, #56]	; (10002b28 <USIC0_0_IRQHandler+0x50>)
10002af0:	781b      	ldrb	r3, [r3, #0]
10002af2:	1c1a      	adds	r2, r3, #0
10002af4:	4b0d      	ldr	r3, [pc, #52]	; (10002b2c <USIC0_0_IRQHandler+0x54>)
10002af6:	2100      	movs	r1, #0
10002af8:	5499      	strb	r1, [r3, r2]
		rs232EnterReceive = 1;
10002afa:	4b0d      	ldr	r3, [pc, #52]	; (10002b30 <USIC0_0_IRQHandler+0x58>)
10002afc:	2201      	movs	r2, #1
10002afe:	701a      	strb	r2, [r3, #0]
10002b00:	e006      	b.n	10002b10 <USIC0_0_IRQHandler+0x38>
	} else {
		rs232Receivedata[rs232ReceivedataPointer]=temp;
10002b02:	4b09      	ldr	r3, [pc, #36]	; (10002b28 <USIC0_0_IRQHandler+0x50>)
10002b04:	781b      	ldrb	r3, [r3, #0]
10002b06:	1c19      	adds	r1, r3, #0
10002b08:	4b08      	ldr	r3, [pc, #32]	; (10002b2c <USIC0_0_IRQHandler+0x54>)
10002b0a:	1dfa      	adds	r2, r7, #7
10002b0c:	7812      	ldrb	r2, [r2, #0]
10002b0e:	545a      	strb	r2, [r3, r1]
	}
	rs232ReceivedataPointer++;
10002b10:	4b05      	ldr	r3, [pc, #20]	; (10002b28 <USIC0_0_IRQHandler+0x50>)
10002b12:	781b      	ldrb	r3, [r3, #0]
10002b14:	3301      	adds	r3, #1
10002b16:	b2da      	uxtb	r2, r3
10002b18:	4b03      	ldr	r3, [pc, #12]	; (10002b28 <USIC0_0_IRQHandler+0x50>)
10002b1a:	701a      	strb	r2, [r3, #0]
	return;
10002b1c:	46c0      	nop			; (mov r8, r8)
}
10002b1e:	46bd      	mov	sp, r7
10002b20:	b002      	add	sp, #8
10002b22:	bd80      	pop	{r7, pc}
10002b24:	48000200 	.word	0x48000200
10002b28:	20000528 	.word	0x20000528
10002b2c:	20000638 	.word	0x20000638
10002b30:	20000529 	.word	0x20000529

10002b34 <uart_init>:
//---------------------------------------------------------------
// Serielle Schnittstelle initialisieren
// RxD auf P1.1 0.6, TxD auf P1.0 0.7, 9600 Baud, 8N1
//---------------------------------------------------------------
void uart_init ( void )
{	//USIC0 Cannel 0 wird verwendet:
10002b34:	b580      	push	{r7, lr}
10002b36:	af00      	add	r7, sp, #0
	SCU_GENERAL->PASSWD = 0x000000C0UL;
10002b38:	4b7f      	ldr	r3, [pc, #508]	; (10002d38 <uart_init+0x204>)
10002b3a:	22c0      	movs	r2, #192	; 0xc0
10002b3c:	625a      	str	r2, [r3, #36]	; 0x24
	SCU_CLK->CGATCLR0 |= 0x00000008;		// stop gating USIC
10002b3e:	4b7f      	ldr	r3, [pc, #508]	; (10002d3c <uart_init+0x208>)
10002b40:	4a7e      	ldr	r2, [pc, #504]	; (10002d3c <uart_init+0x208>)
10002b42:	6912      	ldr	r2, [r2, #16]
10002b44:	2108      	movs	r1, #8
10002b46:	430a      	orrs	r2, r1
10002b48:	611a      	str	r2, [r3, #16]
		while((SCU_CLK->CLKCR)&0x40000000UL);	// wait for VDDC to stabilize
10002b4a:	46c0      	nop			; (mov r8, r8)
10002b4c:	4b7b      	ldr	r3, [pc, #492]	; (10002d3c <uart_init+0x208>)
10002b4e:	681a      	ldr	r2, [r3, #0]
10002b50:	2380      	movs	r3, #128	; 0x80
10002b52:	05db      	lsls	r3, r3, #23
10002b54:	4013      	ands	r3, r2
10002b56:	d1f9      	bne.n	10002b4c <uart_init+0x18>
	SCU_GENERAL->PASSWD = 0x000000C3UL;
10002b58:	4b77      	ldr	r3, [pc, #476]	; (10002d38 <uart_init+0x204>)
10002b5a:	22c3      	movs	r2, #195	; 0xc3
10002b5c:	625a      	str	r2, [r3, #36]	; 0x24

	USIC0_CH0->KSCFG |= 3UL ;	//  Mode enable + Freigabe write
10002b5e:	2390      	movs	r3, #144	; 0x90
10002b60:	05db      	lsls	r3, r3, #23
10002b62:	2290      	movs	r2, #144	; 0x90
10002b64:	05d2      	lsls	r2, r2, #23
10002b66:	68d2      	ldr	r2, [r2, #12]
10002b68:	2103      	movs	r1, #3
10002b6a:	430a      	orrs	r2, r1
10002b6c:	60da      	str	r2, [r3, #12]
	//WR_REG(USIC0_CH1->FDR, USIC_CH_FDR_DM_Msk, USIC_CH_FDR_DM_Pos, 2);
	USIC0_CH0->FDR |= 1UL << 15 ;	//Fractional divider mode selected
10002b6e:	2390      	movs	r3, #144	; 0x90
10002b70:	05db      	lsls	r3, r3, #23
10002b72:	2290      	movs	r2, #144	; 0x90
10002b74:	05d2      	lsls	r2, r2, #23
10002b76:	6912      	ldr	r2, [r2, #16]
10002b78:	2180      	movs	r1, #128	; 0x80
10002b7a:	0209      	lsls	r1, r1, #8
10002b7c:	430a      	orrs	r2, r1
10002b7e:	611a      	str	r2, [r3, #16]
		//Step value
	USIC0_CH0->FDR|= FDR_STEP_UART;
10002b80:	2390      	movs	r3, #144	; 0x90
10002b82:	05db      	lsls	r3, r3, #23
10002b84:	2290      	movs	r2, #144	; 0x90
10002b86:	05d2      	lsls	r2, r2, #23
10002b88:	6912      	ldr	r2, [r2, #16]
10002b8a:	2176      	movs	r1, #118	; 0x76
10002b8c:	430a      	orrs	r2, r1
10002b8e:	611a      	str	r2, [r3, #16]
		//Vorteiler:
		// Baudrate = 32 MHz * Step/1024 * 1/(PDIV +1)  * 1/ (PCTQ +1) * 1/ (DCTQ +1)
	USIC0_CH0->BRG |= (BRG_PDIV_UART << 16) ;
10002b90:	2390      	movs	r3, #144	; 0x90
10002b92:	05db      	lsls	r3, r3, #23
10002b94:	2290      	movs	r2, #144	; 0x90
10002b96:	05d2      	lsls	r2, r2, #23
10002b98:	6952      	ldr	r2, [r2, #20]
10002b9a:	21b8      	movs	r1, #184	; 0xb8
10002b9c:	0349      	lsls	r1, r1, #13
10002b9e:	430a      	orrs	r2, r1
10002ba0:	615a      	str	r2, [r3, #20]
	USIC0_CH0->BRG |= BRG_DCTQ_UART << 10 ;
10002ba2:	2390      	movs	r3, #144	; 0x90
10002ba4:	05db      	lsls	r3, r3, #23
10002ba6:	2290      	movs	r2, #144	; 0x90
10002ba8:	05d2      	lsls	r2, r2, #23
10002baa:	6952      	ldr	r2, [r2, #20]
10002bac:	21f0      	movs	r1, #240	; 0xf0
10002bae:	0189      	lsls	r1, r1, #6
10002bb0:	430a      	orrs	r2, r1
10002bb2:	615a      	str	r2, [r3, #20]
	USIC0_CH0->BRG |= BRG_PCTQ_UART << 8 ;
10002bb4:	2390      	movs	r3, #144	; 0x90
10002bb6:	05db      	lsls	r3, r3, #23
10002bb8:	2290      	movs	r2, #144	; 0x90
10002bba:	05d2      	lsls	r2, r2, #23
10002bbc:	6952      	ldr	r2, [r2, #20]
10002bbe:	615a      	str	r2, [r3, #20]

		//Configuration of USIC Shift Control
		//Transmit/Receive LSB first is selected, Transmission Mode (TRM) = 1, Passive Data Level (PDL) = 1
	WR_REG(USIC0_CH0->SCTR, USIC_CH_SCTR_PDL_Msk, USIC_CH_SCTR_PDL_Pos, 1);
10002bc0:	2390      	movs	r3, #144	; 0x90
10002bc2:	05db      	lsls	r3, r3, #23
10002bc4:	2290      	movs	r2, #144	; 0x90
10002bc6:	05d2      	lsls	r2, r2, #23
10002bc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
10002bca:	2102      	movs	r1, #2
10002bcc:	430a      	orrs	r2, r1
10002bce:	635a      	str	r2, [r3, #52]	; 0x34
	WR_REG(USIC0_CH0->SCTR, USIC_CH_SCTR_TRM_Msk, USIC_CH_SCTR_TRM_Pos, 1);
10002bd0:	2390      	movs	r3, #144	; 0x90
10002bd2:	05db      	lsls	r3, r3, #23
10002bd4:	2290      	movs	r2, #144	; 0x90
10002bd6:	05d2      	lsls	r2, r2, #23
10002bd8:	6b52      	ldr	r2, [r2, #52]	; 0x34
10002bda:	4959      	ldr	r1, [pc, #356]	; (10002d40 <uart_init+0x20c>)
10002bdc:	400a      	ands	r2, r1
10002bde:	2180      	movs	r1, #128	; 0x80
10002be0:	0049      	lsls	r1, r1, #1
10002be2:	430a      	orrs	r2, r1
10002be4:	635a      	str	r2, [r3, #52]	; 0x34
		//Set Word Length (WLE) & Frame Length (FLE)
	WR_REG(USIC0_CH0->SCTR, USIC_CH_SCTR_FLE_Msk, USIC_CH_SCTR_FLE_Pos, 7);
10002be6:	2390      	movs	r3, #144	; 0x90
10002be8:	05db      	lsls	r3, r3, #23
10002bea:	2290      	movs	r2, #144	; 0x90
10002bec:	05d2      	lsls	r2, r2, #23
10002bee:	6b52      	ldr	r2, [r2, #52]	; 0x34
10002bf0:	4954      	ldr	r1, [pc, #336]	; (10002d44 <uart_init+0x210>)
10002bf2:	400a      	ands	r2, r1
10002bf4:	21e0      	movs	r1, #224	; 0xe0
10002bf6:	02c9      	lsls	r1, r1, #11
10002bf8:	430a      	orrs	r2, r1
10002bfa:	635a      	str	r2, [r3, #52]	; 0x34
	WR_REG(USIC0_CH0->SCTR, USIC_CH_SCTR_WLE_Msk, USIC_CH_SCTR_WLE_Pos, 7);
10002bfc:	2390      	movs	r3, #144	; 0x90
10002bfe:	05db      	lsls	r3, r3, #23
10002c00:	2290      	movs	r2, #144	; 0x90
10002c02:	05d2      	lsls	r2, r2, #23
10002c04:	6b52      	ldr	r2, [r2, #52]	; 0x34
10002c06:	4950      	ldr	r1, [pc, #320]	; (10002d48 <uart_init+0x214>)
10002c08:	400a      	ands	r2, r1
10002c0a:	21e0      	movs	r1, #224	; 0xe0
10002c0c:	04c9      	lsls	r1, r1, #19
10002c0e:	430a      	orrs	r2, r1
10002c10:	635a      	str	r2, [r3, #52]	; 0x34

		//Configuration of USIC Transmit Control/Status Register
		//TBUF Data Enable (TDEN) = 1, TBUF Data Single Shot Mode (TDSSM) = 1
	WR_REG(USIC0_CH0->TCSR, USIC_CH_TCSR_TDEN_Msk, USIC_CH_TCSR_TDEN_Pos, 1);
10002c12:	2390      	movs	r3, #144	; 0x90
10002c14:	05db      	lsls	r3, r3, #23
10002c16:	2290      	movs	r2, #144	; 0x90
10002c18:	05d2      	lsls	r2, r2, #23
10002c1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
10002c1c:	494b      	ldr	r1, [pc, #300]	; (10002d4c <uart_init+0x218>)
10002c1e:	400a      	ands	r2, r1
10002c20:	2180      	movs	r1, #128	; 0x80
10002c22:	00c9      	lsls	r1, r1, #3
10002c24:	430a      	orrs	r2, r1
10002c26:	639a      	str	r2, [r3, #56]	; 0x38
	WR_REG(USIC0_CH0->TCSR, USIC_CH_TCSR_TDSSM_Msk, USIC_CH_TCSR_TDSSM_Pos, 1);
10002c28:	2390      	movs	r3, #144	; 0x90
10002c2a:	05db      	lsls	r3, r3, #23
10002c2c:	2290      	movs	r2, #144	; 0x90
10002c2e:	05d2      	lsls	r2, r2, #23
10002c30:	6b92      	ldr	r2, [r2, #56]	; 0x38
10002c32:	2180      	movs	r1, #128	; 0x80
10002c34:	0049      	lsls	r1, r1, #1
10002c36:	430a      	orrs	r2, r1
10002c38:	639a      	str	r2, [r3, #56]	; 0x38

		//Configuration of Protocol Control Register
		//Sample Mode (SMD) = 1, 1 Stop bit is selected, Sample Point (SP) = 2, Pulse Length (PL) = 0
	WR_REG(USIC0_CH0->PCR_ASCMode, USIC_CH_PCR_ASCMode_SMD_Msk,
10002c3a:	2390      	movs	r3, #144	; 0x90
10002c3c:	05db      	lsls	r3, r3, #23
10002c3e:	2290      	movs	r2, #144	; 0x90
10002c40:	05d2      	lsls	r2, r2, #23
10002c42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
10002c44:	2101      	movs	r1, #1
10002c46:	430a      	orrs	r2, r1
10002c48:	63da      	str	r2, [r3, #60]	; 0x3c
				USIC_CH_PCR_ASCMode_SMD_Pos, 1);
	WR_REG(USIC0_CH0->PCR_ASCMode, USIC_CH_PCR_ASCMode_STPB_Msk, USIC_CH_PCR_ASCMode_STPB_Pos, 0);
10002c4a:	2390      	movs	r3, #144	; 0x90
10002c4c:	05db      	lsls	r3, r3, #23
10002c4e:	2290      	movs	r2, #144	; 0x90
10002c50:	05d2      	lsls	r2, r2, #23
10002c52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
10002c54:	2102      	movs	r1, #2
10002c56:	438a      	bics	r2, r1
10002c58:	63da      	str	r2, [r3, #60]	; 0x3c
	WR_REG(USIC0_CH0->PCR_ASCMode, USIC_CH_PCR_ASCMode_SP_Msk, USIC_CH_PCR_ASCMode_SP_Pos, 9);
10002c5a:	2390      	movs	r3, #144	; 0x90
10002c5c:	05db      	lsls	r3, r3, #23
10002c5e:	2290      	movs	r2, #144	; 0x90
10002c60:	05d2      	lsls	r2, r2, #23
10002c62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
10002c64:	493a      	ldr	r1, [pc, #232]	; (10002d50 <uart_init+0x21c>)
10002c66:	400a      	ands	r2, r1
10002c68:	2190      	movs	r1, #144	; 0x90
10002c6a:	0109      	lsls	r1, r1, #4
10002c6c:	430a      	orrs	r2, r1
10002c6e:	63da      	str	r2, [r3, #60]	; 0x3c
		//TBIF is set to simplify polling
	WR_REG(USIC0_CH0->PSR_ASCMode, USIC_CH_PSR_TBIF_Msk, USIC_CH_PSR_TBIF_Pos, 1);
10002c70:	2390      	movs	r3, #144	; 0x90
10002c72:	05db      	lsls	r3, r3, #23
10002c74:	2290      	movs	r2, #144	; 0x90
10002c76:	05d2      	lsls	r2, r2, #23
10002c78:	6c92      	ldr	r2, [r2, #72]	; 0x48
10002c7a:	2180      	movs	r1, #128	; 0x80
10002c7c:	0189      	lsls	r1, r1, #6
10002c7e:	430a      	orrs	r2, r1
10002c80:	649a      	str	r2, [r3, #72]	; 0x48
		//Configuration of Transmitter Buffer Control Register
	WR_REG(USIC0_CH0->TBCTR, USIC_CH_TBCTR_LIMIT_Msk, USIC_CH_TBCTR_LIMIT_Pos, 0);
10002c82:	2390      	movs	r3, #144	; 0x90
10002c84:	05da      	lsls	r2, r3, #23
10002c86:	2390      	movs	r3, #144	; 0x90
10002c88:	05d9      	lsls	r1, r3, #23
10002c8a:	2384      	movs	r3, #132	; 0x84
10002c8c:	005b      	lsls	r3, r3, #1
10002c8e:	58cb      	ldr	r3, [r1, r3]
10002c90:	4930      	ldr	r1, [pc, #192]	; (10002d54 <uart_init+0x220>)
10002c92:	4019      	ands	r1, r3
10002c94:	2384      	movs	r3, #132	; 0x84
10002c96:	005b      	lsls	r3, r3, #1
10002c98:	50d1      	str	r1, [r2, r3]

		//Configuration of Channel Control Register
		//parity generation is disabled
	USIC0_CH0->CCR |=  0x02;	// ASC Mode
10002c9a:	2390      	movs	r3, #144	; 0x90
10002c9c:	05db      	lsls	r3, r3, #23
10002c9e:	2290      	movs	r2, #144	; 0x90
10002ca0:	05d2      	lsls	r2, r2, #23
10002ca2:	6c12      	ldr	r2, [r2, #64]	; 0x40
10002ca4:	2102      	movs	r1, #2
10002ca6:	430a      	orrs	r2, r1
10002ca8:	641a      	str	r2, [r3, #64]	; 0x40

		//Data Pointer & Buffer Size for Transmitter Buffer Control - DPTR = 64,  SIZE = 6
	WR_REG(USIC0_CH0->TBCTR, USIC_CH_TBCTR_DPTRSIZE_Msk_UART, USIC_CH_TBCTR_DPTRSIZE_Pos_UART, 0x06000040);
10002caa:	2390      	movs	r3, #144	; 0x90
10002cac:	05da      	lsls	r2, r3, #23
10002cae:	2390      	movs	r3, #144	; 0x90
10002cb0:	05d9      	lsls	r1, r3, #23
10002cb2:	2384      	movs	r3, #132	; 0x84
10002cb4:	005b      	lsls	r3, r3, #1
10002cb6:	58cb      	ldr	r3, [r1, r3]
10002cb8:	4927      	ldr	r1, [pc, #156]	; (10002d58 <uart_init+0x224>)
10002cba:	400b      	ands	r3, r1
10002cbc:	21c0      	movs	r1, #192	; 0xc0
10002cbe:	04c9      	lsls	r1, r1, #19
10002cc0:	4319      	orrs	r1, r3
10002cc2:	2384      	movs	r3, #132	; 0x84
10002cc4:	005b      	lsls	r3, r3, #1
10002cc6:	50d1      	str	r1, [r2, r3]

	// Rx Pin: P1.1
	bit_init(P1,1,INP); //P1.1 als Eingang definieren
10002cc8:	2001      	movs	r0, #1
10002cca:	2101      	movs	r1, #1
10002ccc:	2200      	movs	r2, #0
10002cce:	f7fe fc63 	bl	10001598 <bit_init>
	USIC0_CH0->DX0CR &= ~(0x7);	// Kanal: USIC0_CH0 => DX0D auf P1.1 ( siehe Pin Mapping)
10002cd2:	2390      	movs	r3, #144	; 0x90
10002cd4:	05db      	lsls	r3, r3, #23
10002cd6:	2290      	movs	r2, #144	; 0x90
10002cd8:	05d2      	lsls	r2, r2, #23
10002cda:	69d2      	ldr	r2, [r2, #28]
10002cdc:	2107      	movs	r1, #7
10002cde:	438a      	bics	r2, r1
10002ce0:	61da      	str	r2, [r3, #28]
	USIC0_CH0->DX0CR |= 3;
10002ce2:	2390      	movs	r3, #144	; 0x90
10002ce4:	05db      	lsls	r3, r3, #23
10002ce6:	2290      	movs	r2, #144	; 0x90
10002ce8:	05d2      	lsls	r2, r2, #23
10002cea:	69d2      	ldr	r2, [r2, #28]
10002cec:	2103      	movs	r1, #3
10002cee:	430a      	orrs	r2, r1
10002cf0:	61da      	str	r2, [r3, #28]

	//Tx Pin P1.0
	PORT1->IOCR0 &= 0xffffff07;	// P1.0
10002cf2:	4b1a      	ldr	r3, [pc, #104]	; (10002d5c <uart_init+0x228>)
10002cf4:	4a19      	ldr	r2, [pc, #100]	; (10002d5c <uart_init+0x228>)
10002cf6:	6912      	ldr	r2, [r2, #16]
10002cf8:	21f8      	movs	r1, #248	; 0xf8
10002cfa:	438a      	bics	r2, r1
10002cfc:	611a      	str	r2, [r3, #16]
	PORT1->IOCR0  |= 0x000000B8; // ALT 7 fuer P1.0 => TxD d.h. XMC1100 sendet auf P1.0
10002cfe:	4b17      	ldr	r3, [pc, #92]	; (10002d5c <uart_init+0x228>)
10002d00:	4a16      	ldr	r2, [pc, #88]	; (10002d5c <uart_init+0x228>)
10002d02:	6912      	ldr	r2, [r2, #16]
10002d04:	21b8      	movs	r1, #184	; 0xb8
10002d06:	430a      	orrs	r2, r1
10002d08:	611a      	str	r2, [r3, #16]

	//UART Channel Auswahl auf DCE
	bit_init(0,12,OUTP);
10002d0a:	2000      	movs	r0, #0
10002d0c:	210c      	movs	r1, #12
10002d0e:	2201      	movs	r2, #1
10002d10:	f7fe fc42 	bl	10001598 <bit_init>
	bit_write(0,12,1);
10002d14:	2000      	movs	r0, #0
10002d16:	210c      	movs	r1, #12
10002d18:	2201      	movs	r2, #1
10002d1a:	f7ff fbdd 	bl	100024d8 <bit_write>
	bit_init(0,13,OUTP);
10002d1e:	2000      	movs	r0, #0
10002d20:	210d      	movs	r1, #13
10002d22:	2201      	movs	r2, #1
10002d24:	f7fe fc38 	bl	10001598 <bit_init>
	bit_write(0,13,1);
10002d28:	2000      	movs	r0, #0
10002d2a:	210d      	movs	r1, #13
10002d2c:	2201      	movs	r2, #1
10002d2e:	f7ff fbd3 	bl	100024d8 <bit_write>
}
10002d32:	46bd      	mov	sp, r7
10002d34:	bd80      	pop	{r7, pc}
10002d36:	46c0      	nop			; (mov r8, r8)
10002d38:	40010000 	.word	0x40010000
10002d3c:	40010300 	.word	0x40010300
10002d40:	fffffcff 	.word	0xfffffcff
10002d44:	ffc0ffff 	.word	0xffc0ffff
10002d48:	f0ffffff 	.word	0xf0ffffff
10002d4c:	fffff3ff 	.word	0xfffff3ff
10002d50:	ffffe0ff 	.word	0xffffe0ff
10002d54:	ffffc0ff 	.word	0xffffc0ff
10002d58:	f8ffffc0 	.word	0xf8ffffc0
10002d5c:	40040100 	.word	0x40040100

10002d60 <uart_interrupt_enable>:
	bit_write(0,13,1);
}


void uart_interrupt_enable()
{
10002d60:	b580      	push	{r7, lr}
10002d62:	af00      	add	r7, sp, #0
	USIC0_CH0->CCR  |=0x00004000;
10002d64:	2390      	movs	r3, #144	; 0x90
10002d66:	05db      	lsls	r3, r3, #23
10002d68:	2290      	movs	r2, #144	; 0x90
10002d6a:	05d2      	lsls	r2, r2, #23
10002d6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
10002d6e:	2180      	movs	r1, #128	; 0x80
10002d70:	01c9      	lsls	r1, r1, #7
10002d72:	430a      	orrs	r2, r1
10002d74:	641a      	str	r2, [r3, #64]	; 0x40
	USIC0_CH0->INPR &=0xFFFFF8FF;
10002d76:	2390      	movs	r3, #144	; 0x90
10002d78:	05db      	lsls	r3, r3, #23
10002d7a:	2290      	movs	r2, #144	; 0x90
10002d7c:	05d2      	lsls	r2, r2, #23
10002d7e:	6992      	ldr	r2, [r2, #24]
10002d80:	490c      	ldr	r1, [pc, #48]	; (10002db4 <uart_interrupt_enable+0x54>)
10002d82:	400a      	ands	r2, r1
10002d84:	619a      	str	r2, [r3, #24]
	USIC0_CH0->INPR |=0x00000100; // Interrupt wird auf SR1 gelegt
10002d86:	2390      	movs	r3, #144	; 0x90
10002d88:	05db      	lsls	r3, r3, #23
10002d8a:	2290      	movs	r2, #144	; 0x90
10002d8c:	05d2      	lsls	r2, r2, #23
10002d8e:	6992      	ldr	r2, [r2, #24]
10002d90:	2180      	movs	r1, #128	; 0x80
10002d92:	0049      	lsls	r1, r1, #1
10002d94:	430a      	orrs	r2, r1
10002d96:	619a      	str	r2, [r3, #24]
	USIC0_CH0->PSCR |=0x00000400;
10002d98:	2390      	movs	r3, #144	; 0x90
10002d9a:	05db      	lsls	r3, r3, #23
10002d9c:	2290      	movs	r2, #144	; 0x90
10002d9e:	05d2      	lsls	r2, r2, #23
10002da0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
10002da2:	2180      	movs	r1, #128	; 0x80
10002da4:	00c9      	lsls	r1, r1, #3
10002da6:	430a      	orrs	r2, r1
10002da8:	64da      	str	r2, [r3, #76]	; 0x4c
	NVIC_EnableIRQ(USIC0_1_IRQn); 	// Int Freigabe  SR1 für empfange Zeichen
10002daa:	200a      	movs	r0, #10
10002dac:	f7fe fbda 	bl	10001564 <__NVIC_EnableIRQ>
	//NVIC_EnableIRQ(10); 	// Int Freigabe  SR0 für empfange Zeichen
}
10002db0:	46bd      	mov	sp, r7
10002db2:	bd80      	pop	{r7, pc}
10002db4:	fffff8ff 	.word	0xfffff8ff

10002db8 <uart_put>:
}
//---------------------------------------------------------------
// schreibt ein Byte auf COM
//---------------------------------------------------------------
void uart_put ( char value )
{
10002db8:	b580      	push	{r7, lr}
10002dba:	b082      	sub	sp, #8
10002dbc:	af00      	add	r7, sp, #0
10002dbe:	1c02      	adds	r2, r0, #0
10002dc0:	1dfb      	adds	r3, r7, #7
10002dc2:	701a      	strb	r2, [r3, #0]
	USIC0_CH0->IN[0] = value;
10002dc4:	2390      	movs	r3, #144	; 0x90
10002dc6:	05da      	lsls	r2, r3, #23
10002dc8:	1dfb      	adds	r3, r7, #7
10002dca:	7819      	ldrb	r1, [r3, #0]
10002dcc:	23c0      	movs	r3, #192	; 0xc0
10002dce:	005b      	lsls	r3, r3, #1
10002dd0:	50d1      	str	r1, [r2, r3]
	while((USIC0_CH0->TRBSR & (1U<< 11))  == 0);  // Warten , bis Transmit Buffer empty
10002dd2:	46c0      	nop			; (mov r8, r8)
10002dd4:	2390      	movs	r3, #144	; 0x90
10002dd6:	05da      	lsls	r2, r3, #23
10002dd8:	238a      	movs	r3, #138	; 0x8a
10002dda:	005b      	lsls	r3, r3, #1
10002ddc:	58d2      	ldr	r2, [r2, r3]
10002dde:	2380      	movs	r3, #128	; 0x80
10002de0:	011b      	lsls	r3, r3, #4
10002de2:	4013      	ands	r3, r2
10002de4:	d0f6      	beq.n	10002dd4 <uart_put+0x1c>

}
10002de6:	46bd      	mov	sp, r7
10002de8:	b002      	add	sp, #8
10002dea:	bd80      	pop	{r7, pc}

10002dec <uart_print>:
//---------------------------------------------------------------
// schreibt eine nullterminierte Zeichenfolge auf COM
//---------------------------------------------------------------
void uart_print ( char *text )
{
10002dec:	b580      	push	{r7, lr}
10002dee:	b082      	sub	sp, #8
10002df0:	af00      	add	r7, sp, #0
10002df2:	6078      	str	r0, [r7, #4]
  while (*text != '\0')
10002df4:	e006      	b.n	10002e04 <uart_print+0x18>
    uart_put(*text++);
10002df6:	687b      	ldr	r3, [r7, #4]
10002df8:	1c5a      	adds	r2, r3, #1
10002dfa:	607a      	str	r2, [r7, #4]
10002dfc:	781b      	ldrb	r3, [r3, #0]
10002dfe:	1c18      	adds	r0, r3, #0
10002e00:	f7ff ffda 	bl	10002db8 <uart_put>
//---------------------------------------------------------------
// schreibt eine nullterminierte Zeichenfolge auf COM
//---------------------------------------------------------------
void uart_print ( char *text )
{
  while (*text != '\0')
10002e04:	687b      	ldr	r3, [r7, #4]
10002e06:	781b      	ldrb	r3, [r3, #0]
10002e08:	2b00      	cmp	r3, #0
10002e0a:	d1f4      	bne.n	10002df6 <uart_print+0xa>
    uart_put(*text++);
}
10002e0c:	46bd      	mov	sp, r7
10002e0e:	b002      	add	sp, #8
10002e10:	bd80      	pop	{r7, pc}
10002e12:	46c0      	nop			; (mov r8, r8)

10002e14 <USIC0_1_IRQHandler>:
* rs232_wait_of_enter(), rs232_clear_receivedata()
* Es werden folgende globale Variablen benötigt:
* rs232Receivedata, rs232ReceivedataPointer, rs232EnterReceive
*/
void USIC0_1_IRQHandler(void)
{
10002e14:	b580      	push	{r7, lr}
10002e16:	b082      	sub	sp, #8
10002e18:	af00      	add	r7, sp, #0
	char temp=USIC0_CH0->RBUF & 0xff;	// Rx-Buffer auslesen
10002e1a:	2390      	movs	r3, #144	; 0x90
10002e1c:	05db      	lsls	r3, r3, #23
10002e1e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
10002e20:	1dfb      	adds	r3, r7, #7
10002e22:	701a      	strb	r2, [r3, #0]
	if (temp == '\r') {					// Enterzeichen empfangen?
10002e24:	1dfb      	adds	r3, r7, #7
10002e26:	781b      	ldrb	r3, [r3, #0]
10002e28:	2b0d      	cmp	r3, #13
10002e2a:	d109      	bne.n	10002e40 <USIC0_1_IRQHandler+0x2c>
		uartReceivedata[uartReceivedataPointer]='\0';
10002e2c:	4b0d      	ldr	r3, [pc, #52]	; (10002e64 <USIC0_1_IRQHandler+0x50>)
10002e2e:	781b      	ldrb	r3, [r3, #0]
10002e30:	1c1a      	adds	r2, r3, #0
10002e32:	4b0d      	ldr	r3, [pc, #52]	; (10002e68 <USIC0_1_IRQHandler+0x54>)
10002e34:	2100      	movs	r1, #0
10002e36:	5499      	strb	r1, [r3, r2]
		uartEnterReceive = 1;
10002e38:	4b0c      	ldr	r3, [pc, #48]	; (10002e6c <USIC0_1_IRQHandler+0x58>)
10002e3a:	2201      	movs	r2, #1
10002e3c:	701a      	strb	r2, [r3, #0]
10002e3e:	e006      	b.n	10002e4e <USIC0_1_IRQHandler+0x3a>
	} else {
		uartReceivedata[uartReceivedataPointer]=temp;
10002e40:	4b08      	ldr	r3, [pc, #32]	; (10002e64 <USIC0_1_IRQHandler+0x50>)
10002e42:	781b      	ldrb	r3, [r3, #0]
10002e44:	1c19      	adds	r1, r3, #0
10002e46:	4b08      	ldr	r3, [pc, #32]	; (10002e68 <USIC0_1_IRQHandler+0x54>)
10002e48:	1dfa      	adds	r2, r7, #7
10002e4a:	7812      	ldrb	r2, [r2, #0]
10002e4c:	545a      	strb	r2, [r3, r1]
	}
	uartReceivedataPointer++;
10002e4e:	4b05      	ldr	r3, [pc, #20]	; (10002e64 <USIC0_1_IRQHandler+0x50>)
10002e50:	781b      	ldrb	r3, [r3, #0]
10002e52:	3301      	adds	r3, #1
10002e54:	b2da      	uxtb	r2, r3
10002e56:	4b03      	ldr	r3, [pc, #12]	; (10002e64 <USIC0_1_IRQHandler+0x50>)
10002e58:	701a      	strb	r2, [r3, #0]
	//USIC0_CH0->PSCR |=0x00000400;
	return;
10002e5a:	46c0      	nop			; (mov r8, r8)
}
10002e5c:	46bd      	mov	sp, r7
10002e5e:	b002      	add	sp, #8
10002e60:	bd80      	pop	{r7, pc}
10002e62:	46c0      	nop			; (mov r8, r8)
10002e64:	2000052a 	.word	0x2000052a
10002e68:	20000538 	.word	0x20000538
10002e6c:	2000052b 	.word	0x2000052b

10002e70 <uart_clear_receivedata>:
{
	while (uartEnterReceive==0) {}
	uartEnterReceive=0;
}
void uart_clear_receivedata()
{
10002e70:	b580      	push	{r7, lr}
10002e72:	af00      	add	r7, sp, #0
	uartReceivedata[0]='\0';
10002e74:	4b03      	ldr	r3, [pc, #12]	; (10002e84 <uart_clear_receivedata+0x14>)
10002e76:	2200      	movs	r2, #0
10002e78:	701a      	strb	r2, [r3, #0]
	uartReceivedataPointer=0;
10002e7a:	4b03      	ldr	r3, [pc, #12]	; (10002e88 <uart_clear_receivedata+0x18>)
10002e7c:	2200      	movs	r2, #0
10002e7e:	701a      	strb	r2, [r3, #0]
}
10002e80:	46bd      	mov	sp, r7
10002e82:	bd80      	pop	{r7, pc}
10002e84:	20000538 	.word	0x20000538
10002e88:	2000052a 	.word	0x2000052a

10002e8c <uart_select_channel>:
 * UARTCHANNEL_DCE : P0.12=1 und P0.13=1 => Stecker-Ausgang
 * UARTCHANNEL_DTE : P0.12=0 und P0.13=1 => Buchse Ausgang
 * UARTCHANNEL_0 : P0.12=1 und P0.13=0 => TTL Pegel Kanal 0
 * UARTCHANNEL_1 : P0.12=0 und P0.13=0 => TTL Pegel Kanal 1
 */
void uart_select_channel(uint8_t select) {
10002e8c:	b580      	push	{r7, lr}
10002e8e:	b082      	sub	sp, #8
10002e90:	af00      	add	r7, sp, #0
10002e92:	1c02      	adds	r2, r0, #0
10002e94:	1dfb      	adds	r3, r7, #7
10002e96:	701a      	strb	r2, [r3, #0]
	while((USIC0_CH0->TRBSR & (1U<< 11))  == 0);  // Warten , bis Transmit Buffer empty
10002e98:	46c0      	nop			; (mov r8, r8)
10002e9a:	2390      	movs	r3, #144	; 0x90
10002e9c:	05da      	lsls	r2, r3, #23
10002e9e:	238a      	movs	r3, #138	; 0x8a
10002ea0:	005b      	lsls	r3, r3, #1
10002ea2:	58d2      	ldr	r2, [r2, r3]
10002ea4:	2380      	movs	r3, #128	; 0x80
10002ea6:	011b      	lsls	r3, r3, #4
10002ea8:	4013      	ands	r3, r2
10002eaa:	d0f6      	beq.n	10002e9a <uart_select_channel+0xe>
	//delay_ms(2);
	switch (select) {
10002eac:	1dfb      	adds	r3, r7, #7
10002eae:	781b      	ldrb	r3, [r3, #0]
10002eb0:	2b01      	cmp	r3, #1
10002eb2:	d013      	beq.n	10002edc <uart_select_channel+0x50>
10002eb4:	dc02      	bgt.n	10002ebc <uart_select_channel+0x30>
10002eb6:	2b00      	cmp	r3, #0
10002eb8:	d005      	beq.n	10002ec6 <uart_select_channel+0x3a>
10002eba:	e030      	b.n	10002f1e <uart_select_channel+0x92>
10002ebc:	2b02      	cmp	r3, #2
10002ebe:	d018      	beq.n	10002ef2 <uart_select_channel+0x66>
10002ec0:	2b03      	cmp	r3, #3
10002ec2:	d021      	beq.n	10002f08 <uart_select_channel+0x7c>
10002ec4:	e02b      	b.n	10002f1e <uart_select_channel+0x92>
	  case UARTCHANNEL_DCE:
	    bit_write(0,12,1);
10002ec6:	2000      	movs	r0, #0
10002ec8:	210c      	movs	r1, #12
10002eca:	2201      	movs	r2, #1
10002ecc:	f7ff fb04 	bl	100024d8 <bit_write>
	    bit_write(0,13,1);
10002ed0:	2000      	movs	r0, #0
10002ed2:	210d      	movs	r1, #13
10002ed4:	2201      	movs	r2, #1
10002ed6:	f7ff faff 	bl	100024d8 <bit_write>
	    break;
10002eda:	e020      	b.n	10002f1e <uart_select_channel+0x92>
	  case UARTCHANNEL_DTE:
		bit_write(0,12,0);
10002edc:	2000      	movs	r0, #0
10002ede:	210c      	movs	r1, #12
10002ee0:	2200      	movs	r2, #0
10002ee2:	f7ff faf9 	bl	100024d8 <bit_write>
		bit_write(0,13,1);
10002ee6:	2000      	movs	r0, #0
10002ee8:	210d      	movs	r1, #13
10002eea:	2201      	movs	r2, #1
10002eec:	f7ff faf4 	bl	100024d8 <bit_write>
		break;
10002ef0:	e015      	b.n	10002f1e <uart_select_channel+0x92>
	  case UARTCHANNEL_1:
	    bit_write(0,12,1);
10002ef2:	2000      	movs	r0, #0
10002ef4:	210c      	movs	r1, #12
10002ef6:	2201      	movs	r2, #1
10002ef8:	f7ff faee 	bl	100024d8 <bit_write>
	    bit_write(0,13,0);
10002efc:	2000      	movs	r0, #0
10002efe:	210d      	movs	r1, #13
10002f00:	2200      	movs	r2, #0
10002f02:	f7ff fae9 	bl	100024d8 <bit_write>
	    break;
10002f06:	e00a      	b.n	10002f1e <uart_select_channel+0x92>
	  case UARTCHANNEL_0:
		bit_write(0,12,0);
10002f08:	2000      	movs	r0, #0
10002f0a:	210c      	movs	r1, #12
10002f0c:	2200      	movs	r2, #0
10002f0e:	f7ff fae3 	bl	100024d8 <bit_write>
		bit_write(0,13,0);
10002f12:	2000      	movs	r0, #0
10002f14:	210d      	movs	r1, #13
10002f16:	2200      	movs	r2, #0
10002f18:	f7ff fade 	bl	100024d8 <bit_write>
		break;
10002f1c:	46c0      	nop			; (mov r8, r8)
	}
}
10002f1e:	46bd      	mov	sp, r7
10002f20:	b002      	add	sp, #8
10002f22:	bd80      	pop	{r7, pc}

10002f24 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void __NVIC_SystemReset(void)
{
10002f24:	b580      	push	{r7, lr}
10002f26:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
10002f28:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10002f2c:	4b03      	ldr	r3, [pc, #12]	; (10002f3c <__NVIC_SystemReset+0x18>)
10002f2e:	4a04      	ldr	r2, [pc, #16]	; (10002f40 <__NVIC_SystemReset+0x1c>)
10002f30:	60da      	str	r2, [r3, #12]
10002f32:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
10002f36:	46c0      	nop			; (mov r8, r8)
  }
10002f38:	e7fd      	b.n	10002f36 <__NVIC_SystemReset+0x12>
10002f3a:	46c0      	nop			; (mov r8, r8)
10002f3c:	e000ed00 	.word	0xe000ed00
10002f40:	05fa0004 	.word	0x05fa0004

10002f44 <main>:

void handleNewObject();
void sortObject();
void test(int onOrOff);

int main(void) {
10002f44:	b580      	push	{r7, lr}
10002f46:	af00      	add	r7, sp, #0
	init();
10002f48:	f7fe f91e 	bl	10001188 <init>
	LEDStripes(OFF);
10002f4c:	2000      	movs	r0, #0
10002f4e:	f7fe f9a7 	bl	100012a0 <LEDStripes>
	productionLine(0, FORWARD);
10002f52:	2000      	movs	r0, #0
10002f54:	2100      	movs	r1, #0
10002f56:	f7fe f9e5 	bl	10001324 <productionLine>
	slider(0, SLIDERFORWARD);
10002f5a:	2000      	movs	r0, #0
10002f5c:	2100      	movs	r1, #0
10002f5e:	f7fe fae1 	bl	10001524 <slider>
	test(OFF);
10002f62:	2000      	movs	r0, #0
10002f64:	f000 f920 	bl	100031a8 <test>

	while (1U) {
		laser(ON);
10002f68:	2001      	movs	r0, #1
10002f6a:	f7fe f983 	bl	10001274 <laser>
		// New object handling
		if (lightBarrier2() == OFF && handleObjectMovingAway == 0) {
10002f6e:	f7fe fa25 	bl	100013bc <lightBarrier2>
10002f72:	1e03      	subs	r3, r0, #0
10002f74:	d105      	bne.n	10002f82 <main+0x3e>
10002f76:	4b25      	ldr	r3, [pc, #148]	; (1000300c <main+0xc8>)
10002f78:	681b      	ldr	r3, [r3, #0]
10002f7a:	2b00      	cmp	r3, #0
10002f7c:	d101      	bne.n	10002f82 <main+0x3e>
			handleNewObject();
10002f7e:	f000 f84f 	bl	10003020 <handleNewObject>
		}

		// Object sorting if necessary
		if (lightBarrier1() == OFF && numObjects > 0
10002f82:	f7fe f9ef 	bl	10001364 <lightBarrier1>
10002f86:	1e03      	subs	r3, r0, #0
10002f88:	d109      	bne.n	10002f9e <main+0x5a>
10002f8a:	4b21      	ldr	r3, [pc, #132]	; (10003010 <main+0xcc>)
10002f8c:	681b      	ldr	r3, [r3, #0]
10002f8e:	2b00      	cmp	r3, #0
10002f90:	dd05      	ble.n	10002f9e <main+0x5a>
				&& sortObjectMovingAway == 0) {
10002f92:	4b20      	ldr	r3, [pc, #128]	; (10003014 <main+0xd0>)
10002f94:	681b      	ldr	r3, [r3, #0]
10002f96:	2b00      	cmp	r3, #0
10002f98:	d101      	bne.n	10002f9e <main+0x5a>
			sortObject();
10002f9a:	f000 f8af 	bl	100030fc <sortObject>
		}

		// Reset flags
		if (lightBarrier2() == ON) {
10002f9e:	f7fe fa0d 	bl	100013bc <lightBarrier2>
10002fa2:	1e03      	subs	r3, r0, #0
10002fa4:	2b01      	cmp	r3, #1
10002fa6:	d102      	bne.n	10002fae <main+0x6a>
			handleObjectMovingAway = 0;
10002fa8:	4b18      	ldr	r3, [pc, #96]	; (1000300c <main+0xc8>)
10002faa:	2200      	movs	r2, #0
10002fac:	601a      	str	r2, [r3, #0]
		}
		if (lightBarrier1() == ON) {
10002fae:	f7fe f9d9 	bl	10001364 <lightBarrier1>
10002fb2:	1e03      	subs	r3, r0, #0
10002fb4:	2b01      	cmp	r3, #1
10002fb6:	d102      	bne.n	10002fbe <main+0x7a>
			sortObjectMovingAway = 0;
10002fb8:	4b16      	ldr	r3, [pc, #88]	; (10003014 <main+0xd0>)
10002fba:	2200      	movs	r2, #0
10002fbc:	601a      	str	r2, [r3, #0]
		}

		// Reset the slider if the button is pressed
		if (readButton1() == ON) {
10002fbe:	f7fe fa81 	bl	100014c4 <readButton1>
10002fc2:	1e03      	subs	r3, r0, #0
10002fc4:	2b01      	cmp	r3, #1
10002fc6:	d10d      	bne.n	10002fe4 <main+0xa0>
			// slider to max backward position
			slider(50000, SLIDERBACKWARD);
10002fc8:	4b13      	ldr	r3, [pc, #76]	; (10003018 <main+0xd4>)
10002fca:	1c18      	adds	r0, r3, #0
10002fcc:	2101      	movs	r1, #1
10002fce:	f7fe faa9 	bl	10001524 <slider>
			while (readInductivSensor1() == 0)
10002fd2:	46c0      	nop			; (mov r8, r8)
10002fd4:	f7fe fa92 	bl	100014fc <readInductivSensor1>
10002fd8:	1e03      	subs	r3, r0, #0
10002fda:	d0fb      	beq.n	10002fd4 <main+0x90>
				;
			// slider stops
			slider(0, SLIDERFORWARD);
10002fdc:	2000      	movs	r0, #0
10002fde:	2100      	movs	r1, #0
10002fe0:	f7fe faa0 	bl	10001524 <slider>
		}

		// reset system, if button 2 is pressed
		if (readButton2() == ON) {
10002fe4:	f7fe fa7c 	bl	100014e0 <readButton2>
10002fe8:	1e03      	subs	r3, r0, #0
10002fea:	2b01      	cmp	r3, #1
10002fec:	d107      	bne.n	10002ffe <main+0xba>
			// wait till the button is released
			while (readButton2() == ON)
10002fee:	46c0      	nop			; (mov r8, r8)
10002ff0:	f7fe fa76 	bl	100014e0 <readButton2>
10002ff4:	1e03      	subs	r3, r0, #0
10002ff6:	2b01      	cmp	r3, #1
10002ff8:	d0fa      	beq.n	10002ff0 <main+0xac>
				;
			// reset the system
			NVIC_SystemReset();
10002ffa:	f7ff ff93 	bl	10002f24 <__NVIC_SystemReset>
		}

		productionLine(PRODUCTION_LINE_MAX_SPEED, FORWARD);
10002ffe:	4b07      	ldr	r3, [pc, #28]	; (1000301c <main+0xd8>)
10003000:	1c18      	adds	r0, r3, #0
10003002:	2100      	movs	r1, #0
10003004:	f7fe f98e 	bl	10001324 <productionLine>
	}
10003008:	e7ae      	b.n	10002f68 <main+0x24>
1000300a:	46c0      	nop			; (mov r8, r8)
1000300c:	20000530 	.word	0x20000530
10003010:	2000052c 	.word	0x2000052c
10003014:	20000534 	.word	0x20000534
10003018:	0000c350 	.word	0x0000c350
1000301c:	00003a98 	.word	0x00003a98

10003020 <handleNewObject>:

	return 0; // Added return statement for formality, though it will never be reached in this loop
}

void handleNewObject() {
10003020:	b580      	push	{r7, lr}
10003022:	af00      	add	r7, sp, #0
	handleObjectMovingAway = 1;
10003024:	4b2d      	ldr	r3, [pc, #180]	; (100030dc <handleNewObject+0xbc>)
10003026:	2201      	movs	r2, #1
10003028:	601a      	str	r2, [r3, #0]

	productionLine(0, FORWARD);
1000302a:	2000      	movs	r0, #0
1000302c:	2100      	movs	r1, #0
1000302e:	f7fe f979 	bl	10001324 <productionLine>

	LEDStripes(ON);
10003032:	2001      	movs	r0, #1
10003034:	f7fe f934 	bl	100012a0 <LEDStripes>
	laser(OFF);
10003038:	2000      	movs	r0, #0
1000303a:	f7fe f91b 	bl	10001274 <laser>

	pneumatics1(OUT);
1000303e:	2001      	movs	r0, #1
10003040:	f7fe fa14 	bl	1000146c <pneumatics1>

	// Get classification
	uart_print("Good or bad?\n\r");
10003044:	4b26      	ldr	r3, [pc, #152]	; (100030e0 <handleNewObject+0xc0>)
10003046:	1c18      	adds	r0, r3, #0
10003048:	f7ff fed0 	bl	10002dec <uart_print>

	// uart_wait_of_enter();
	while (uartEnterReceive == 0) {
1000304c:	e00c      	b.n	10003068 <handleNewObject+0x48>
		if (readButton2() == ON) {
1000304e:	f7fe fa47 	bl	100014e0 <readButton2>
10003052:	1e03      	subs	r3, r0, #0
10003054:	2b01      	cmp	r3, #1
10003056:	d107      	bne.n	10003068 <handleNewObject+0x48>
			// wait till the button is released
			while (readButton2() == ON)
10003058:	46c0      	nop			; (mov r8, r8)
1000305a:	f7fe fa41 	bl	100014e0 <readButton2>
1000305e:	1e03      	subs	r3, r0, #0
10003060:	2b01      	cmp	r3, #1
10003062:	d0fa      	beq.n	1000305a <handleNewObject+0x3a>
				;
			// reset the system
			NVIC_SystemReset();
10003064:	f7ff ff5e 	bl	10002f24 <__NVIC_SystemReset>

	// Get classification
	uart_print("Good or bad?\n\r");

	// uart_wait_of_enter();
	while (uartEnterReceive == 0) {
10003068:	4b1e      	ldr	r3, [pc, #120]	; (100030e4 <handleNewObject+0xc4>)
1000306a:	781b      	ldrb	r3, [r3, #0]
1000306c:	2b00      	cmp	r3, #0
1000306e:	d0ee      	beq.n	1000304e <handleNewObject+0x2e>
				;
			// reset the system
			NVIC_SystemReset();
		}
	}
	uartEnterReceive = 0;
10003070:	4b1c      	ldr	r3, [pc, #112]	; (100030e4 <handleNewObject+0xc4>)
10003072:	2200      	movs	r2, #0
10003074:	701a      	strb	r2, [r3, #0]

	rs232_print(uartReceivedata);
10003076:	4b1c      	ldr	r3, [pc, #112]	; (100030e8 <handleNewObject+0xc8>)
10003078:	1c18      	adds	r0, r3, #0
1000307a:	f7ff fd19 	bl	10002ab0 <rs232_print>

	pneumatics1(IN);
1000307e:	2000      	movs	r0, #0
10003080:	f7fe f9f4 	bl	1000146c <pneumatics1>

	// Save if apple is good or bad in the nextObjects array (append to the end of the array)
	if (uartReceivedata[0] == 'n') {
10003084:	4b18      	ldr	r3, [pc, #96]	; (100030e8 <handleNewObject+0xc8>)
10003086:	781b      	ldrb	r3, [r3, #0]
10003088:	2b6e      	cmp	r3, #110	; 0x6e
1000308a:	d104      	bne.n	10003096 <handleNewObject+0x76>
		// do nothing
		rs232_print("Do nothing.");
1000308c:	4b17      	ldr	r3, [pc, #92]	; (100030ec <handleNewObject+0xcc>)
1000308e:	1c18      	adds	r0, r3, #0
10003090:	f7ff fd0e 	bl	10002ab0 <rs232_print>
10003094:	e012      	b.n	100030bc <handleNewObject+0x9c>
	} else if (numObjects < MAX_OBJECTS) {
10003096:	4b16      	ldr	r3, [pc, #88]	; (100030f0 <handleNewObject+0xd0>)
10003098:	681b      	ldr	r3, [r3, #0]
1000309a:	2b63      	cmp	r3, #99	; 0x63
1000309c:	dc0e      	bgt.n	100030bc <handleNewObject+0x9c>
		nextObjects[numObjects++] = (
1000309e:	4b14      	ldr	r3, [pc, #80]	; (100030f0 <handleNewObject+0xd0>)
100030a0:	681b      	ldr	r3, [r3, #0]
100030a2:	1c59      	adds	r1, r3, #1
100030a4:	4a12      	ldr	r2, [pc, #72]	; (100030f0 <handleNewObject+0xd0>)
100030a6:	6011      	str	r1, [r2, #0]
				uartReceivedata[0] == 'd' ? DONTSORTOUT : SORTOUT); // Fixed logic for good/bad apple
100030a8:	4a0f      	ldr	r2, [pc, #60]	; (100030e8 <handleNewObject+0xc8>)
100030aa:	7812      	ldrb	r2, [r2, #0]
100030ac:	3a64      	subs	r2, #100	; 0x64
100030ae:	1e51      	subs	r1, r2, #1
100030b0:	418a      	sbcs	r2, r1
100030b2:	b2d2      	uxtb	r2, r2
100030b4:	1c11      	adds	r1, r2, #0
	// Save if apple is good or bad in the nextObjects array (append to the end of the array)
	if (uartReceivedata[0] == 'n') {
		// do nothing
		rs232_print("Do nothing.");
	} else if (numObjects < MAX_OBJECTS) {
		nextObjects[numObjects++] = (
100030b6:	4a0f      	ldr	r2, [pc, #60]	; (100030f4 <handleNewObject+0xd4>)
100030b8:	009b      	lsls	r3, r3, #2
100030ba:	5099      	str	r1, [r3, r2]
				uartReceivedata[0] == 'd' ? DONTSORTOUT : SORTOUT); // Fixed logic for good/bad apple
	}
	uart_clear_receivedata();
100030bc:	f7ff fed8 	bl	10002e70 <uart_clear_receivedata>

	laser(ON);
100030c0:	2001      	movs	r0, #1
100030c2:	f7fe f8d7 	bl	10001274 <laser>
	LEDStripes(OFF);
100030c6:	2000      	movs	r0, #0
100030c8:	f7fe f8ea 	bl	100012a0 <LEDStripes>
	productionLine(PRODUCTION_LINE_MAX_SPEED, FORWARD);
100030cc:	4b0a      	ldr	r3, [pc, #40]	; (100030f8 <handleNewObject+0xd8>)
100030ce:	1c18      	adds	r0, r3, #0
100030d0:	2100      	movs	r1, #0
100030d2:	f7fe f927 	bl	10001324 <productionLine>
}
100030d6:	46bd      	mov	sp, r7
100030d8:	bd80      	pop	{r7, pc}
100030da:	46c0      	nop			; (mov r8, r8)
100030dc:	20000530 	.word	0x20000530
100030e0:	10003454 	.word	0x10003454
100030e4:	2000052b 	.word	0x2000052b
100030e8:	20000538 	.word	0x20000538
100030ec:	10003464 	.word	0x10003464
100030f0:	2000052c 	.word	0x2000052c
100030f4:	20000738 	.word	0x20000738
100030f8:	00003a98 	.word	0x00003a98

100030fc <sortObject>:

void sortObject() {
100030fc:	b580      	push	{r7, lr}
100030fe:	b082      	sub	sp, #8
10003100:	af00      	add	r7, sp, #0
	sortObjectMovingAway = 1;
10003102:	4b24      	ldr	r3, [pc, #144]	; (10003194 <sortObject+0x98>)
10003104:	2201      	movs	r2, #1
10003106:	601a      	str	r2, [r3, #0]

	productionLine(0, FORWARD);
10003108:	2000      	movs	r0, #0
1000310a:	2100      	movs	r1, #0
1000310c:	f7fe f90a 	bl	10001324 <productionLine>
	if (nextObjects[0] == SORTOUT) {
10003110:	4b21      	ldr	r3, [pc, #132]	; (10003198 <sortObject+0x9c>)
10003112:	681b      	ldr	r3, [r3, #0]
10003114:	2b01      	cmp	r3, #1
10003116:	d117      	bne.n	10003148 <sortObject+0x4c>
		slider(50000, SLIDERFORWARD);
10003118:	4b20      	ldr	r3, [pc, #128]	; (1000319c <sortObject+0xa0>)
1000311a:	1c18      	adds	r0, r3, #0
1000311c:	2100      	movs	r1, #0
1000311e:	f7fe fa01 	bl	10001524 <slider>
		while (readInductivSensor2() == 0)
10003122:	46c0      	nop			; (mov r8, r8)
10003124:	f7fe f9f4 	bl	10001510 <readInductivSensor2>
10003128:	1e03      	subs	r3, r0, #0
1000312a:	d0fb      	beq.n	10003124 <sortObject+0x28>
			;
		slider(50000, SLIDERBACKWARD);
1000312c:	4b1b      	ldr	r3, [pc, #108]	; (1000319c <sortObject+0xa0>)
1000312e:	1c18      	adds	r0, r3, #0
10003130:	2101      	movs	r1, #1
10003132:	f7fe f9f7 	bl	10001524 <slider>
		while (readInductivSensor1() == 0)
10003136:	46c0      	nop			; (mov r8, r8)
10003138:	f7fe f9e0 	bl	100014fc <readInductivSensor1>
1000313c:	1e03      	subs	r3, r0, #0
1000313e:	d0fb      	beq.n	10003138 <sortObject+0x3c>
			;
		// slider stops
		slider(0, SLIDERFORWARD);
10003140:	2000      	movs	r0, #0
10003142:	2100      	movs	r1, #0
10003144:	f7fe f9ee 	bl	10001524 <slider>
	}
	// Shift the nextObjects array elements left, deleting the first element
	for (int i = 1; i < numObjects; i++) {
10003148:	2301      	movs	r3, #1
1000314a:	607b      	str	r3, [r7, #4]
1000314c:	e00b      	b.n	10003166 <sortObject+0x6a>
		nextObjects[i - 1] = nextObjects[i];
1000314e:	687b      	ldr	r3, [r7, #4]
10003150:	1e5a      	subs	r2, r3, #1
10003152:	4b11      	ldr	r3, [pc, #68]	; (10003198 <sortObject+0x9c>)
10003154:	6879      	ldr	r1, [r7, #4]
10003156:	0089      	lsls	r1, r1, #2
10003158:	58c9      	ldr	r1, [r1, r3]
1000315a:	4b0f      	ldr	r3, [pc, #60]	; (10003198 <sortObject+0x9c>)
1000315c:	0092      	lsls	r2, r2, #2
1000315e:	50d1      	str	r1, [r2, r3]
			;
		// slider stops
		slider(0, SLIDERFORWARD);
	}
	// Shift the nextObjects array elements left, deleting the first element
	for (int i = 1; i < numObjects; i++) {
10003160:	687b      	ldr	r3, [r7, #4]
10003162:	3301      	adds	r3, #1
10003164:	607b      	str	r3, [r7, #4]
10003166:	4b0e      	ldr	r3, [pc, #56]	; (100031a0 <sortObject+0xa4>)
10003168:	681b      	ldr	r3, [r3, #0]
1000316a:	687a      	ldr	r2, [r7, #4]
1000316c:	429a      	cmp	r2, r3
1000316e:	dbee      	blt.n	1000314e <sortObject+0x52>
		nextObjects[i - 1] = nextObjects[i];
	}
	if (numObjects > 0)
10003170:	4b0b      	ldr	r3, [pc, #44]	; (100031a0 <sortObject+0xa4>)
10003172:	681b      	ldr	r3, [r3, #0]
10003174:	2b00      	cmp	r3, #0
10003176:	dd04      	ble.n	10003182 <sortObject+0x86>
		numObjects--; // Decrease the objects count after sorting one out
10003178:	4b09      	ldr	r3, [pc, #36]	; (100031a0 <sortObject+0xa4>)
1000317a:	681b      	ldr	r3, [r3, #0]
1000317c:	1e5a      	subs	r2, r3, #1
1000317e:	4b08      	ldr	r3, [pc, #32]	; (100031a0 <sortObject+0xa4>)
10003180:	601a      	str	r2, [r3, #0]
	productionLine(PRODUCTION_LINE_MAX_SPEED, FORWARD);
10003182:	4b08      	ldr	r3, [pc, #32]	; (100031a4 <sortObject+0xa8>)
10003184:	1c18      	adds	r0, r3, #0
10003186:	2100      	movs	r1, #0
10003188:	f7fe f8cc 	bl	10001324 <productionLine>
}
1000318c:	46bd      	mov	sp, r7
1000318e:	b002      	add	sp, #8
10003190:	bd80      	pop	{r7, pc}
10003192:	46c0      	nop			; (mov r8, r8)
10003194:	20000534 	.word	0x20000534
10003198:	20000738 	.word	0x20000738
1000319c:	0000c350 	.word	0x0000c350
100031a0:	2000052c 	.word	0x2000052c
100031a4:	00003a98 	.word	0x00003a98

100031a8 <test>:

void test(int onOrOff) {
100031a8:	b580      	push	{r7, lr}
100031aa:	b082      	sub	sp, #8
100031ac:	af00      	add	r7, sp, #0
100031ae:	6078      	str	r0, [r7, #4]
	if (!onOrOff) {
100031b0:	687b      	ldr	r3, [r7, #4]
100031b2:	2b00      	cmp	r3, #0
100031b4:	d110      	bne.n	100031d8 <test+0x30>
		// shut everything down
		laser(OFF);
100031b6:	2000      	movs	r0, #0
100031b8:	f7fe f85c 	bl	10001274 <laser>
		LEDStripes(OFF);
100031bc:	2000      	movs	r0, #0
100031be:	f7fe f86f 	bl	100012a0 <LEDStripes>
		redLED(OFF);
100031c2:	2000      	movs	r0, #0
100031c4:	f7fe f882 	bl	100012cc <redLED>
		greenLED(OFF);
100031c8:	2000      	movs	r0, #0
100031ca:	f7fe f895 	bl	100012f8 <greenLED>
		productionLine(0, FORWARD);
100031ce:	2000      	movs	r0, #0
100031d0:	2100      	movs	r1, #0
100031d2:	f7fe f8a7 	bl	10001324 <productionLine>
		return;
100031d6:	e07f      	b.n	100032d8 <test+0x130>
	}

	// light test: manual check
	laser(ON);
100031d8:	2001      	movs	r0, #1
100031da:	f7fe f84b 	bl	10001274 <laser>
	LEDStripes(ON);
100031de:	2001      	movs	r0, #1
100031e0:	f7fe f85e 	bl	100012a0 <LEDStripes>
	redLED(ON);
100031e4:	2001      	movs	r0, #1
100031e6:	f7fe f871 	bl	100012cc <redLED>
	greenLED(ON);
100031ea:	2001      	movs	r0, #1
100031ec:	f7fe f884 	bl	100012f8 <greenLED>
	delay_ms(5000);
100031f0:	4b3b      	ldr	r3, [pc, #236]	; (100032e0 <test+0x138>)
100031f2:	1c18      	adds	r0, r3, #0
100031f4:	f7ff fb34 	bl	10002860 <delay_ms>
	LEDStripes(OFF);
100031f8:	2000      	movs	r0, #0
100031fa:	f7fe f851 	bl	100012a0 <LEDStripes>
	redLED(OFF);
100031fe:	2000      	movs	r0, #0
10003200:	f7fe f864 	bl	100012cc <redLED>
	greenLED(OFF);
10003204:	2000      	movs	r0, #0
10003206:	f7fe f877 	bl	100012f8 <greenLED>
	delay_ms(2000);
1000320a:	23fa      	movs	r3, #250	; 0xfa
1000320c:	00db      	lsls	r3, r3, #3
1000320e:	1c18      	adds	r0, r3, #0
10003210:	f7ff fb26 	bl	10002860 <delay_ms>

	// check lightbarriers: automatic check
	if (lightBarrier1()) {
10003214:	f7fe f8a6 	bl	10001364 <lightBarrier1>
10003218:	1e03      	subs	r3, r0, #0
1000321a:	d003      	beq.n	10003224 <test+0x7c>
		greenLED(ON);
1000321c:	2001      	movs	r0, #1
1000321e:	f7fe f86b 	bl	100012f8 <greenLED>
10003222:	e002      	b.n	1000322a <test+0x82>
	} else {
		redLED(ON);
10003224:	2001      	movs	r0, #1
10003226:	f7fe f851 	bl	100012cc <redLED>
	}
	delay_ms(1000);
1000322a:	23fa      	movs	r3, #250	; 0xfa
1000322c:	009b      	lsls	r3, r3, #2
1000322e:	1c18      	adds	r0, r3, #0
10003230:	f7ff fb16 	bl	10002860 <delay_ms>
	redLED(OFF);
10003234:	2000      	movs	r0, #0
10003236:	f7fe f849 	bl	100012cc <redLED>
	greenLED(OFF);
1000323a:	2000      	movs	r0, #0
1000323c:	f7fe f85c 	bl	100012f8 <greenLED>
	delay_ms(500);
10003240:	23fa      	movs	r3, #250	; 0xfa
10003242:	005b      	lsls	r3, r3, #1
10003244:	1c18      	adds	r0, r3, #0
10003246:	f7ff fb0b 	bl	10002860 <delay_ms>
	if (lightBarrier2()) {
1000324a:	f7fe f8b7 	bl	100013bc <lightBarrier2>
1000324e:	1e03      	subs	r3, r0, #0
10003250:	d003      	beq.n	1000325a <test+0xb2>
		greenLED(ON);
10003252:	2001      	movs	r0, #1
10003254:	f7fe f850 	bl	100012f8 <greenLED>
10003258:	e002      	b.n	10003260 <test+0xb8>
	} else {
		redLED(ON);
1000325a:	2001      	movs	r0, #1
1000325c:	f7fe f836 	bl	100012cc <redLED>
	}
	delay_ms(1000);
10003260:	23fa      	movs	r3, #250	; 0xfa
10003262:	009b      	lsls	r3, r3, #2
10003264:	1c18      	adds	r0, r3, #0
10003266:	f7ff fafb 	bl	10002860 <delay_ms>
	redLED(OFF);
1000326a:	2000      	movs	r0, #0
1000326c:	f7fe f82e 	bl	100012cc <redLED>
	greenLED(OFF);
10003270:	2000      	movs	r0, #0
10003272:	f7fe f841 	bl	100012f8 <greenLED>
	delay_ms(500);
10003276:	23fa      	movs	r3, #250	; 0xfa
10003278:	005b      	lsls	r3, r3, #1
1000327a:	1c18      	adds	r0, r3, #0
1000327c:	f7ff faf0 	bl	10002860 <delay_ms>
	if (lightBarrier3()) {
10003280:	f7fe f8c8 	bl	10001414 <lightBarrier3>
10003284:	1e03      	subs	r3, r0, #0
10003286:	d003      	beq.n	10003290 <test+0xe8>
		greenLED(ON);
10003288:	2001      	movs	r0, #1
1000328a:	f7fe f835 	bl	100012f8 <greenLED>
1000328e:	e002      	b.n	10003296 <test+0xee>
	} else {
		redLED(ON);
10003290:	2001      	movs	r0, #1
10003292:	f7fe f81b 	bl	100012cc <redLED>
	}
	delay_ms(1000);
10003296:	23fa      	movs	r3, #250	; 0xfa
10003298:	009b      	lsls	r3, r3, #2
1000329a:	1c18      	adds	r0, r3, #0
1000329c:	f7ff fae0 	bl	10002860 <delay_ms>
	redLED(OFF);
100032a0:	2000      	movs	r0, #0
100032a2:	f7fe f813 	bl	100012cc <redLED>
	greenLED(OFF);
100032a6:	2000      	movs	r0, #0
100032a8:	f7fe f826 	bl	100012f8 <greenLED>
	 delay_ms(1000);
	 productionLine(0, FORWARD);
	 */

	// check pneumatics1
	pneumatics1(OUT);
100032ac:	2001      	movs	r0, #1
100032ae:	f7fe f8dd 	bl	1000146c <pneumatics1>
	delay_ms(1000);
100032b2:	23fa      	movs	r3, #250	; 0xfa
100032b4:	009b      	lsls	r3, r3, #2
100032b6:	1c18      	adds	r0, r3, #0
100032b8:	f7ff fad2 	bl	10002860 <delay_ms>
	pneumatics1(IN);
100032bc:	2000      	movs	r0, #0
100032be:	f7fe f8d5 	bl	1000146c <pneumatics1>
	pneumatics2(OUT);
100032c2:	2001      	movs	r0, #1
100032c4:	f7fe f8e8 	bl	10001498 <pneumatics2>
	delay_ms(1000);
100032c8:	23fa      	movs	r3, #250	; 0xfa
100032ca:	009b      	lsls	r3, r3, #2
100032cc:	1c18      	adds	r0, r3, #0
100032ce:	f7ff fac7 	bl	10002860 <delay_ms>
	pneumatics2(IN);
100032d2:	2000      	movs	r0, #0
100032d4:	f7fe f8e0 	bl	10001498 <pneumatics2>
}
100032d8:	46bd      	mov	sp, r7
100032da:	b002      	add	sp, #8
100032dc:	bd80      	pop	{r7, pc}
100032de:	46c0      	nop			; (mov r8, r8)
100032e0:	00001388 	.word	0x00001388

100032e4 <__aeabi_uidiv>:
100032e4:	2200      	movs	r2, #0
100032e6:	0843      	lsrs	r3, r0, #1
100032e8:	428b      	cmp	r3, r1
100032ea:	d374      	bcc.n	100033d6 <__aeabi_uidiv+0xf2>
100032ec:	0903      	lsrs	r3, r0, #4
100032ee:	428b      	cmp	r3, r1
100032f0:	d35f      	bcc.n	100033b2 <__aeabi_uidiv+0xce>
100032f2:	0a03      	lsrs	r3, r0, #8
100032f4:	428b      	cmp	r3, r1
100032f6:	d344      	bcc.n	10003382 <__aeabi_uidiv+0x9e>
100032f8:	0b03      	lsrs	r3, r0, #12
100032fa:	428b      	cmp	r3, r1
100032fc:	d328      	bcc.n	10003350 <__aeabi_uidiv+0x6c>
100032fe:	0c03      	lsrs	r3, r0, #16
10003300:	428b      	cmp	r3, r1
10003302:	d30d      	bcc.n	10003320 <__aeabi_uidiv+0x3c>
10003304:	22ff      	movs	r2, #255	; 0xff
10003306:	0209      	lsls	r1, r1, #8
10003308:	ba12      	rev	r2, r2
1000330a:	0c03      	lsrs	r3, r0, #16
1000330c:	428b      	cmp	r3, r1
1000330e:	d302      	bcc.n	10003316 <__aeabi_uidiv+0x32>
10003310:	1212      	asrs	r2, r2, #8
10003312:	0209      	lsls	r1, r1, #8
10003314:	d065      	beq.n	100033e2 <__aeabi_uidiv+0xfe>
10003316:	0b03      	lsrs	r3, r0, #12
10003318:	428b      	cmp	r3, r1
1000331a:	d319      	bcc.n	10003350 <__aeabi_uidiv+0x6c>
1000331c:	e000      	b.n	10003320 <__aeabi_uidiv+0x3c>
1000331e:	0a09      	lsrs	r1, r1, #8
10003320:	0bc3      	lsrs	r3, r0, #15
10003322:	428b      	cmp	r3, r1
10003324:	d301      	bcc.n	1000332a <__aeabi_uidiv+0x46>
10003326:	03cb      	lsls	r3, r1, #15
10003328:	1ac0      	subs	r0, r0, r3
1000332a:	4152      	adcs	r2, r2
1000332c:	0b83      	lsrs	r3, r0, #14
1000332e:	428b      	cmp	r3, r1
10003330:	d301      	bcc.n	10003336 <__aeabi_uidiv+0x52>
10003332:	038b      	lsls	r3, r1, #14
10003334:	1ac0      	subs	r0, r0, r3
10003336:	4152      	adcs	r2, r2
10003338:	0b43      	lsrs	r3, r0, #13
1000333a:	428b      	cmp	r3, r1
1000333c:	d301      	bcc.n	10003342 <__aeabi_uidiv+0x5e>
1000333e:	034b      	lsls	r3, r1, #13
10003340:	1ac0      	subs	r0, r0, r3
10003342:	4152      	adcs	r2, r2
10003344:	0b03      	lsrs	r3, r0, #12
10003346:	428b      	cmp	r3, r1
10003348:	d301      	bcc.n	1000334e <__aeabi_uidiv+0x6a>
1000334a:	030b      	lsls	r3, r1, #12
1000334c:	1ac0      	subs	r0, r0, r3
1000334e:	4152      	adcs	r2, r2
10003350:	0ac3      	lsrs	r3, r0, #11
10003352:	428b      	cmp	r3, r1
10003354:	d301      	bcc.n	1000335a <__aeabi_uidiv+0x76>
10003356:	02cb      	lsls	r3, r1, #11
10003358:	1ac0      	subs	r0, r0, r3
1000335a:	4152      	adcs	r2, r2
1000335c:	0a83      	lsrs	r3, r0, #10
1000335e:	428b      	cmp	r3, r1
10003360:	d301      	bcc.n	10003366 <__aeabi_uidiv+0x82>
10003362:	028b      	lsls	r3, r1, #10
10003364:	1ac0      	subs	r0, r0, r3
10003366:	4152      	adcs	r2, r2
10003368:	0a43      	lsrs	r3, r0, #9
1000336a:	428b      	cmp	r3, r1
1000336c:	d301      	bcc.n	10003372 <__aeabi_uidiv+0x8e>
1000336e:	024b      	lsls	r3, r1, #9
10003370:	1ac0      	subs	r0, r0, r3
10003372:	4152      	adcs	r2, r2
10003374:	0a03      	lsrs	r3, r0, #8
10003376:	428b      	cmp	r3, r1
10003378:	d301      	bcc.n	1000337e <__aeabi_uidiv+0x9a>
1000337a:	020b      	lsls	r3, r1, #8
1000337c:	1ac0      	subs	r0, r0, r3
1000337e:	4152      	adcs	r2, r2
10003380:	d2cd      	bcs.n	1000331e <__aeabi_uidiv+0x3a>
10003382:	09c3      	lsrs	r3, r0, #7
10003384:	428b      	cmp	r3, r1
10003386:	d301      	bcc.n	1000338c <__aeabi_uidiv+0xa8>
10003388:	01cb      	lsls	r3, r1, #7
1000338a:	1ac0      	subs	r0, r0, r3
1000338c:	4152      	adcs	r2, r2
1000338e:	0983      	lsrs	r3, r0, #6
10003390:	428b      	cmp	r3, r1
10003392:	d301      	bcc.n	10003398 <__aeabi_uidiv+0xb4>
10003394:	018b      	lsls	r3, r1, #6
10003396:	1ac0      	subs	r0, r0, r3
10003398:	4152      	adcs	r2, r2
1000339a:	0943      	lsrs	r3, r0, #5
1000339c:	428b      	cmp	r3, r1
1000339e:	d301      	bcc.n	100033a4 <__aeabi_uidiv+0xc0>
100033a0:	014b      	lsls	r3, r1, #5
100033a2:	1ac0      	subs	r0, r0, r3
100033a4:	4152      	adcs	r2, r2
100033a6:	0903      	lsrs	r3, r0, #4
100033a8:	428b      	cmp	r3, r1
100033aa:	d301      	bcc.n	100033b0 <__aeabi_uidiv+0xcc>
100033ac:	010b      	lsls	r3, r1, #4
100033ae:	1ac0      	subs	r0, r0, r3
100033b0:	4152      	adcs	r2, r2
100033b2:	08c3      	lsrs	r3, r0, #3
100033b4:	428b      	cmp	r3, r1
100033b6:	d301      	bcc.n	100033bc <__aeabi_uidiv+0xd8>
100033b8:	00cb      	lsls	r3, r1, #3
100033ba:	1ac0      	subs	r0, r0, r3
100033bc:	4152      	adcs	r2, r2
100033be:	0883      	lsrs	r3, r0, #2
100033c0:	428b      	cmp	r3, r1
100033c2:	d301      	bcc.n	100033c8 <__aeabi_uidiv+0xe4>
100033c4:	008b      	lsls	r3, r1, #2
100033c6:	1ac0      	subs	r0, r0, r3
100033c8:	4152      	adcs	r2, r2
100033ca:	0843      	lsrs	r3, r0, #1
100033cc:	428b      	cmp	r3, r1
100033ce:	d301      	bcc.n	100033d4 <__aeabi_uidiv+0xf0>
100033d0:	004b      	lsls	r3, r1, #1
100033d2:	1ac0      	subs	r0, r0, r3
100033d4:	4152      	adcs	r2, r2
100033d6:	1a41      	subs	r1, r0, r1
100033d8:	d200      	bcs.n	100033dc <__aeabi_uidiv+0xf8>
100033da:	4601      	mov	r1, r0
100033dc:	4152      	adcs	r2, r2
100033de:	4610      	mov	r0, r2
100033e0:	4770      	bx	lr
100033e2:	e7ff      	b.n	100033e4 <__aeabi_uidiv+0x100>
100033e4:	b501      	push	{r0, lr}
100033e6:	2000      	movs	r0, #0
100033e8:	f000 f80c 	bl	10003404 <__aeabi_idiv0>
100033ec:	bd02      	pop	{r1, pc}
100033ee:	46c0      	nop			; (mov r8, r8)

100033f0 <__aeabi_uidivmod>:
100033f0:	2900      	cmp	r1, #0
100033f2:	d0f7      	beq.n	100033e4 <__aeabi_uidiv+0x100>
100033f4:	b503      	push	{r0, r1, lr}
100033f6:	f7ff ff75 	bl	100032e4 <__aeabi_uidiv>
100033fa:	bc0e      	pop	{r1, r2, r3}
100033fc:	4342      	muls	r2, r0
100033fe:	1a89      	subs	r1, r1, r2
10003400:	4718      	bx	r3
10003402:	46c0      	nop			; (mov r8, r8)

10003404 <__aeabi_idiv0>:
10003404:	4770      	bx	lr
10003406:	46c0      	nop			; (mov r8, r8)

10003408 <__libc_init_array>:
10003408:	4b0e      	ldr	r3, [pc, #56]	; (10003444 <__libc_init_array+0x3c>)
1000340a:	b570      	push	{r4, r5, r6, lr}
1000340c:	2500      	movs	r5, #0
1000340e:	1c1e      	adds	r6, r3, #0
10003410:	4c0d      	ldr	r4, [pc, #52]	; (10003448 <__libc_init_array+0x40>)
10003412:	1ae4      	subs	r4, r4, r3
10003414:	10a4      	asrs	r4, r4, #2
10003416:	42a5      	cmp	r5, r4
10003418:	d004      	beq.n	10003424 <__libc_init_array+0x1c>
1000341a:	00ab      	lsls	r3, r5, #2
1000341c:	58f3      	ldr	r3, [r6, r3]
1000341e:	4798      	blx	r3
10003420:	3501      	adds	r5, #1
10003422:	e7f8      	b.n	10003416 <__libc_init_array+0xe>
10003424:	f7fd feac 	bl	10001180 <_init>
10003428:	4b08      	ldr	r3, [pc, #32]	; (1000344c <__libc_init_array+0x44>)
1000342a:	2500      	movs	r5, #0
1000342c:	1c1e      	adds	r6, r3, #0
1000342e:	4c08      	ldr	r4, [pc, #32]	; (10003450 <__libc_init_array+0x48>)
10003430:	1ae4      	subs	r4, r4, r3
10003432:	10a4      	asrs	r4, r4, #2
10003434:	42a5      	cmp	r5, r4
10003436:	d004      	beq.n	10003442 <__libc_init_array+0x3a>
10003438:	00ab      	lsls	r3, r5, #2
1000343a:	58f3      	ldr	r3, [r6, r3]
1000343c:	4798      	blx	r3
1000343e:	3501      	adds	r5, #1
10003440:	e7f8      	b.n	10003434 <__libc_init_array+0x2c>
10003442:	bd70      	pop	{r4, r5, r6, pc}
10003444:	20000520 	.word	0x20000520
10003448:	20000520 	.word	0x20000520
1000344c:	20000520 	.word	0x20000520
10003450:	20000520 	.word	0x20000520
10003454:	646f6f47 	.word	0x646f6f47
10003458:	20726f20 	.word	0x20726f20
1000345c:	3f646162 	.word	0x3f646162
10003460:	00000d0a 	.word	0x00000d0a
10003464:	6e206f44 	.word	0x6e206f44
10003468:	6968746f 	.word	0x6968746f
1000346c:	002e676e 	.word	0x002e676e

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veneer>:
    
    .align 1
    
    .globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <CCU40_3_Veneer+0x20>)
    MOV PC,R0
2000000e:	4687      	mov	pc, r0
	...

2000002c <SVC_Veneer>:
    .long 0
    
/* ======================================================================== */
    .globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <CCU40_3_Veneer+0x24>)
    MOV PC,R0
2000002e:	4687      	mov	pc, r0
	...

20000038 <PendSV_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <CCU40_3_Veneer+0x28>)
    MOV PC,R0
2000003a:	4687      	mov	pc, r0

2000003c <SysTick_Veneer>:
/* ======================================================================== */
    .globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <CCU40_3_Veneer+0x2c>)
    MOV PC,R0
2000003e:	4687      	mov	pc, r0

20000040 <SCU_0_Veneer>:
/* ======================================================================== */
    .globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <CCU40_3_Veneer+0x30>)
    MOV PC,R0
20000042:	4687      	mov	pc, r0

20000044 <SCU_1_Veneer>:
/* ======================================================================== */
    .globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <CCU40_3_Veneer+0x34>)
    MOV PC,R0
20000046:	4687      	mov	pc, r0

20000048 <SCU_2_Veneer>:
/* ======================================================================== */
    .globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <CCU40_3_Veneer+0x38>)
    MOV PC,R0
2000004a:	4687      	mov	pc, r0

2000004c <SCU_3_Veneer>:
/* ======================================================================== */
    .globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <CCU40_3_Veneer+0x3c>)
    MOV PC,R0
2000004e:	4687      	mov	pc, r0

20000050 <SCU_4_Veneer>:
/* ======================================================================== */
    .globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <CCU40_3_Veneer+0x40>)
    MOV PC,R0
20000052:	4687      	mov	pc, r0

20000054 <SCU_5_Veneer>:
/* ======================================================================== */
    .globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <CCU40_3_Veneer+0x44>)
    MOV PC,R0
20000056:	4687      	mov	pc, r0

20000058 <SCU_6_Veneer>:
/* ======================================================================== */
    .globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <CCU40_3_Veneer+0x48>)
    MOV PC,R0
2000005a:	4687      	mov	pc, r0
	...

20000064 <USIC0_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
20000064:	4821      	ldr	r0, [pc, #132]	; (200000ec <CCU40_3_Veneer+0x4c>)
    MOV PC,R0
20000066:	4687      	mov	pc, r0

20000068 <USIC0_1_Veneer>:
/* ======================================================================== */
    .globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
20000068:	4821      	ldr	r0, [pc, #132]	; (200000f0 <CCU40_3_Veneer+0x50>)
    MOV PC,R0
2000006a:	4687      	mov	pc, r0

2000006c <USIC0_2_Veneer>:
/* ======================================================================== */
    .globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
2000006c:	4821      	ldr	r0, [pc, #132]	; (200000f4 <CCU40_3_Veneer+0x54>)
    MOV PC,R0
2000006e:	4687      	mov	pc, r0

20000070 <USIC0_3_Veneer>:
/* ======================================================================== */
    .globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
20000070:	4821      	ldr	r0, [pc, #132]	; (200000f8 <CCU40_3_Veneer+0x58>)
    MOV PC,R0
20000072:	4687      	mov	pc, r0

20000074 <USIC0_4_Veneer>:
/* ======================================================================== */
    .globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000074:	4821      	ldr	r0, [pc, #132]	; (200000fc <CCU40_3_Veneer+0x5c>)
    MOV PC,R0
20000076:	4687      	mov	pc, r0

20000078 <USIC0_5_Veneer>:
/* ======================================================================== */
    .globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000078:	4821      	ldr	r0, [pc, #132]	; (20000100 <CCU40_3_Veneer+0x60>)
    MOV PC,R0
2000007a:	4687      	mov	pc, r0

2000007c <VADC0_C0_0_Veneer>:
/* ======================================================================== */
    .globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
2000007c:	4821      	ldr	r0, [pc, #132]	; (20000104 <CCU40_3_Veneer+0x64>)
    MOV PC,R0
2000007e:	4687      	mov	pc, r0

20000080 <VADC0_C0_1_Veneer>:
/* ======================================================================== */
    .globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000080:	4821      	ldr	r0, [pc, #132]	; (20000108 <CCU40_3_Veneer+0x68>)
    MOV PC,R0
20000082:	4687      	mov	pc, r0
	...

20000094 <CCU40_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000094:	481d      	ldr	r0, [pc, #116]	; (2000010c <CCU40_3_Veneer+0x6c>)
    MOV PC,R0
20000096:	4687      	mov	pc, r0

20000098 <CCU40_1_Veneer>:
/* ======================================================================== */
    .globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000098:	481d      	ldr	r0, [pc, #116]	; (20000110 <CCU40_3_Veneer+0x70>)
    MOV PC,R0
2000009a:	4687      	mov	pc, r0

2000009c <CCU40_2_Veneer>:
/* ======================================================================== */
    .globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
2000009c:	481d      	ldr	r0, [pc, #116]	; (20000114 <CCU40_3_Veneer+0x74>)
    MOV PC,R0
2000009e:	4687      	mov	pc, r0

200000a0 <CCU40_3_Veneer>:
/* ======================================================================== */
    .globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
200000a0:	481d      	ldr	r0, [pc, #116]	; (20000118 <CCU40_3_Veneer+0x78>)
    MOV PC,R0
200000a2:	4687      	mov	pc, r0
	...
    
    .align 1
    
    .globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
200000c0:	10001099 	.word	0x10001099
    .long 0
    
/* ======================================================================== */
    .globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
200000c4:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
200000c8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
200000cc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
200000d0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
200000d4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
200000d8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
200000dc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
200000e0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
200000e4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
200000e8:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
200000ec:	10002ad9 	.word	0x10002ad9
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
200000f0:	10002e15 	.word	0x10002e15
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
200000f4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
200000f8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
200000fc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000100:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
20000104:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000108:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
2000010c:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000110:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
20000114:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
20000118:	10001099 	.word	0x10001099
