
JuFo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030c8  10001000  10001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .VENEER_Code  00000110  2000000c  100040c8  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 Stack         00000404  2000011c  00000000  0000011c  2**0
                  ALLOC
  3 .data         0000006c  20000520  100041d8  00008520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000003bc  2000058c  00000470  0000858c  2**2
                  ALLOC
  5 .no_init      00000004  20003ffc  00003ee0  0000011c  2**2
                  ALLOC
  6 .debug_aranges 000005f8  00000000  00000000  00008590  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003a0b  00000000  00000000  00008b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000758  00000000  00000000  0000c593  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001cf6  00000000  00000000  0000cceb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000186c  00000000  00000000  0000e9e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001489  00000000  00000000  00010250  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000021fe  00000000  00000000  000116d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005a0  00000000  00000000  000138d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 0000046a  00000000  00000000  00013e78  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	20 05 00 20 19 10 00 10 00 00 00 00 99 10 00 10      .. ............
10001010:	00 04 01 00 00 00 00 80                             ........

10001018 <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001018:	4911      	ldr	r1, [pc, #68]	; (10001060 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101a:	4a12      	ldr	r2, [pc, #72]	; (10001064 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
1000101c:	4b12      	ldr	r3, [pc, #72]	; (10001068 <__copy_data+0x16>)
	bl  __copy_data
1000101e:	f000 f818 	bl	10001052 <__copy_data>

    ldr  r0, =SystemInit
10001022:	4812      	ldr	r0, [pc, #72]	; (1000106c <__copy_data+0x1a>)
    blx  r0
10001024:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001026:	4912      	ldr	r1, [pc, #72]	; (10001070 <__copy_data+0x1e>)
	ldr	r2, =__data_start
10001028:	4a12      	ldr	r2, [pc, #72]	; (10001074 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102a:	4b13      	ldr	r3, [pc, #76]	; (10001078 <__copy_data+0x26>)
	bl  __copy_data
1000102c:	f000 f811 	bl	10001052 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001030:	4912      	ldr	r1, [pc, #72]	; (1000107c <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001032:	4a13      	ldr	r2, [pc, #76]	; (10001080 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001034:	4b13      	ldr	r3, [pc, #76]	; (10001084 <__copy_data+0x32>)
	bl  __copy_data
10001036:	f000 f80c 	bl	10001052 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103a:	4913      	ldr	r1, [pc, #76]	; (10001088 <__copy_data+0x36>)
	ldr	r2, =__bss_end
1000103c:	4a13      	ldr	r2, [pc, #76]	; (1000108c <__copy_data+0x3a>)

	movs	r0, 0
1000103e:	2000      	movs	r0, #0

	subs	r2, r1
10001040:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001042:	dd02      	ble.n	1000104a <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001044:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
10001046:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
10001048:	dcfc      	bgt.n	10001044 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104a:	4811      	ldr	r0, [pc, #68]	; (10001090 <__copy_data+0x3e>)
    blx  r0
1000104c:	4780      	blx	r0
#endif

    ldr  r0, =main
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x42>)
    blx  r0
10001050:	4780      	blx	r0

10001052 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001052:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001054:	dd03      	ble.n	1000105e <__copy_data+0xc>

.L_loop:
	subs	r3, #4
10001056:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
10001058:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105a:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
1000105c:	dcfb      	bgt.n	10001056 <__copy_data+0x4>

.L_loop_done:
	bx  lr
1000105e:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001060:	100040c8 	.word	0x100040c8
	ldr	r2, =VeneerStart
10001064:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
10001068:	2000011c 	.word	0x2000011c
	bl  __copy_data

    ldr  r0, =SystemInit
1000106c:	1000109d 	.word	0x1000109d
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001070:	100041d8 	.word	0x100041d8
	ldr	r2, =__data_start
10001074:	20000520 	.word	0x20000520
	ldr	r3, =__data_end
10001078:	2000058c 	.word	0x2000058c
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
1000107c:	10004244 	.word	0x10004244
	ldr	r2, =__ram_code_start
10001080:	2000058c 	.word	0x2000058c
	ldr	r3, =__ram_code_end
10001084:	2000058c 	.word	0x2000058c
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
10001088:	2000058c 	.word	0x2000058c
	ldr	r2, =__bss_end
1000108c:	20000944 	.word	0x20000944
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001090:	1000353d 	.word	0x1000353d
    blx  r0
#endif

    ldr  r0, =main
10001094:	10002fad 	.word	0x10002fad

10001098 <CCU40_0_IRQHandler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_handler:
    b  .
10001098:	e7fe      	b.n	10001098 <CCU40_0_IRQHandler>
	...

1000109c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{    
1000109c:	b580      	push	{r7, lr}
1000109e:	af00      	add	r7, sp, #0
  SystemCoreSetup();
100010a0:	f000 f804 	bl	100010ac <SystemCoreSetup>
  SystemCoreClockSetup();
100010a4:	f000 f81c 	bl	100010e0 <SystemCoreClockSetup>
}
100010a8:	46bd      	mov	sp, r7
100010aa:	bd80      	pop	{r7, pc}

100010ac <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
100010ac:	b580      	push	{r7, lr}
100010ae:	af00      	add	r7, sp, #0
#ifndef USE_DYNAMIC_FLASH_WS
  /* Fix flash wait states to 1 cycle (see DS Addendum) */
  NVM->NVMCONF |= NVM_NVMCONF_WS_Msk;
100010b0:	490a      	ldr	r1, [pc, #40]	; (100010dc <SystemCoreSetup+0x30>)
100010b2:	4b0a      	ldr	r3, [pc, #40]	; (100010dc <SystemCoreSetup+0x30>)
100010b4:	891b      	ldrh	r3, [r3, #8]
100010b6:	b29b      	uxth	r3, r3
100010b8:	2280      	movs	r2, #128	; 0x80
100010ba:	0152      	lsls	r2, r2, #5
100010bc:	4313      	orrs	r3, r2
100010be:	b29b      	uxth	r3, r3
100010c0:	810b      	strh	r3, [r1, #8]
  NVM->CONFIG1 |= NVM_CONFIG1_FIXWS_Msk;
100010c2:	4906      	ldr	r1, [pc, #24]	; (100010dc <SystemCoreSetup+0x30>)
100010c4:	4a05      	ldr	r2, [pc, #20]	; (100010dc <SystemCoreSetup+0x30>)
100010c6:	2348      	movs	r3, #72	; 0x48
100010c8:	5ad3      	ldrh	r3, [r2, r3]
100010ca:	b29b      	uxth	r3, r3
100010cc:	2280      	movs	r2, #128	; 0x80
100010ce:	0112      	lsls	r2, r2, #4
100010d0:	4313      	orrs	r3, r2
100010d2:	b29a      	uxth	r2, r3
100010d4:	2348      	movs	r3, #72	; 0x48
100010d6:	52ca      	strh	r2, [r1, r3]
#endif
}
100010d8:	46bd      	mov	sp, r7
100010da:	bd80      	pop	{r7, pc}
100010dc:	40050000 	.word	0x40050000

100010e0 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
100010e0:	b580      	push	{r7, lr}
100010e2:	af00      	add	r7, sp, #0
  /* Override values of CLOCK_VAL1 and CLOCK_VAL2 defined in vector table */
  /* MCLK = 32MHz, PCLK = 64MHz */
  
  SCU_GENERAL->PASSWD = 0x000000C0UL; /* disable bit protection */
100010e4:	4b09      	ldr	r3, [pc, #36]	; (1000110c <SystemCoreClockSetup+0x2c>)
100010e6:	22c0      	movs	r2, #192	; 0xc0
100010e8:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->CLKCR = 0x3FF10100UL;
100010ea:	4b09      	ldr	r3, [pc, #36]	; (10001110 <SystemCoreClockSetup+0x30>)
100010ec:	4a09      	ldr	r2, [pc, #36]	; (10001114 <SystemCoreClockSetup+0x34>)
100010ee:	601a      	str	r2, [r3, #0]
  while((SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk));
100010f0:	46c0      	nop			; (mov r8, r8)
100010f2:	4b07      	ldr	r3, [pc, #28]	; (10001110 <SystemCoreClockSetup+0x30>)
100010f4:	681a      	ldr	r2, [r3, #0]
100010f6:	2380      	movs	r3, #128	; 0x80
100010f8:	05db      	lsls	r3, r3, #23
100010fa:	4013      	ands	r3, r2
100010fc:	d1f9      	bne.n	100010f2 <SystemCoreClockSetup+0x12>
  SCU_GENERAL->PASSWD = 0x000000C3UL; /* enable bit protection */
100010fe:	4b03      	ldr	r3, [pc, #12]	; (1000110c <SystemCoreClockSetup+0x2c>)
10001100:	22c3      	movs	r2, #195	; 0xc3
10001102:	625a      	str	r2, [r3, #36]	; 0x24
  
  SystemCoreClockUpdate();
10001104:	f000 f808 	bl	10001118 <SystemCoreClockUpdate>
}
10001108:	46bd      	mov	sp, r7
1000110a:	bd80      	pop	{r7, pc}
1000110c:	40010000 	.word	0x40010000
10001110:	40010300 	.word	0x40010300
10001114:	3ff10100 	.word	0x3ff10100

10001118 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
10001118:	b580      	push	{r7, lr}
1000111a:	af00      	add	r7, sp, #0
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
1000111c:	4b12      	ldr	r3, [pc, #72]	; (10001168 <SystemCoreClockUpdate+0x50>)
1000111e:	681a      	ldr	r2, [r3, #0]
10001120:	23ff      	movs	r3, #255	; 0xff
10001122:	021b      	lsls	r3, r3, #8
10001124:	4013      	ands	r3, r2
10001126:	0a1a      	lsrs	r2, r3, #8
10001128:	4b10      	ldr	r3, [pc, #64]	; (1000116c <SystemCoreClockUpdate+0x54>)
1000112a:	601a      	str	r2, [r3, #0]
  FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
1000112c:	4b0e      	ldr	r3, [pc, #56]	; (10001168 <SystemCoreClockUpdate+0x50>)
1000112e:	681b      	ldr	r3, [r3, #0]
10001130:	22ff      	movs	r2, #255	; 0xff
10001132:	401a      	ands	r2, r3
10001134:	4b0e      	ldr	r3, [pc, #56]	; (10001170 <SystemCoreClockUpdate+0x58>)
10001136:	601a      	str	r2, [r3, #0]
  
  if (IDIV != 0)
10001138:	4b0c      	ldr	r3, [pc, #48]	; (1000116c <SystemCoreClockUpdate+0x54>)
1000113a:	681b      	ldr	r3, [r3, #0]
1000113c:	2b00      	cmp	r3, #0
1000113e:	d00e      	beq.n	1000115e <SystemCoreClockUpdate+0x46>
  {
    /* Fractional divider is enabled and used */
    SystemCoreClock = ((DCO1_FREQUENCY << 6U) / ((IDIV << 8) + FDIV)) << 1U;
10001140:	4b0a      	ldr	r3, [pc, #40]	; (1000116c <SystemCoreClockUpdate+0x54>)
10001142:	681b      	ldr	r3, [r3, #0]
10001144:	021a      	lsls	r2, r3, #8
10001146:	4b0a      	ldr	r3, [pc, #40]	; (10001170 <SystemCoreClockUpdate+0x58>)
10001148:	681b      	ldr	r3, [r3, #0]
1000114a:	18d3      	adds	r3, r2, r3
1000114c:	4809      	ldr	r0, [pc, #36]	; (10001174 <SystemCoreClockUpdate+0x5c>)
1000114e:	1c19      	adds	r1, r3, #0
10001150:	f002 f95c 	bl	1000340c <__aeabi_uidiv>
10001154:	1c03      	adds	r3, r0, #0
10001156:	005a      	lsls	r2, r3, #1
10001158:	4b07      	ldr	r3, [pc, #28]	; (10001178 <SystemCoreClockUpdate+0x60>)
1000115a:	601a      	str	r2, [r3, #0]
1000115c:	e002      	b.n	10001164 <SystemCoreClockUpdate+0x4c>
  }
  else
  {
    /* Fractional divider bypassed. Simply divide DCO_DCLK by 2 */
    SystemCoreClock = DCO1_FREQUENCY >> 1U;
1000115e:	4b06      	ldr	r3, [pc, #24]	; (10001178 <SystemCoreClockUpdate+0x60>)
10001160:	4a06      	ldr	r2, [pc, #24]	; (1000117c <SystemCoreClockUpdate+0x64>)
10001162:	601a      	str	r2, [r3, #0]
  }
}
10001164:	46bd      	mov	sp, r7
10001166:	bd80      	pop	{r7, pc}
10001168:	40010300 	.word	0x40010300
1000116c:	2000058c 	.word	0x2000058c
10001170:	20000590 	.word	0x20000590
10001174:	f4240000 	.word	0xf4240000
10001178:	20003ffc 	.word	0x20003ffc
1000117c:	01e84800 	.word	0x01e84800

10001180 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
10001180:	b580      	push	{r7, lr}
10001182:	b084      	sub	sp, #16
10001184:	af00      	add	r7, sp, #0
10001186:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
10001188:	4b14      	ldr	r3, [pc, #80]	; (100011dc <_sbrk+0x5c>)
1000118a:	681b      	ldr	r3, [r3, #0]
1000118c:	2b00      	cmp	r3, #0
1000118e:	d102      	bne.n	10001196 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
10001190:	4b12      	ldr	r3, [pc, #72]	; (100011dc <_sbrk+0x5c>)
10001192:	4a13      	ldr	r2, [pc, #76]	; (100011e0 <_sbrk+0x60>)
10001194:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
10001196:	4b11      	ldr	r3, [pc, #68]	; (100011dc <_sbrk+0x5c>)
10001198:	681b      	ldr	r3, [r3, #0]
1000119a:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
1000119c:	687b      	ldr	r3, [r7, #4]
1000119e:	3303      	adds	r3, #3
100011a0:	2203      	movs	r2, #3
100011a2:	4393      	bics	r3, r2
100011a4:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
100011a6:	4b0d      	ldr	r3, [pc, #52]	; (100011dc <_sbrk+0x5c>)
100011a8:	681a      	ldr	r2, [r3, #0]
100011aa:	687b      	ldr	r3, [r7, #4]
100011ac:	18d2      	adds	r2, r2, r3
100011ae:	4b0d      	ldr	r3, [pc, #52]	; (100011e4 <_sbrk+0x64>)
100011b0:	429a      	cmp	r2, r3
100011b2:	d207      	bcs.n	100011c4 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
100011b4:	4b09      	ldr	r3, [pc, #36]	; (100011dc <_sbrk+0x5c>)
100011b6:	681a      	ldr	r2, [r3, #0]
100011b8:	687b      	ldr	r3, [r7, #4]
100011ba:	18d2      	adds	r2, r2, r3
100011bc:	4b07      	ldr	r3, [pc, #28]	; (100011dc <_sbrk+0x5c>)
100011be:	601a      	str	r2, [r3, #0]
    return (base);
100011c0:	68fb      	ldr	r3, [r7, #12]
100011c2:	e006      	b.n	100011d2 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
100011c4:	f002 f9b4 	bl	10003530 <__errno>
100011c8:	1c03      	adds	r3, r0, #0
100011ca:	220c      	movs	r2, #12
100011cc:	601a      	str	r2, [r3, #0]
    return ((caddr_t)-1);
100011ce:	2301      	movs	r3, #1
100011d0:	425b      	negs	r3, r3
  }
}
100011d2:	1c18      	adds	r0, r3, #0
100011d4:	46bd      	mov	sp, r7
100011d6:	b004      	add	sp, #16
100011d8:	bd80      	pop	{r7, pc}
100011da:	46c0      	nop			; (mov r8, r8)
100011dc:	20000594 	.word	0x20000594
100011e0:	20000948 	.word	0x20000948
100011e4:	20003ffc 	.word	0x20003ffc

100011e8 <_init>:

/* Init */
void _init(void)
{}
100011e8:	b580      	push	{r7, lr}
100011ea:	af00      	add	r7, sp, #0
100011ec:	46bd      	mov	sp, r7
100011ee:	bd80      	pop	{r7, pc}

100011f0 <init>:
#include "XMC1100-LibHaas.h"
#include "HardwareController.h"

void init() {
100011f0:	b580      	push	{r7, lr}
100011f2:	af00      	add	r7, sp, #0
	uart_init();
100011f4:	f001 fcd2 	bl	10002b9c <uart_init>
	uart_interrupt_enable();
100011f8:	f001 fde6 	bl	10002dc8 <uart_interrupt_enable>
	uart_select_channel(UARTCHANNEL_0);
100011fc:	2003      	movs	r0, #3
100011fe:	f001 fe79 	bl	10002ef4 <uart_select_channel>

	rs232_init();
10001202:	f001 fb83 	bl	1000290c <rs232_init>
	rs232_interrupt_enable();
10001206:	f001 fc4d 	bl	10002aa4 <rs232_interrupt_enable>

	bit_init(redLEDport, redLEDpin, OUTP);
1000120a:	2001      	movs	r0, #1
1000120c:	2102      	movs	r1, #2
1000120e:	2201      	movs	r2, #1
10001210:	f000 f9f6 	bl	10001600 <bit_init>
	bit_init(greenLEDport, greenLEDpin, OUTP);
10001214:	2001      	movs	r0, #1
10001216:	2103      	movs	r1, #3
10001218:	2201      	movs	r2, #1
1000121a:	f000 f9f1 	bl	10001600 <bit_init>
	bit_init(LEDstripesport, LEDstripespin, OUTP);
1000121e:	2000      	movs	r0, #0
10001220:	2104      	movs	r1, #4
10001222:	2201      	movs	r2, #1
10001224:	f000 f9ec 	bl	10001600 <bit_init>
	bit_init(laserport, laserpin, OUTP);
10001228:	2000      	movs	r0, #0
1000122a:	2100      	movs	r1, #0
1000122c:	2201      	movs	r2, #1
1000122e:	f000 f9e7 	bl	10001600 <bit_init>
	bit_init(lightbarrier1port, lightbarrier1pin, INP);
10001232:	2002      	movs	r0, #2
10001234:	2103      	movs	r1, #3
10001236:	2200      	movs	r2, #0
10001238:	f000 f9e2 	bl	10001600 <bit_init>
	bit_init(lightbarrier2port, lightbarrier2pin, INP);
1000123c:	2002      	movs	r0, #2
1000123e:	2102      	movs	r1, #2
10001240:	2200      	movs	r2, #0
10001242:	f000 f9dd 	bl	10001600 <bit_init>
	bit_init(lightbarrier3port, lightbarrier3pin, INP);
10001246:	2002      	movs	r0, #2
10001248:	2101      	movs	r1, #1
1000124a:	2200      	movs	r2, #0
1000124c:	f000 f9d8 	bl	10001600 <bit_init>
	bit_init(pneumatics1port, pneumatics1pin, OUTP);
10001250:	2000      	movs	r0, #0
10001252:	2101      	movs	r1, #1
10001254:	2201      	movs	r2, #1
10001256:	f000 f9d3 	bl	10001600 <bit_init>
	bit_init(pneumatics2port, pneumatics2pin, OUTP);
1000125a:	2000      	movs	r0, #0
1000125c:	2102      	movs	r1, #2
1000125e:	2201      	movs	r2, #1
10001260:	f000 f9ce 	bl	10001600 <bit_init>
	bit_init_mode(button1port, button1pin, INP, PULLDOWN);
10001264:	2001      	movs	r0, #1
10001266:	2105      	movs	r1, #5
10001268:	2200      	movs	r2, #0
1000126a:	2302      	movs	r3, #2
1000126c:	f000 fb88 	bl	10001980 <bit_init_mode>
	bit_init_mode(button2port, button2pin, INP, PULLDOWN);
10001270:	2001      	movs	r0, #1
10001272:	2104      	movs	r1, #4
10001274:	2200      	movs	r2, #0
10001276:	2302      	movs	r3, #2
10001278:	f000 fb82 	bl	10001980 <bit_init_mode>
	bit_init(inductivSensor1Port, inductivSensor1Pin, INP);
1000127c:	2000      	movs	r0, #0
1000127e:	210a      	movs	r1, #10
10001280:	2200      	movs	r2, #0
10001282:	f000 f9bd 	bl	10001600 <bit_init>
	bit_init(inductivSensor2Port, inductivSensor2Pin, INP);
10001286:	2000      	movs	r0, #0
10001288:	210b      	movs	r1, #11
1000128a:	2200      	movs	r2, #0
1000128c:	f000 f9b8 	bl	10001600 <bit_init>
	bit_init(dir1port, dir1pin, OUTP);
10001290:	2000      	movs	r0, #0
10001292:	2107      	movs	r1, #7
10001294:	2201      	movs	r2, #1
10001296:	f000 f9b3 	bl	10001600 <bit_init>
	bit_init(productionLineDirectionPort, productionLineDirectionPin, OUTP);
1000129a:	2000      	movs	r0, #0
1000129c:	2109      	movs	r1, #9
1000129e:	2201      	movs	r2, #1
100012a0:	f000 f9ae 	bl	10001600 <bit_init>

	pwm1_init();
100012a4:	f001 fa44 	bl	10002730 <pwm1_init>
	pwm1_start();
100012a8:	f001 fad2 	bl	10002850 <pwm1_start>
	pwm3_init();
100012ac:	f001 fa70 	bl	10002790 <pwm3_init>
	pwm3_start();
100012b0:	f001 fad8 	bl	10002864 <pwm3_start>

	productionLine(0, FORWARD);
100012b4:	2000      	movs	r0, #0
100012b6:	2100      	movs	r1, #0
100012b8:	f000 f868 	bl	1000138c <productionLine>
	slider(0, SLIDERFORWARD);
100012bc:	2000      	movs	r0, #0
100012be:	2100      	movs	r1, #0
100012c0:	f000 f964 	bl	1000158c <slider>

	bit_write(P0, laserport, OFF);
100012c4:	2000      	movs	r0, #0
100012c6:	2100      	movs	r1, #0
100012c8:	2200      	movs	r2, #0
100012ca:	f001 f939 	bl	10002540 <bit_write>
	bit_write(LEDstripesport, LEDstripespin, OFF);
100012ce:	2000      	movs	r0, #0
100012d0:	2104      	movs	r1, #4
100012d2:	2200      	movs	r2, #0
100012d4:	f001 f934 	bl	10002540 <bit_write>
}
100012d8:	46bd      	mov	sp, r7
100012da:	bd80      	pop	{r7, pc}

100012dc <laser>:

void laser(int onOrOff) {
100012dc:	b580      	push	{r7, lr}
100012de:	b082      	sub	sp, #8
100012e0:	af00      	add	r7, sp, #0
100012e2:	6078      	str	r0, [r7, #4]
	onOrOff ?
			bit_write(laserport, laserpin, ON) :
100012e4:	687b      	ldr	r3, [r7, #4]
100012e6:	2b00      	cmp	r3, #0
100012e8:	d005      	beq.n	100012f6 <laser+0x1a>
100012ea:	2000      	movs	r0, #0
100012ec:	2100      	movs	r1, #0
100012ee:	2201      	movs	r2, #1
100012f0:	f001 f926 	bl	10002540 <bit_write>
100012f4:	e004      	b.n	10001300 <laser+0x24>
			bit_write(laserport, laserpin, OFF);
100012f6:	2000      	movs	r0, #0
100012f8:	2100      	movs	r1, #0
100012fa:	2200      	movs	r2, #0
100012fc:	f001 f920 	bl	10002540 <bit_write>
}
10001300:	46bd      	mov	sp, r7
10001302:	b002      	add	sp, #8
10001304:	bd80      	pop	{r7, pc}
10001306:	46c0      	nop			; (mov r8, r8)

10001308 <LEDStripes>:

void LEDStripes(int onOrOff) {
10001308:	b580      	push	{r7, lr}
1000130a:	b082      	sub	sp, #8
1000130c:	af00      	add	r7, sp, #0
1000130e:	6078      	str	r0, [r7, #4]
	onOrOff ?
			bit_write(LEDstripesport, LEDstripespin, OFF) :
10001310:	687b      	ldr	r3, [r7, #4]
10001312:	2b00      	cmp	r3, #0
10001314:	d005      	beq.n	10001322 <LEDStripes+0x1a>
10001316:	2000      	movs	r0, #0
10001318:	2104      	movs	r1, #4
1000131a:	2200      	movs	r2, #0
1000131c:	f001 f910 	bl	10002540 <bit_write>
10001320:	e004      	b.n	1000132c <LEDStripes+0x24>
			bit_write(LEDstripesport, LEDstripespin, ON);
10001322:	2000      	movs	r0, #0
10001324:	2104      	movs	r1, #4
10001326:	2201      	movs	r2, #1
10001328:	f001 f90a 	bl	10002540 <bit_write>
}
1000132c:	46bd      	mov	sp, r7
1000132e:	b002      	add	sp, #8
10001330:	bd80      	pop	{r7, pc}
10001332:	46c0      	nop			; (mov r8, r8)

10001334 <redLED>:

void redLED(int onOrOff) {
10001334:	b580      	push	{r7, lr}
10001336:	b082      	sub	sp, #8
10001338:	af00      	add	r7, sp, #0
1000133a:	6078      	str	r0, [r7, #4]
	onOrOff ?
			bit_write(redLEDport, redLEDpin, OFF) :
1000133c:	687b      	ldr	r3, [r7, #4]
1000133e:	2b00      	cmp	r3, #0
10001340:	d005      	beq.n	1000134e <redLED+0x1a>
10001342:	2001      	movs	r0, #1
10001344:	2102      	movs	r1, #2
10001346:	2200      	movs	r2, #0
10001348:	f001 f8fa 	bl	10002540 <bit_write>
1000134c:	e004      	b.n	10001358 <redLED+0x24>
			bit_write(redLEDport, redLEDpin, ON);
1000134e:	2001      	movs	r0, #1
10001350:	2102      	movs	r1, #2
10001352:	2201      	movs	r2, #1
10001354:	f001 f8f4 	bl	10002540 <bit_write>
}
10001358:	46bd      	mov	sp, r7
1000135a:	b002      	add	sp, #8
1000135c:	bd80      	pop	{r7, pc}
1000135e:	46c0      	nop			; (mov r8, r8)

10001360 <greenLED>:

void greenLED(int onOrOff) {
10001360:	b580      	push	{r7, lr}
10001362:	b082      	sub	sp, #8
10001364:	af00      	add	r7, sp, #0
10001366:	6078      	str	r0, [r7, #4]
	onOrOff ?
			bit_write(greenLEDport, greenLEDpin, OFF) :
10001368:	687b      	ldr	r3, [r7, #4]
1000136a:	2b00      	cmp	r3, #0
1000136c:	d005      	beq.n	1000137a <greenLED+0x1a>
1000136e:	2001      	movs	r0, #1
10001370:	2103      	movs	r1, #3
10001372:	2200      	movs	r2, #0
10001374:	f001 f8e4 	bl	10002540 <bit_write>
10001378:	e004      	b.n	10001384 <greenLED+0x24>
			bit_write(greenLEDport, greenLEDpin, ON);
1000137a:	2001      	movs	r0, #1
1000137c:	2103      	movs	r1, #3
1000137e:	2201      	movs	r2, #1
10001380:	f001 f8de 	bl	10002540 <bit_write>
}
10001384:	46bd      	mov	sp, r7
10001386:	b002      	add	sp, #8
10001388:	bd80      	pop	{r7, pc}
1000138a:	46c0      	nop			; (mov r8, r8)

1000138c <productionLine>:
			bit_write(relay2port, relay2pin, ON) :
			bit_write(relay2port, relay2pin, OFF);
}
*/

void productionLine(int velocity, int direction) {
1000138c:	b580      	push	{r7, lr}
1000138e:	b082      	sub	sp, #8
10001390:	af00      	add	r7, sp, #0
10001392:	6078      	str	r0, [r7, #4]
10001394:	6039      	str	r1, [r7, #0]
	direction ?
			bit_write(productionLineDirectionPort, productionLineDirectionPin, BACKWARD) :
10001396:	683b      	ldr	r3, [r7, #0]
10001398:	2b00      	cmp	r3, #0
1000139a:	d005      	beq.n	100013a8 <productionLine+0x1c>
1000139c:	2000      	movs	r0, #0
1000139e:	2109      	movs	r1, #9
100013a0:	2201      	movs	r2, #1
100013a2:	f001 f8cd 	bl	10002540 <bit_write>
100013a6:	e004      	b.n	100013b2 <productionLine+0x26>
			bit_write(dir1port, dir1pin, FORWARD);
100013a8:	2000      	movs	r0, #0
100013aa:	2107      	movs	r1, #7
100013ac:	2200      	movs	r2, #0
100013ae:	f001 f8c7 	bl	10002540 <bit_write>
	// inverse velocity by 50000
	pwm3_duty_cycle(50000 - velocity);
100013b2:	687b      	ldr	r3, [r7, #4]
100013b4:	b29b      	uxth	r3, r3
100013b6:	4a04      	ldr	r2, [pc, #16]	; (100013c8 <productionLine+0x3c>)
100013b8:	1ad3      	subs	r3, r2, r3
100013ba:	b29b      	uxth	r3, r3
100013bc:	1c18      	adds	r0, r3, #0
100013be:	f001 fa2f 	bl	10002820 <pwm3_duty_cycle>
}
100013c2:	46bd      	mov	sp, r7
100013c4:	b002      	add	sp, #8
100013c6:	bd80      	pop	{r7, pc}
100013c8:	ffffc350 	.word	0xffffc350

100013cc <lightBarrier1>:


int lightBarrier1(void) {
100013cc:	b580      	push	{r7, lr}
100013ce:	b082      	sub	sp, #8
100013d0:	af00      	add	r7, sp, #0
	int firstActivation = bit_read(lightbarrier1port, lightbarrier1pin);
100013d2:	2002      	movs	r0, #2
100013d4:	2103      	movs	r1, #3
100013d6:	f001 f891 	bl	100024fc <bit_read>
100013da:	1c03      	adds	r3, r0, #0
100013dc:	607b      	str	r3, [r7, #4]
	delay_ms(LED_TOLERANCE_MILLIS);
100013de:	2005      	movs	r0, #5
100013e0:	f001 fa72 	bl	100028c8 <delay_ms>
	int secondActivation = bit_read(lightbarrier1port, lightbarrier1pin);
100013e4:	2002      	movs	r0, #2
100013e6:	2103      	movs	r1, #3
100013e8:	f001 f888 	bl	100024fc <bit_read>
100013ec:	1c03      	adds	r3, r0, #0
100013ee:	603b      	str	r3, [r7, #0]

	// implements tolerance

	while (firstActivation != secondActivation) {
100013f0:	e00a      	b.n	10001408 <lightBarrier1+0x3c>
		firstActivation = secondActivation;
100013f2:	683b      	ldr	r3, [r7, #0]
100013f4:	607b      	str	r3, [r7, #4]
		delay_ms(LED_TOLERANCE_MILLIS);
100013f6:	2005      	movs	r0, #5
100013f8:	f001 fa66 	bl	100028c8 <delay_ms>
		secondActivation = bit_read(lightbarrier1port, lightbarrier1pin);
100013fc:	2002      	movs	r0, #2
100013fe:	2103      	movs	r1, #3
10001400:	f001 f87c 	bl	100024fc <bit_read>
10001404:	1c03      	adds	r3, r0, #0
10001406:	603b      	str	r3, [r7, #0]
	delay_ms(LED_TOLERANCE_MILLIS);
	int secondActivation = bit_read(lightbarrier1port, lightbarrier1pin);

	// implements tolerance

	while (firstActivation != secondActivation) {
10001408:	687a      	ldr	r2, [r7, #4]
1000140a:	683b      	ldr	r3, [r7, #0]
1000140c:	429a      	cmp	r2, r3
1000140e:	d1f0      	bne.n	100013f2 <lightBarrier1+0x26>
		firstActivation = secondActivation;
		delay_ms(LED_TOLERANCE_MILLIS);
		secondActivation = bit_read(lightbarrier1port, lightbarrier1pin);
	}

	if (firstActivation == 0) {
10001410:	687b      	ldr	r3, [r7, #4]
10001412:	2b00      	cmp	r3, #0
10001414:	d101      	bne.n	1000141a <lightBarrier1+0x4e>
		return ON;
10001416:	2301      	movs	r3, #1
10001418:	e000      	b.n	1000141c <lightBarrier1+0x50>
	} else {
		return OFF;
1000141a:	2300      	movs	r3, #0
	}
}
1000141c:	1c18      	adds	r0, r3, #0
1000141e:	46bd      	mov	sp, r7
10001420:	b002      	add	sp, #8
10001422:	bd80      	pop	{r7, pc}

10001424 <lightBarrier2>:

int lightBarrier2(void) {
10001424:	b580      	push	{r7, lr}
10001426:	b082      	sub	sp, #8
10001428:	af00      	add	r7, sp, #0
	int firstActivation = bit_read(lightbarrier2port, lightbarrier2pin);
1000142a:	2002      	movs	r0, #2
1000142c:	2102      	movs	r1, #2
1000142e:	f001 f865 	bl	100024fc <bit_read>
10001432:	1c03      	adds	r3, r0, #0
10001434:	607b      	str	r3, [r7, #4]
	delay_ms(LED_TOLERANCE_MILLIS);
10001436:	2005      	movs	r0, #5
10001438:	f001 fa46 	bl	100028c8 <delay_ms>
	int secondActivation = bit_read(lightbarrier2port, lightbarrier2pin);
1000143c:	2002      	movs	r0, #2
1000143e:	2102      	movs	r1, #2
10001440:	f001 f85c 	bl	100024fc <bit_read>
10001444:	1c03      	adds	r3, r0, #0
10001446:	603b      	str	r3, [r7, #0]

	// implements tolerance

	while (firstActivation != secondActivation) {
10001448:	e00a      	b.n	10001460 <lightBarrier2+0x3c>
		firstActivation = secondActivation;
1000144a:	683b      	ldr	r3, [r7, #0]
1000144c:	607b      	str	r3, [r7, #4]
		delay_ms(LED_TOLERANCE_MILLIS);
1000144e:	2005      	movs	r0, #5
10001450:	f001 fa3a 	bl	100028c8 <delay_ms>
		secondActivation = bit_read(lightbarrier2port, lightbarrier2pin);
10001454:	2002      	movs	r0, #2
10001456:	2102      	movs	r1, #2
10001458:	f001 f850 	bl	100024fc <bit_read>
1000145c:	1c03      	adds	r3, r0, #0
1000145e:	603b      	str	r3, [r7, #0]
	delay_ms(LED_TOLERANCE_MILLIS);
	int secondActivation = bit_read(lightbarrier2port, lightbarrier2pin);

	// implements tolerance

	while (firstActivation != secondActivation) {
10001460:	687a      	ldr	r2, [r7, #4]
10001462:	683b      	ldr	r3, [r7, #0]
10001464:	429a      	cmp	r2, r3
10001466:	d1f0      	bne.n	1000144a <lightBarrier2+0x26>
		firstActivation = secondActivation;
		delay_ms(LED_TOLERANCE_MILLIS);
		secondActivation = bit_read(lightbarrier2port, lightbarrier2pin);
	}

	if (firstActivation == 0) {
10001468:	687b      	ldr	r3, [r7, #4]
1000146a:	2b00      	cmp	r3, #0
1000146c:	d101      	bne.n	10001472 <lightBarrier2+0x4e>
		return ON;
1000146e:	2301      	movs	r3, #1
10001470:	e000      	b.n	10001474 <lightBarrier2+0x50>
	} else {
		return OFF;
10001472:	2300      	movs	r3, #0
	}
}
10001474:	1c18      	adds	r0, r3, #0
10001476:	46bd      	mov	sp, r7
10001478:	b002      	add	sp, #8
1000147a:	bd80      	pop	{r7, pc}

1000147c <lightBarrier3>:

int lightBarrier3(void) {
1000147c:	b580      	push	{r7, lr}
1000147e:	b082      	sub	sp, #8
10001480:	af00      	add	r7, sp, #0
	int firstActivation = bit_read(lightbarrier3port, lightbarrier3pin);
10001482:	2002      	movs	r0, #2
10001484:	2101      	movs	r1, #1
10001486:	f001 f839 	bl	100024fc <bit_read>
1000148a:	1c03      	adds	r3, r0, #0
1000148c:	607b      	str	r3, [r7, #4]
	delay_ms(LED_TOLERANCE_MILLIS);
1000148e:	2005      	movs	r0, #5
10001490:	f001 fa1a 	bl	100028c8 <delay_ms>
	int secondActivation = bit_read(lightbarrier3port, lightbarrier3pin);
10001494:	2002      	movs	r0, #2
10001496:	2101      	movs	r1, #1
10001498:	f001 f830 	bl	100024fc <bit_read>
1000149c:	1c03      	adds	r3, r0, #0
1000149e:	603b      	str	r3, [r7, #0]

	// implements tolerance

	while (firstActivation != secondActivation) {
100014a0:	e00a      	b.n	100014b8 <lightBarrier3+0x3c>
		firstActivation = secondActivation;
100014a2:	683b      	ldr	r3, [r7, #0]
100014a4:	607b      	str	r3, [r7, #4]
		delay_ms(LED_TOLERANCE_MILLIS);
100014a6:	2005      	movs	r0, #5
100014a8:	f001 fa0e 	bl	100028c8 <delay_ms>
		secondActivation = bit_read(lightbarrier3port, lightbarrier3pin);
100014ac:	2002      	movs	r0, #2
100014ae:	2101      	movs	r1, #1
100014b0:	f001 f824 	bl	100024fc <bit_read>
100014b4:	1c03      	adds	r3, r0, #0
100014b6:	603b      	str	r3, [r7, #0]
	delay_ms(LED_TOLERANCE_MILLIS);
	int secondActivation = bit_read(lightbarrier3port, lightbarrier3pin);

	// implements tolerance

	while (firstActivation != secondActivation) {
100014b8:	687a      	ldr	r2, [r7, #4]
100014ba:	683b      	ldr	r3, [r7, #0]
100014bc:	429a      	cmp	r2, r3
100014be:	d1f0      	bne.n	100014a2 <lightBarrier3+0x26>
		firstActivation = secondActivation;
		delay_ms(LED_TOLERANCE_MILLIS);
		secondActivation = bit_read(lightbarrier3port, lightbarrier3pin);
	}

	if (firstActivation == 0) {
100014c0:	687b      	ldr	r3, [r7, #4]
100014c2:	2b00      	cmp	r3, #0
100014c4:	d101      	bne.n	100014ca <lightBarrier3+0x4e>
		return ON;
100014c6:	2301      	movs	r3, #1
100014c8:	e000      	b.n	100014cc <lightBarrier3+0x50>
	} else {
		return OFF;
100014ca:	2300      	movs	r3, #0
	}
}
100014cc:	1c18      	adds	r0, r3, #0
100014ce:	46bd      	mov	sp, r7
100014d0:	b002      	add	sp, #8
100014d2:	bd80      	pop	{r7, pc}

100014d4 <pneumatics1>:

void pneumatics1(int outOrIn) {
100014d4:	b580      	push	{r7, lr}
100014d6:	b082      	sub	sp, #8
100014d8:	af00      	add	r7, sp, #0
100014da:	6078      	str	r0, [r7, #4]
	outOrIn ?
			bit_write(pneumatics1port, pneumatics1pin, OUT) :
100014dc:	687b      	ldr	r3, [r7, #4]
100014de:	2b00      	cmp	r3, #0
100014e0:	d005      	beq.n	100014ee <pneumatics1+0x1a>
100014e2:	2000      	movs	r0, #0
100014e4:	2101      	movs	r1, #1
100014e6:	2201      	movs	r2, #1
100014e8:	f001 f82a 	bl	10002540 <bit_write>
100014ec:	e004      	b.n	100014f8 <pneumatics1+0x24>
			bit_write(pneumatics1port, pneumatics1pin, IN);
100014ee:	2000      	movs	r0, #0
100014f0:	2101      	movs	r1, #1
100014f2:	2200      	movs	r2, #0
100014f4:	f001 f824 	bl	10002540 <bit_write>
}
100014f8:	46bd      	mov	sp, r7
100014fa:	b002      	add	sp, #8
100014fc:	bd80      	pop	{r7, pc}
100014fe:	46c0      	nop			; (mov r8, r8)

10001500 <pneumatics2>:

void pneumatics2(int outOrIn) {
10001500:	b580      	push	{r7, lr}
10001502:	b082      	sub	sp, #8
10001504:	af00      	add	r7, sp, #0
10001506:	6078      	str	r0, [r7, #4]
	outOrIn ?
			bit_write(pneumatics2port, pneumatics2pin, OUT) :
10001508:	687b      	ldr	r3, [r7, #4]
1000150a:	2b00      	cmp	r3, #0
1000150c:	d005      	beq.n	1000151a <pneumatics2+0x1a>
1000150e:	2000      	movs	r0, #0
10001510:	2102      	movs	r1, #2
10001512:	2201      	movs	r2, #1
10001514:	f001 f814 	bl	10002540 <bit_write>
10001518:	e004      	b.n	10001524 <pneumatics2+0x24>
			bit_write(pneumatics2port, pneumatics2pin, IN);
1000151a:	2000      	movs	r0, #0
1000151c:	2102      	movs	r1, #2
1000151e:	2200      	movs	r2, #0
10001520:	f001 f80e 	bl	10002540 <bit_write>
}
10001524:	46bd      	mov	sp, r7
10001526:	b002      	add	sp, #8
10001528:	bd80      	pop	{r7, pc}
1000152a:	46c0      	nop			; (mov r8, r8)

1000152c <readButton1>:

int readButton1(void) {
1000152c:	b580      	push	{r7, lr}
1000152e:	af00      	add	r7, sp, #0
	return !bit_read(button1port, button1pin);
10001530:	2001      	movs	r0, #1
10001532:	2105      	movs	r1, #5
10001534:	f000 ffe2 	bl	100024fc <bit_read>
10001538:	1c03      	adds	r3, r0, #0
1000153a:	425a      	negs	r2, r3
1000153c:	4153      	adcs	r3, r2
1000153e:	b2db      	uxtb	r3, r3
}
10001540:	1c18      	adds	r0, r3, #0
10001542:	46bd      	mov	sp, r7
10001544:	bd80      	pop	{r7, pc}
10001546:	46c0      	nop			; (mov r8, r8)

10001548 <readButton2>:

int readButton2(void) {
10001548:	b580      	push	{r7, lr}
1000154a:	af00      	add	r7, sp, #0
	return !bit_read(button2port, button2pin);
1000154c:	2001      	movs	r0, #1
1000154e:	2104      	movs	r1, #4
10001550:	f000 ffd4 	bl	100024fc <bit_read>
10001554:	1c03      	adds	r3, r0, #0
10001556:	425a      	negs	r2, r3
10001558:	4153      	adcs	r3, r2
1000155a:	b2db      	uxtb	r3, r3
}
1000155c:	1c18      	adds	r0, r3, #0
1000155e:	46bd      	mov	sp, r7
10001560:	bd80      	pop	{r7, pc}
10001562:	46c0      	nop			; (mov r8, r8)

10001564 <readInductivSensor1>:

int readInductivSensor1(void) {
10001564:	b580      	push	{r7, lr}
10001566:	af00      	add	r7, sp, #0
	return bit_read(inductivSensor1Port, inductivSensor1Pin);
10001568:	2000      	movs	r0, #0
1000156a:	210a      	movs	r1, #10
1000156c:	f000 ffc6 	bl	100024fc <bit_read>
10001570:	1c03      	adds	r3, r0, #0
}
10001572:	1c18      	adds	r0, r3, #0
10001574:	46bd      	mov	sp, r7
10001576:	bd80      	pop	{r7, pc}

10001578 <readInductivSensor2>:

int readInductivSensor2(void) {
10001578:	b580      	push	{r7, lr}
1000157a:	af00      	add	r7, sp, #0
	return bit_read(inductivSensor2Port, inductivSensor2Pin);
1000157c:	2000      	movs	r0, #0
1000157e:	210b      	movs	r1, #11
10001580:	f000 ffbc 	bl	100024fc <bit_read>
10001584:	1c03      	adds	r3, r0, #0
}
10001586:	1c18      	adds	r0, r3, #0
10001588:	46bd      	mov	sp, r7
1000158a:	bd80      	pop	{r7, pc}

1000158c <slider>:

void slider(int velocity, int direction) {
1000158c:	b580      	push	{r7, lr}
1000158e:	b082      	sub	sp, #8
10001590:	af00      	add	r7, sp, #0
10001592:	6078      	str	r0, [r7, #4]
10001594:	6039      	str	r1, [r7, #0]
	direction ?
			bit_write(dir1port, dir1pin, SLIDERBACKWARD) :
10001596:	683b      	ldr	r3, [r7, #0]
10001598:	2b00      	cmp	r3, #0
1000159a:	d005      	beq.n	100015a8 <slider+0x1c>
1000159c:	2000      	movs	r0, #0
1000159e:	2107      	movs	r1, #7
100015a0:	2201      	movs	r2, #1
100015a2:	f000 ffcd 	bl	10002540 <bit_write>
100015a6:	e004      	b.n	100015b2 <slider+0x26>
			bit_write(dir1port, dir1pin, SLIDERFORWARD);
100015a8:	2000      	movs	r0, #0
100015aa:	2107      	movs	r1, #7
100015ac:	2200      	movs	r2, #0
100015ae:	f000 ffc7 	bl	10002540 <bit_write>
	// inverse velocity by 50000
	pwm1_duty_cycle(50000 - velocity);
100015b2:	687b      	ldr	r3, [r7, #4]
100015b4:	b29b      	uxth	r3, r3
100015b6:	4a04      	ldr	r2, [pc, #16]	; (100015c8 <slider+0x3c>)
100015b8:	1ad3      	subs	r3, r2, r3
100015ba:	b29b      	uxth	r3, r3
100015bc:	1c18      	adds	r0, r3, #0
100015be:	f001 f917 	bl	100027f0 <pwm1_duty_cycle>
}
100015c2:	46bd      	mov	sp, r7
100015c4:	b002      	add	sp, #8
100015c6:	bd80      	pop	{r7, pc}
100015c8:	ffffc350 	.word	0xffffc350

100015cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
100015cc:	b580      	push	{r7, lr}
100015ce:	b082      	sub	sp, #8
100015d0:	af00      	add	r7, sp, #0
100015d2:	1c02      	adds	r2, r0, #0
100015d4:	1dfb      	adds	r3, r7, #7
100015d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100015d8:	1dfb      	adds	r3, r7, #7
100015da:	781b      	ldrb	r3, [r3, #0]
100015dc:	2b7f      	cmp	r3, #127	; 0x7f
100015de:	d809      	bhi.n	100015f4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
100015e0:	4b06      	ldr	r3, [pc, #24]	; (100015fc <__NVIC_EnableIRQ+0x30>)
100015e2:	1dfa      	adds	r2, r7, #7
100015e4:	7812      	ldrb	r2, [r2, #0]
100015e6:	1c11      	adds	r1, r2, #0
100015e8:	221f      	movs	r2, #31
100015ea:	400a      	ands	r2, r1
100015ec:	2101      	movs	r1, #1
100015ee:	4091      	lsls	r1, r2
100015f0:	1c0a      	adds	r2, r1, #0
100015f2:	601a      	str	r2, [r3, #0]
  }
}
100015f4:	46bd      	mov	sp, r7
100015f6:	b002      	add	sp, #8
100015f8:	bd80      	pop	{r7, pc}
100015fa:	46c0      	nop			; (mov r8, r8)
100015fc:	e000e100 	.word	0xe000e100

10001600 <bit_init>:
// --------------------------------------------------------------
// Einzelnes Bit für Ein- oder Ausgabe initialisieren
// port: P0,P1,P2 bitnr: 0..15 direction: INP 0, OUTP 1
//---------------------------------------------------------------
void bit_init(uint8_t port, uint8_t bitnr, uint8_t direction)
{
10001600:	b590      	push	{r4, r7, lr}
10001602:	b083      	sub	sp, #12
10001604:	af00      	add	r7, sp, #0
10001606:	1c04      	adds	r4, r0, #0
10001608:	1c08      	adds	r0, r1, #0
1000160a:	1c11      	adds	r1, r2, #0
1000160c:	1dfb      	adds	r3, r7, #7
1000160e:	1c22      	adds	r2, r4, #0
10001610:	701a      	strb	r2, [r3, #0]
10001612:	1dbb      	adds	r3, r7, #6
10001614:	1c02      	adds	r2, r0, #0
10001616:	701a      	strb	r2, [r3, #0]
10001618:	1d7b      	adds	r3, r7, #5
1000161a:	1c0a      	adds	r2, r1, #0
1000161c:	701a      	strb	r2, [r3, #0]
	switch (port)
1000161e:	1dfb      	adds	r3, r7, #7
10001620:	781b      	ldrb	r3, [r3, #0]
10001622:	2b01      	cmp	r3, #1
10001624:	d100      	bne.n	10001628 <bit_init+0x28>
10001626:	e0a1      	b.n	1000176c <bit_init+0x16c>
10001628:	2b02      	cmp	r3, #2
1000162a:	d100      	bne.n	1000162e <bit_init+0x2e>
1000162c:	e0ea      	b.n	10001804 <bit_init+0x204>
1000162e:	2b00      	cmp	r3, #0
10001630:	d000      	beq.n	10001634 <bit_init+0x34>
10001632:	e19b      	b.n	1000196c <bit_init+0x36c>
	{
		case 0 :
			{if (bitnr < 4 )
10001634:	1dbb      	adds	r3, r7, #6
10001636:	781b      	ldrb	r3, [r3, #0]
10001638:	2b03      	cmp	r3, #3
1000163a:	d81d      	bhi.n	10001678 <bit_init+0x78>
				{ if (direction == 1) PORT0->IOCR0 |=1UL << ((bitnr * 8)+7);
1000163c:	1d7b      	adds	r3, r7, #5
1000163e:	781b      	ldrb	r3, [r3, #0]
10001640:	2b01      	cmp	r3, #1
10001642:	d10c      	bne.n	1000165e <bit_init+0x5e>
10001644:	4bcb      	ldr	r3, [pc, #812]	; (10001974 <bit_init+0x374>)
10001646:	4acb      	ldr	r2, [pc, #812]	; (10001974 <bit_init+0x374>)
10001648:	6911      	ldr	r1, [r2, #16]
1000164a:	1dba      	adds	r2, r7, #6
1000164c:	7812      	ldrb	r2, [r2, #0]
1000164e:	00d2      	lsls	r2, r2, #3
10001650:	3207      	adds	r2, #7
10001652:	2001      	movs	r0, #1
10001654:	4090      	lsls	r0, r2
10001656:	1c02      	adds	r2, r0, #0
10001658:	430a      	orrs	r2, r1
1000165a:	611a      	str	r2, [r3, #16]
1000165c:	e00c      	b.n	10001678 <bit_init+0x78>
				  else PORT0->IOCR0 &= ~(1UL << ((bitnr * 8 ) + 7 ));
1000165e:	4bc5      	ldr	r3, [pc, #788]	; (10001974 <bit_init+0x374>)
10001660:	4ac4      	ldr	r2, [pc, #784]	; (10001974 <bit_init+0x374>)
10001662:	6912      	ldr	r2, [r2, #16]
10001664:	1db9      	adds	r1, r7, #6
10001666:	7809      	ldrb	r1, [r1, #0]
10001668:	00c9      	lsls	r1, r1, #3
1000166a:	3107      	adds	r1, #7
1000166c:	2001      	movs	r0, #1
1000166e:	4088      	lsls	r0, r1
10001670:	1c01      	adds	r1, r0, #0
10001672:	43c9      	mvns	r1, r1
10001674:	400a      	ands	r2, r1
10001676:	611a      	str	r2, [r3, #16]
				}
			 if ( (bitnr <8) && (bitnr > 3))
10001678:	1dbb      	adds	r3, r7, #6
1000167a:	781b      	ldrb	r3, [r3, #0]
1000167c:	2b07      	cmp	r3, #7
1000167e:	d823      	bhi.n	100016c8 <bit_init+0xc8>
10001680:	1dbb      	adds	r3, r7, #6
10001682:	781b      	ldrb	r3, [r3, #0]
10001684:	2b03      	cmp	r3, #3
10001686:	d91f      	bls.n	100016c8 <bit_init+0xc8>
					 { if (direction == 1) PORT0->IOCR4 |= 1UL<< (((bitnr-4) * 8)+7);
10001688:	1d7b      	adds	r3, r7, #5
1000168a:	781b      	ldrb	r3, [r3, #0]
1000168c:	2b01      	cmp	r3, #1
1000168e:	d10d      	bne.n	100016ac <bit_init+0xac>
10001690:	4bb8      	ldr	r3, [pc, #736]	; (10001974 <bit_init+0x374>)
10001692:	4ab8      	ldr	r2, [pc, #736]	; (10001974 <bit_init+0x374>)
10001694:	6951      	ldr	r1, [r2, #20]
10001696:	1dba      	adds	r2, r7, #6
10001698:	7812      	ldrb	r2, [r2, #0]
1000169a:	3a04      	subs	r2, #4
1000169c:	00d2      	lsls	r2, r2, #3
1000169e:	3207      	adds	r2, #7
100016a0:	2001      	movs	r0, #1
100016a2:	4090      	lsls	r0, r2
100016a4:	1c02      	adds	r2, r0, #0
100016a6:	430a      	orrs	r2, r1
100016a8:	615a      	str	r2, [r3, #20]
100016aa:	e00d      	b.n	100016c8 <bit_init+0xc8>
					   else PORT0->IOCR4 &= ~(1UL << (((bitnr-4) * 8)+7) );
100016ac:	4bb1      	ldr	r3, [pc, #708]	; (10001974 <bit_init+0x374>)
100016ae:	4ab1      	ldr	r2, [pc, #708]	; (10001974 <bit_init+0x374>)
100016b0:	6952      	ldr	r2, [r2, #20]
100016b2:	1db9      	adds	r1, r7, #6
100016b4:	7809      	ldrb	r1, [r1, #0]
100016b6:	3904      	subs	r1, #4
100016b8:	00c9      	lsls	r1, r1, #3
100016ba:	3107      	adds	r1, #7
100016bc:	2001      	movs	r0, #1
100016be:	4088      	lsls	r0, r1
100016c0:	1c01      	adds	r1, r0, #0
100016c2:	43c9      	mvns	r1, r1
100016c4:	400a      	ands	r2, r1
100016c6:	615a      	str	r2, [r3, #20]
					 }
			 if ( (bitnr <12) && (bitnr > 7))
100016c8:	1dbb      	adds	r3, r7, #6
100016ca:	781b      	ldrb	r3, [r3, #0]
100016cc:	2b0b      	cmp	r3, #11
100016ce:	d823      	bhi.n	10001718 <bit_init+0x118>
100016d0:	1dbb      	adds	r3, r7, #6
100016d2:	781b      	ldrb	r3, [r3, #0]
100016d4:	2b07      	cmp	r3, #7
100016d6:	d91f      	bls.n	10001718 <bit_init+0x118>
			 		 { if (direction == 1) PORT0->IOCR8 |= 1UL << (((bitnr-8) * 8)+7);
100016d8:	1d7b      	adds	r3, r7, #5
100016da:	781b      	ldrb	r3, [r3, #0]
100016dc:	2b01      	cmp	r3, #1
100016de:	d10d      	bne.n	100016fc <bit_init+0xfc>
100016e0:	4ba4      	ldr	r3, [pc, #656]	; (10001974 <bit_init+0x374>)
100016e2:	4aa4      	ldr	r2, [pc, #656]	; (10001974 <bit_init+0x374>)
100016e4:	6991      	ldr	r1, [r2, #24]
100016e6:	1dba      	adds	r2, r7, #6
100016e8:	7812      	ldrb	r2, [r2, #0]
100016ea:	3a08      	subs	r2, #8
100016ec:	00d2      	lsls	r2, r2, #3
100016ee:	3207      	adds	r2, #7
100016f0:	2001      	movs	r0, #1
100016f2:	4090      	lsls	r0, r2
100016f4:	1c02      	adds	r2, r0, #0
100016f6:	430a      	orrs	r2, r1
100016f8:	619a      	str	r2, [r3, #24]
100016fa:	e00d      	b.n	10001718 <bit_init+0x118>
			 		   else PORT0->IOCR8 &= ~(1UL << (((bitnr-8) * 8)+7) );
100016fc:	4b9d      	ldr	r3, [pc, #628]	; (10001974 <bit_init+0x374>)
100016fe:	4a9d      	ldr	r2, [pc, #628]	; (10001974 <bit_init+0x374>)
10001700:	6992      	ldr	r2, [r2, #24]
10001702:	1db9      	adds	r1, r7, #6
10001704:	7809      	ldrb	r1, [r1, #0]
10001706:	3908      	subs	r1, #8
10001708:	00c9      	lsls	r1, r1, #3
1000170a:	3107      	adds	r1, #7
1000170c:	2001      	movs	r0, #1
1000170e:	4088      	lsls	r0, r1
10001710:	1c01      	adds	r1, r0, #0
10001712:	43c9      	mvns	r1, r1
10001714:	400a      	ands	r2, r1
10001716:	619a      	str	r2, [r3, #24]
			 		 }
			 if ( (bitnr <16) && (bitnr > 11))
10001718:	1dbb      	adds	r3, r7, #6
1000171a:	781b      	ldrb	r3, [r3, #0]
1000171c:	2b0f      	cmp	r3, #15
1000171e:	d824      	bhi.n	1000176a <bit_init+0x16a>
10001720:	1dbb      	adds	r3, r7, #6
10001722:	781b      	ldrb	r3, [r3, #0]
10001724:	2b0b      	cmp	r3, #11
10001726:	d920      	bls.n	1000176a <bit_init+0x16a>
			 		{ if (direction == 1) PORT0->IOCR12 |= 1UL << (((bitnr-12) * 8)+7);
10001728:	1d7b      	adds	r3, r7, #5
1000172a:	781b      	ldrb	r3, [r3, #0]
1000172c:	2b01      	cmp	r3, #1
1000172e:	d10d      	bne.n	1000174c <bit_init+0x14c>
10001730:	4b90      	ldr	r3, [pc, #576]	; (10001974 <bit_init+0x374>)
10001732:	4a90      	ldr	r2, [pc, #576]	; (10001974 <bit_init+0x374>)
10001734:	69d1      	ldr	r1, [r2, #28]
10001736:	1dba      	adds	r2, r7, #6
10001738:	7812      	ldrb	r2, [r2, #0]
1000173a:	3a0c      	subs	r2, #12
1000173c:	00d2      	lsls	r2, r2, #3
1000173e:	3207      	adds	r2, #7
10001740:	2001      	movs	r0, #1
10001742:	4090      	lsls	r0, r2
10001744:	1c02      	adds	r2, r0, #0
10001746:	430a      	orrs	r2, r1
10001748:	61da      	str	r2, [r3, #28]
1000174a:	e00e      	b.n	1000176a <bit_init+0x16a>
			 		  else PORT0->IOCR12 &= ~(1UL << (((bitnr-12) * 8)+7) );
1000174c:	4b89      	ldr	r3, [pc, #548]	; (10001974 <bit_init+0x374>)
1000174e:	4a89      	ldr	r2, [pc, #548]	; (10001974 <bit_init+0x374>)
10001750:	69d2      	ldr	r2, [r2, #28]
10001752:	1db9      	adds	r1, r7, #6
10001754:	7809      	ldrb	r1, [r1, #0]
10001756:	390c      	subs	r1, #12
10001758:	00c9      	lsls	r1, r1, #3
1000175a:	3107      	adds	r1, #7
1000175c:	2001      	movs	r0, #1
1000175e:	4088      	lsls	r0, r1
10001760:	1c01      	adds	r1, r0, #0
10001762:	43c9      	mvns	r1, r1
10001764:	400a      	ands	r2, r1
10001766:	61da      	str	r2, [r3, #28]
			 		}
			}
			break;
10001768:	e100      	b.n	1000196c <bit_init+0x36c>
1000176a:	e0ff      	b.n	1000196c <bit_init+0x36c>
	  case 1 :
			{
				{if (bitnr < 4 )
1000176c:	1dbb      	adds	r3, r7, #6
1000176e:	781b      	ldrb	r3, [r3, #0]
10001770:	2b03      	cmp	r3, #3
10001772:	d81d      	bhi.n	100017b0 <bit_init+0x1b0>
					{ if (direction == 1) PORT1->IOCR0 |=1UL << ((bitnr * 8)+7);
10001774:	1d7b      	adds	r3, r7, #5
10001776:	781b      	ldrb	r3, [r3, #0]
10001778:	2b01      	cmp	r3, #1
1000177a:	d10c      	bne.n	10001796 <bit_init+0x196>
1000177c:	4b7e      	ldr	r3, [pc, #504]	; (10001978 <bit_init+0x378>)
1000177e:	4a7e      	ldr	r2, [pc, #504]	; (10001978 <bit_init+0x378>)
10001780:	6911      	ldr	r1, [r2, #16]
10001782:	1dba      	adds	r2, r7, #6
10001784:	7812      	ldrb	r2, [r2, #0]
10001786:	00d2      	lsls	r2, r2, #3
10001788:	3207      	adds	r2, #7
1000178a:	2001      	movs	r0, #1
1000178c:	4090      	lsls	r0, r2
1000178e:	1c02      	adds	r2, r0, #0
10001790:	430a      	orrs	r2, r1
10001792:	611a      	str	r2, [r3, #16]
10001794:	e00c      	b.n	100017b0 <bit_init+0x1b0>
						else PORT1->IOCR0 &= ~(1UL << ((bitnr * 8 ) + 7 ));
10001796:	4b78      	ldr	r3, [pc, #480]	; (10001978 <bit_init+0x378>)
10001798:	4a77      	ldr	r2, [pc, #476]	; (10001978 <bit_init+0x378>)
1000179a:	6912      	ldr	r2, [r2, #16]
1000179c:	1db9      	adds	r1, r7, #6
1000179e:	7809      	ldrb	r1, [r1, #0]
100017a0:	00c9      	lsls	r1, r1, #3
100017a2:	3107      	adds	r1, #7
100017a4:	2001      	movs	r0, #1
100017a6:	4088      	lsls	r0, r1
100017a8:	1c01      	adds	r1, r0, #0
100017aa:	43c9      	mvns	r1, r1
100017ac:	400a      	ands	r2, r1
100017ae:	611a      	str	r2, [r3, #16]
					}
			if ((bitnr < 8) && (bitnr > 3)) {
100017b0:	1dbb      	adds	r3, r7, #6
100017b2:	781b      	ldrb	r3, [r3, #0]
100017b4:	2b07      	cmp	r3, #7
100017b6:	d824      	bhi.n	10001802 <bit_init+0x202>
100017b8:	1dbb      	adds	r3, r7, #6
100017ba:	781b      	ldrb	r3, [r3, #0]
100017bc:	2b03      	cmp	r3, #3
100017be:	d920      	bls.n	10001802 <bit_init+0x202>
				if (direction == 1) PORT1->IOCR4 |= 1UL << (((bitnr - 4) * 8) + 7);
100017c0:	1d7b      	adds	r3, r7, #5
100017c2:	781b      	ldrb	r3, [r3, #0]
100017c4:	2b01      	cmp	r3, #1
100017c6:	d10d      	bne.n	100017e4 <bit_init+0x1e4>
100017c8:	4b6b      	ldr	r3, [pc, #428]	; (10001978 <bit_init+0x378>)
100017ca:	4a6b      	ldr	r2, [pc, #428]	; (10001978 <bit_init+0x378>)
100017cc:	6951      	ldr	r1, [r2, #20]
100017ce:	1dba      	adds	r2, r7, #6
100017d0:	7812      	ldrb	r2, [r2, #0]
100017d2:	3a04      	subs	r2, #4
100017d4:	00d2      	lsls	r2, r2, #3
100017d6:	3207      	adds	r2, #7
100017d8:	2001      	movs	r0, #1
100017da:	4090      	lsls	r0, r2
100017dc:	1c02      	adds	r2, r0, #0
100017de:	430a      	orrs	r2, r1
100017e0:	615a      	str	r2, [r3, #20]
100017e2:	e00e      	b.n	10001802 <bit_init+0x202>
				else
					PORT1->IOCR4 &= ~(1UL << (((bitnr - 4) * 8) + 7));
100017e4:	4b64      	ldr	r3, [pc, #400]	; (10001978 <bit_init+0x378>)
100017e6:	4a64      	ldr	r2, [pc, #400]	; (10001978 <bit_init+0x378>)
100017e8:	6952      	ldr	r2, [r2, #20]
100017ea:	1db9      	adds	r1, r7, #6
100017ec:	7809      	ldrb	r1, [r1, #0]
100017ee:	3904      	subs	r1, #4
100017f0:	00c9      	lsls	r1, r1, #3
100017f2:	3107      	adds	r1, #7
100017f4:	2001      	movs	r0, #1
100017f6:	4088      	lsls	r0, r1
100017f8:	1c01      	adds	r1, r0, #0
100017fa:	43c9      	mvns	r1, r1
100017fc:	400a      	ands	r2, r1
100017fe:	615a      	str	r2, [r3, #20]
			}

				}
			}
			break;
10001800:	e0b4      	b.n	1000196c <bit_init+0x36c>
10001802:	e0b3      	b.n	1000196c <bit_init+0x36c>

	  case 2 : //Achtung!! Nur Pins P2.0, P2.1, P2.10 und P2.11 sind als Out Pin einstellbar
	  	{
	  		if (bitnr < 2 ) {
10001804:	1dbb      	adds	r3, r7, #6
10001806:	781b      	ldrb	r3, [r3, #0]
10001808:	2b01      	cmp	r3, #1
1000180a:	d828      	bhi.n	1000185e <bit_init+0x25e>
	  			CLR_BIT(PORT2->PDISC,bitnr); // digital Pad aktiv
1000180c:	4b5b      	ldr	r3, [pc, #364]	; (1000197c <bit_init+0x37c>)
1000180e:	4a5b      	ldr	r2, [pc, #364]	; (1000197c <bit_init+0x37c>)
10001810:	6e12      	ldr	r2, [r2, #96]	; 0x60
10001812:	1db9      	adds	r1, r7, #6
10001814:	7809      	ldrb	r1, [r1, #0]
10001816:	2001      	movs	r0, #1
10001818:	4088      	lsls	r0, r1
1000181a:	1c01      	adds	r1, r0, #0
1000181c:	43c9      	mvns	r1, r1
1000181e:	400a      	ands	r2, r1
10001820:	661a      	str	r2, [r3, #96]	; 0x60
	  			if (direction == 1) PORT2->IOCR0 |=1UL << ((bitnr * 8)+7);
10001822:	1d7b      	adds	r3, r7, #5
10001824:	781b      	ldrb	r3, [r3, #0]
10001826:	2b01      	cmp	r3, #1
10001828:	d10c      	bne.n	10001844 <bit_init+0x244>
1000182a:	4b54      	ldr	r3, [pc, #336]	; (1000197c <bit_init+0x37c>)
1000182c:	4a53      	ldr	r2, [pc, #332]	; (1000197c <bit_init+0x37c>)
1000182e:	6911      	ldr	r1, [r2, #16]
10001830:	1dba      	adds	r2, r7, #6
10001832:	7812      	ldrb	r2, [r2, #0]
10001834:	00d2      	lsls	r2, r2, #3
10001836:	3207      	adds	r2, #7
10001838:	2001      	movs	r0, #1
1000183a:	4090      	lsls	r0, r2
1000183c:	1c02      	adds	r2, r0, #0
1000183e:	430a      	orrs	r2, r1
10001840:	611a      	str	r2, [r3, #16]
10001842:	e00c      	b.n	1000185e <bit_init+0x25e>
					else PORT2->IOCR0 &= ~(1UL << ((bitnr * 8 ) + 7 ));
10001844:	4b4d      	ldr	r3, [pc, #308]	; (1000197c <bit_init+0x37c>)
10001846:	4a4d      	ldr	r2, [pc, #308]	; (1000197c <bit_init+0x37c>)
10001848:	6912      	ldr	r2, [r2, #16]
1000184a:	1db9      	adds	r1, r7, #6
1000184c:	7809      	ldrb	r1, [r1, #0]
1000184e:	00c9      	lsls	r1, r1, #3
10001850:	3107      	adds	r1, #7
10001852:	2001      	movs	r0, #1
10001854:	4088      	lsls	r0, r1
10001856:	1c01      	adds	r1, r0, #0
10001858:	43c9      	mvns	r1, r1
1000185a:	400a      	ands	r2, r1
1000185c:	611a      	str	r2, [r3, #16]
	  		}
				if ((bitnr > 1)&&(bitnr<4)) {
1000185e:	1dbb      	adds	r3, r7, #6
10001860:	781b      	ldrb	r3, [r3, #0]
10001862:	2b01      	cmp	r3, #1
10001864:	d91b      	bls.n	1000189e <bit_init+0x29e>
10001866:	1dbb      	adds	r3, r7, #6
10001868:	781b      	ldrb	r3, [r3, #0]
1000186a:	2b03      	cmp	r3, #3
1000186c:	d817      	bhi.n	1000189e <bit_init+0x29e>
					CLR_BIT(PORT2->PDISC,bitnr); // digital Pad aktiv
1000186e:	4b43      	ldr	r3, [pc, #268]	; (1000197c <bit_init+0x37c>)
10001870:	4a42      	ldr	r2, [pc, #264]	; (1000197c <bit_init+0x37c>)
10001872:	6e12      	ldr	r2, [r2, #96]	; 0x60
10001874:	1db9      	adds	r1, r7, #6
10001876:	7809      	ldrb	r1, [r1, #0]
10001878:	2001      	movs	r0, #1
1000187a:	4088      	lsls	r0, r1
1000187c:	1c01      	adds	r1, r0, #0
1000187e:	43c9      	mvns	r1, r1
10001880:	400a      	ands	r2, r1
10001882:	661a      	str	r2, [r3, #96]	; 0x60
					PORT2->IOCR0 &= ~(1UL << ((bitnr * 8) + 7));
10001884:	4b3d      	ldr	r3, [pc, #244]	; (1000197c <bit_init+0x37c>)
10001886:	4a3d      	ldr	r2, [pc, #244]	; (1000197c <bit_init+0x37c>)
10001888:	6912      	ldr	r2, [r2, #16]
1000188a:	1db9      	adds	r1, r7, #6
1000188c:	7809      	ldrb	r1, [r1, #0]
1000188e:	00c9      	lsls	r1, r1, #3
10001890:	3107      	adds	r1, #7
10001892:	2001      	movs	r0, #1
10001894:	4088      	lsls	r0, r1
10001896:	1c01      	adds	r1, r0, #0
10001898:	43c9      	mvns	r1, r1
1000189a:	400a      	ands	r2, r1
1000189c:	611a      	str	r2, [r3, #16]
				}
	  		if ((bitnr < 8) && (bitnr > 3)) {
1000189e:	1dbb      	adds	r3, r7, #6
100018a0:	781b      	ldrb	r3, [r3, #0]
100018a2:	2b07      	cmp	r3, #7
100018a4:	d81c      	bhi.n	100018e0 <bit_init+0x2e0>
100018a6:	1dbb      	adds	r3, r7, #6
100018a8:	781b      	ldrb	r3, [r3, #0]
100018aa:	2b03      	cmp	r3, #3
100018ac:	d918      	bls.n	100018e0 <bit_init+0x2e0>
	  			    CLR_BIT(PORT2->PDISC,bitnr); // digital Pad aktiv
100018ae:	4b33      	ldr	r3, [pc, #204]	; (1000197c <bit_init+0x37c>)
100018b0:	4a32      	ldr	r2, [pc, #200]	; (1000197c <bit_init+0x37c>)
100018b2:	6e12      	ldr	r2, [r2, #96]	; 0x60
100018b4:	1db9      	adds	r1, r7, #6
100018b6:	7809      	ldrb	r1, [r1, #0]
100018b8:	2001      	movs	r0, #1
100018ba:	4088      	lsls	r0, r1
100018bc:	1c01      	adds	r1, r0, #0
100018be:	43c9      	mvns	r1, r1
100018c0:	400a      	ands	r2, r1
100018c2:	661a      	str	r2, [r3, #96]	; 0x60
					PORT2->IOCR4 &= ~(1UL << (((bitnr-4) * 8 ) + 7 ));
100018c4:	4b2d      	ldr	r3, [pc, #180]	; (1000197c <bit_init+0x37c>)
100018c6:	4a2d      	ldr	r2, [pc, #180]	; (1000197c <bit_init+0x37c>)
100018c8:	6952      	ldr	r2, [r2, #20]
100018ca:	1db9      	adds	r1, r7, #6
100018cc:	7809      	ldrb	r1, [r1, #0]
100018ce:	3904      	subs	r1, #4
100018d0:	00c9      	lsls	r1, r1, #3
100018d2:	3107      	adds	r1, #7
100018d4:	2001      	movs	r0, #1
100018d6:	4088      	lsls	r0, r1
100018d8:	1c01      	adds	r1, r0, #0
100018da:	43c9      	mvns	r1, r1
100018dc:	400a      	ands	r2, r1
100018de:	615a      	str	r2, [r3, #20]
				}
	  		if ((bitnr < 10) && (bitnr > 7)) {
100018e0:	1dbb      	adds	r3, r7, #6
100018e2:	781b      	ldrb	r3, [r3, #0]
100018e4:	2b09      	cmp	r3, #9
100018e6:	d811      	bhi.n	1000190c <bit_init+0x30c>
100018e8:	1dbb      	adds	r3, r7, #6
100018ea:	781b      	ldrb	r3, [r3, #0]
100018ec:	2b07      	cmp	r3, #7
100018ee:	d90d      	bls.n	1000190c <bit_init+0x30c>
	  			PORT2->IOCR8 &= ~(1UL << (((bitnr-8) * 8 ) + 7 ));
100018f0:	4b22      	ldr	r3, [pc, #136]	; (1000197c <bit_init+0x37c>)
100018f2:	4a22      	ldr	r2, [pc, #136]	; (1000197c <bit_init+0x37c>)
100018f4:	6992      	ldr	r2, [r2, #24]
100018f6:	1db9      	adds	r1, r7, #6
100018f8:	7809      	ldrb	r1, [r1, #0]
100018fa:	3908      	subs	r1, #8
100018fc:	00c9      	lsls	r1, r1, #3
100018fe:	3107      	adds	r1, #7
10001900:	2001      	movs	r0, #1
10001902:	4088      	lsls	r0, r1
10001904:	1c01      	adds	r1, r0, #0
10001906:	43c9      	mvns	r1, r1
10001908:	400a      	ands	r2, r1
1000190a:	619a      	str	r2, [r3, #24]
	  		}
	  		if (bitnr > 9 ) {
1000190c:	1dbb      	adds	r3, r7, #6
1000190e:	781b      	ldrb	r3, [r3, #0]
10001910:	2b09      	cmp	r3, #9
10001912:	d92a      	bls.n	1000196a <bit_init+0x36a>
	  			CLR_BIT(PORT2->PDISC,bitnr); // digital Pad aktiv
10001914:	4b19      	ldr	r3, [pc, #100]	; (1000197c <bit_init+0x37c>)
10001916:	4a19      	ldr	r2, [pc, #100]	; (1000197c <bit_init+0x37c>)
10001918:	6e12      	ldr	r2, [r2, #96]	; 0x60
1000191a:	1db9      	adds	r1, r7, #6
1000191c:	7809      	ldrb	r1, [r1, #0]
1000191e:	2001      	movs	r0, #1
10001920:	4088      	lsls	r0, r1
10001922:	1c01      	adds	r1, r0, #0
10001924:	43c9      	mvns	r1, r1
10001926:	400a      	ands	r2, r1
10001928:	661a      	str	r2, [r3, #96]	; 0x60
	  			if (direction == 1) PORT2->IOCR8 |=1UL << (((bitnr-8) * 8)+7);
1000192a:	1d7b      	adds	r3, r7, #5
1000192c:	781b      	ldrb	r3, [r3, #0]
1000192e:	2b01      	cmp	r3, #1
10001930:	d10d      	bne.n	1000194e <bit_init+0x34e>
10001932:	4b12      	ldr	r3, [pc, #72]	; (1000197c <bit_init+0x37c>)
10001934:	4a11      	ldr	r2, [pc, #68]	; (1000197c <bit_init+0x37c>)
10001936:	6991      	ldr	r1, [r2, #24]
10001938:	1dba      	adds	r2, r7, #6
1000193a:	7812      	ldrb	r2, [r2, #0]
1000193c:	3a08      	subs	r2, #8
1000193e:	00d2      	lsls	r2, r2, #3
10001940:	3207      	adds	r2, #7
10001942:	2001      	movs	r0, #1
10001944:	4090      	lsls	r0, r2
10001946:	1c02      	adds	r2, r0, #0
10001948:	430a      	orrs	r2, r1
1000194a:	619a      	str	r2, [r3, #24]
1000194c:	e00d      	b.n	1000196a <bit_init+0x36a>
	  			else PORT2->IOCR8 &= ~(1UL << (((bitnr-8) * 8 ) + 7 ));
1000194e:	4b0b      	ldr	r3, [pc, #44]	; (1000197c <bit_init+0x37c>)
10001950:	4a0a      	ldr	r2, [pc, #40]	; (1000197c <bit_init+0x37c>)
10001952:	6992      	ldr	r2, [r2, #24]
10001954:	1db9      	adds	r1, r7, #6
10001956:	7809      	ldrb	r1, [r1, #0]
10001958:	3908      	subs	r1, #8
1000195a:	00c9      	lsls	r1, r1, #3
1000195c:	3107      	adds	r1, #7
1000195e:	2001      	movs	r0, #1
10001960:	4088      	lsls	r0, r1
10001962:	1c01      	adds	r1, r0, #0
10001964:	43c9      	mvns	r1, r1
10001966:	400a      	ands	r2, r1
10001968:	619a      	str	r2, [r3, #24]
	  		}
  			break;
1000196a:	46c0      	nop			; (mov r8, r8)
	  	}
	  }
}
1000196c:	46bd      	mov	sp, r7
1000196e:	b003      	add	sp, #12
10001970:	bd90      	pop	{r4, r7, pc}
10001972:	46c0      	nop			; (mov r8, r8)
10001974:	40040000 	.word	0x40040000
10001978:	40040100 	.word	0x40040100
1000197c:	40040200 	.word	0x40040200

10001980 <bit_init_mode>:
* Einzelnes Bit für Ein- oder Ausgabe initialisieren
* port: P0,P1,P2 bitnr: 0..15 direction: INP 0, OUTP 1
* mode: NO_PULL PULLUP PULLDOWN
*/
void bit_init_mode (uint8_t port, uint8_t bitnr, uint8_t direction, uint8_t mode)
{
10001980:	b5b0      	push	{r4, r5, r7, lr}
10001982:	b082      	sub	sp, #8
10001984:	af00      	add	r7, sp, #0
10001986:	1c05      	adds	r5, r0, #0
10001988:	1c0c      	adds	r4, r1, #0
1000198a:	1c10      	adds	r0, r2, #0
1000198c:	1c19      	adds	r1, r3, #0
1000198e:	1dfb      	adds	r3, r7, #7
10001990:	1c2a      	adds	r2, r5, #0
10001992:	701a      	strb	r2, [r3, #0]
10001994:	1dbb      	adds	r3, r7, #6
10001996:	1c22      	adds	r2, r4, #0
10001998:	701a      	strb	r2, [r3, #0]
1000199a:	1d7b      	adds	r3, r7, #5
1000199c:	1c02      	adds	r2, r0, #0
1000199e:	701a      	strb	r2, [r3, #0]
100019a0:	1d3b      	adds	r3, r7, #4
100019a2:	1c0a      	adds	r2, r1, #0
100019a4:	701a      	strb	r2, [r3, #0]
	switch (port)
100019a6:	1dfb      	adds	r3, r7, #7
100019a8:	781b      	ldrb	r3, [r3, #0]
100019aa:	2b01      	cmp	r3, #1
100019ac:	d100      	bne.n	100019b0 <bit_init_mode+0x30>
100019ae:	e1cf      	b.n	10001d50 <bit_init_mode+0x3d0>
100019b0:	2b02      	cmp	r3, #2
100019b2:	d100      	bne.n	100019b6 <bit_init_mode+0x36>
100019b4:	e2ab      	b.n	10001f0e <bit_init_mode+0x58e>
100019b6:	2b00      	cmp	r3, #0
100019b8:	d001      	beq.n	100019be <bit_init_mode+0x3e>
100019ba:	f000 fd98 	bl	100024ee <bit_init_mode+0xb6e>
	{
		case 0 :
		{
			if (bitnr < 4 ) {
100019be:	1dbb      	adds	r3, r7, #6
100019c0:	781b      	ldrb	r3, [r3, #0]
100019c2:	2b03      	cmp	r3, #3
100019c4:	d865      	bhi.n	10001a92 <bit_init_mode+0x112>
				if (direction == 1) {
100019c6:	1d7b      	adds	r3, r7, #5
100019c8:	781b      	ldrb	r3, [r3, #0]
100019ca:	2b01      	cmp	r3, #1
100019cc:	d119      	bne.n	10001a02 <bit_init_mode+0x82>
					PORT0->IOCR0 |=1UL << ((bitnr * 8)+7);
100019ce:	4bdf      	ldr	r3, [pc, #892]	; (10001d4c <bit_init_mode+0x3cc>)
100019d0:	4ade      	ldr	r2, [pc, #888]	; (10001d4c <bit_init_mode+0x3cc>)
100019d2:	6911      	ldr	r1, [r2, #16]
100019d4:	1dba      	adds	r2, r7, #6
100019d6:	7812      	ldrb	r2, [r2, #0]
100019d8:	00d2      	lsls	r2, r2, #3
100019da:	3207      	adds	r2, #7
100019dc:	2001      	movs	r0, #1
100019de:	4090      	lsls	r0, r2
100019e0:	1c02      	adds	r2, r0, #0
100019e2:	430a      	orrs	r2, r1
100019e4:	611a      	str	r2, [r3, #16]
					PORT0->IOCR0 &= ~(0x0000000F << ((bitnr * 8)+3));
100019e6:	4bd9      	ldr	r3, [pc, #868]	; (10001d4c <bit_init_mode+0x3cc>)
100019e8:	4ad8      	ldr	r2, [pc, #864]	; (10001d4c <bit_init_mode+0x3cc>)
100019ea:	6912      	ldr	r2, [r2, #16]
100019ec:	1db9      	adds	r1, r7, #6
100019ee:	7809      	ldrb	r1, [r1, #0]
100019f0:	00c9      	lsls	r1, r1, #3
100019f2:	3103      	adds	r1, #3
100019f4:	200f      	movs	r0, #15
100019f6:	4088      	lsls	r0, r1
100019f8:	1c01      	adds	r1, r0, #0
100019fa:	43c9      	mvns	r1, r1
100019fc:	400a      	ands	r2, r1
100019fe:	611a      	str	r2, [r3, #16]
10001a00:	e047      	b.n	10001a92 <bit_init_mode+0x112>
				}
				else {
					PORT0->IOCR0 &= ~(1UL << ((bitnr * 8 ) + 7 ));
10001a02:	4bd2      	ldr	r3, [pc, #840]	; (10001d4c <bit_init_mode+0x3cc>)
10001a04:	4ad1      	ldr	r2, [pc, #836]	; (10001d4c <bit_init_mode+0x3cc>)
10001a06:	6912      	ldr	r2, [r2, #16]
10001a08:	1db9      	adds	r1, r7, #6
10001a0a:	7809      	ldrb	r1, [r1, #0]
10001a0c:	00c9      	lsls	r1, r1, #3
10001a0e:	3107      	adds	r1, #7
10001a10:	2001      	movs	r0, #1
10001a12:	4088      	lsls	r0, r1
10001a14:	1c01      	adds	r1, r0, #0
10001a16:	43c9      	mvns	r1, r1
10001a18:	400a      	ands	r2, r1
10001a1a:	611a      	str	r2, [r3, #16]
					if (mode == PULLUP) {
10001a1c:	1d3b      	adds	r3, r7, #4
10001a1e:	781b      	ldrb	r3, [r3, #0]
10001a20:	2b01      	cmp	r3, #1
10001a22:	d119      	bne.n	10001a58 <bit_init_mode+0xd8>
						PORT0->IOCR0 &= ~(0x0000001F << ((bitnr * 8)+3) );
10001a24:	4bc9      	ldr	r3, [pc, #804]	; (10001d4c <bit_init_mode+0x3cc>)
10001a26:	4ac9      	ldr	r2, [pc, #804]	; (10001d4c <bit_init_mode+0x3cc>)
10001a28:	6912      	ldr	r2, [r2, #16]
10001a2a:	1db9      	adds	r1, r7, #6
10001a2c:	7809      	ldrb	r1, [r1, #0]
10001a2e:	00c9      	lsls	r1, r1, #3
10001a30:	3103      	adds	r1, #3
10001a32:	201f      	movs	r0, #31
10001a34:	4088      	lsls	r0, r1
10001a36:	1c01      	adds	r1, r0, #0
10001a38:	43c9      	mvns	r1, r1
10001a3a:	400a      	ands	r2, r1
10001a3c:	611a      	str	r2, [r3, #16]
						PORT0->IOCR0 |= (1UL << ((bitnr * 8)+4) );
10001a3e:	4bc3      	ldr	r3, [pc, #780]	; (10001d4c <bit_init_mode+0x3cc>)
10001a40:	4ac2      	ldr	r2, [pc, #776]	; (10001d4c <bit_init_mode+0x3cc>)
10001a42:	6911      	ldr	r1, [r2, #16]
10001a44:	1dba      	adds	r2, r7, #6
10001a46:	7812      	ldrb	r2, [r2, #0]
10001a48:	00d2      	lsls	r2, r2, #3
10001a4a:	3204      	adds	r2, #4
10001a4c:	2001      	movs	r0, #1
10001a4e:	4090      	lsls	r0, r2
10001a50:	1c02      	adds	r2, r0, #0
10001a52:	430a      	orrs	r2, r1
10001a54:	611a      	str	r2, [r3, #16]
10001a56:	e01c      	b.n	10001a92 <bit_init_mode+0x112>
					} else if (mode == PULLDOWN) {
10001a58:	1d3b      	adds	r3, r7, #4
10001a5a:	781b      	ldrb	r3, [r3, #0]
10001a5c:	2b02      	cmp	r3, #2
10001a5e:	d118      	bne.n	10001a92 <bit_init_mode+0x112>
						PORT0->IOCR0 &= ~(0x0000001F << ((bitnr * 8)+3) );
10001a60:	4bba      	ldr	r3, [pc, #744]	; (10001d4c <bit_init_mode+0x3cc>)
10001a62:	4aba      	ldr	r2, [pc, #744]	; (10001d4c <bit_init_mode+0x3cc>)
10001a64:	6912      	ldr	r2, [r2, #16]
10001a66:	1db9      	adds	r1, r7, #6
10001a68:	7809      	ldrb	r1, [r1, #0]
10001a6a:	00c9      	lsls	r1, r1, #3
10001a6c:	3103      	adds	r1, #3
10001a6e:	201f      	movs	r0, #31
10001a70:	4088      	lsls	r0, r1
10001a72:	1c01      	adds	r1, r0, #0
10001a74:	43c9      	mvns	r1, r1
10001a76:	400a      	ands	r2, r1
10001a78:	611a      	str	r2, [r3, #16]
						PORT0->IOCR0 |= (1UL << ((bitnr * 8)+3) );
10001a7a:	4bb4      	ldr	r3, [pc, #720]	; (10001d4c <bit_init_mode+0x3cc>)
10001a7c:	4ab3      	ldr	r2, [pc, #716]	; (10001d4c <bit_init_mode+0x3cc>)
10001a7e:	6911      	ldr	r1, [r2, #16]
10001a80:	1dba      	adds	r2, r7, #6
10001a82:	7812      	ldrb	r2, [r2, #0]
10001a84:	00d2      	lsls	r2, r2, #3
10001a86:	3203      	adds	r2, #3
10001a88:	2001      	movs	r0, #1
10001a8a:	4090      	lsls	r0, r2
10001a8c:	1c02      	adds	r2, r0, #0
10001a8e:	430a      	orrs	r2, r1
10001a90:	611a      	str	r2, [r3, #16]
					}
				}
			}
			if ( (bitnr <8) && (bitnr > 3)) {
10001a92:	1dbb      	adds	r3, r7, #6
10001a94:	781b      	ldrb	r3, [r3, #0]
10001a96:	2b07      	cmp	r3, #7
10001a98:	d86e      	bhi.n	10001b78 <bit_init_mode+0x1f8>
10001a9a:	1dbb      	adds	r3, r7, #6
10001a9c:	781b      	ldrb	r3, [r3, #0]
10001a9e:	2b03      	cmp	r3, #3
10001aa0:	d96a      	bls.n	10001b78 <bit_init_mode+0x1f8>
				if (direction == 1) {
10001aa2:	1d7b      	adds	r3, r7, #5
10001aa4:	781b      	ldrb	r3, [r3, #0]
10001aa6:	2b01      	cmp	r3, #1
10001aa8:	d11b      	bne.n	10001ae2 <bit_init_mode+0x162>
					PORT0->IOCR4 |= 1UL<< (((bitnr-4) * 8)+7);
10001aaa:	4ba8      	ldr	r3, [pc, #672]	; (10001d4c <bit_init_mode+0x3cc>)
10001aac:	4aa7      	ldr	r2, [pc, #668]	; (10001d4c <bit_init_mode+0x3cc>)
10001aae:	6951      	ldr	r1, [r2, #20]
10001ab0:	1dba      	adds	r2, r7, #6
10001ab2:	7812      	ldrb	r2, [r2, #0]
10001ab4:	3a04      	subs	r2, #4
10001ab6:	00d2      	lsls	r2, r2, #3
10001ab8:	3207      	adds	r2, #7
10001aba:	2001      	movs	r0, #1
10001abc:	4090      	lsls	r0, r2
10001abe:	1c02      	adds	r2, r0, #0
10001ac0:	430a      	orrs	r2, r1
10001ac2:	615a      	str	r2, [r3, #20]
					PORT0->IOCR4 &= ~(0x0000000F << (((bitnr-4) * 8)+3));
10001ac4:	4ba1      	ldr	r3, [pc, #644]	; (10001d4c <bit_init_mode+0x3cc>)
10001ac6:	4aa1      	ldr	r2, [pc, #644]	; (10001d4c <bit_init_mode+0x3cc>)
10001ac8:	6952      	ldr	r2, [r2, #20]
10001aca:	1db9      	adds	r1, r7, #6
10001acc:	7809      	ldrb	r1, [r1, #0]
10001ace:	3904      	subs	r1, #4
10001ad0:	00c9      	lsls	r1, r1, #3
10001ad2:	3103      	adds	r1, #3
10001ad4:	200f      	movs	r0, #15
10001ad6:	4088      	lsls	r0, r1
10001ad8:	1c01      	adds	r1, r0, #0
10001ada:	43c9      	mvns	r1, r1
10001adc:	400a      	ands	r2, r1
10001ade:	615a      	str	r2, [r3, #20]
10001ae0:	e04a      	b.n	10001b78 <bit_init_mode+0x1f8>
				}
				else {
					PORT0->IOCR4 &= ~(1UL << (((bitnr-4) * 8)+7) );
10001ae2:	4b9a      	ldr	r3, [pc, #616]	; (10001d4c <bit_init_mode+0x3cc>)
10001ae4:	4a99      	ldr	r2, [pc, #612]	; (10001d4c <bit_init_mode+0x3cc>)
10001ae6:	6952      	ldr	r2, [r2, #20]
10001ae8:	1db9      	adds	r1, r7, #6
10001aea:	7809      	ldrb	r1, [r1, #0]
10001aec:	3904      	subs	r1, #4
10001aee:	00c9      	lsls	r1, r1, #3
10001af0:	3107      	adds	r1, #7
10001af2:	2001      	movs	r0, #1
10001af4:	4088      	lsls	r0, r1
10001af6:	1c01      	adds	r1, r0, #0
10001af8:	43c9      	mvns	r1, r1
10001afa:	400a      	ands	r2, r1
10001afc:	615a      	str	r2, [r3, #20]
					if (mode == PULLUP) {
10001afe:	1d3b      	adds	r3, r7, #4
10001b00:	781b      	ldrb	r3, [r3, #0]
10001b02:	2b01      	cmp	r3, #1
10001b04:	d11b      	bne.n	10001b3e <bit_init_mode+0x1be>
						PORT0->IOCR4 &= ~(0x0000001F << (((bitnr-4) * 8)+3) );
10001b06:	4b91      	ldr	r3, [pc, #580]	; (10001d4c <bit_init_mode+0x3cc>)
10001b08:	4a90      	ldr	r2, [pc, #576]	; (10001d4c <bit_init_mode+0x3cc>)
10001b0a:	6952      	ldr	r2, [r2, #20]
10001b0c:	1db9      	adds	r1, r7, #6
10001b0e:	7809      	ldrb	r1, [r1, #0]
10001b10:	3904      	subs	r1, #4
10001b12:	00c9      	lsls	r1, r1, #3
10001b14:	3103      	adds	r1, #3
10001b16:	201f      	movs	r0, #31
10001b18:	4088      	lsls	r0, r1
10001b1a:	1c01      	adds	r1, r0, #0
10001b1c:	43c9      	mvns	r1, r1
10001b1e:	400a      	ands	r2, r1
10001b20:	615a      	str	r2, [r3, #20]
						PORT0->IOCR4 |= (1UL << (((bitnr-4) * 8)+4) );
10001b22:	4b8a      	ldr	r3, [pc, #552]	; (10001d4c <bit_init_mode+0x3cc>)
10001b24:	4a89      	ldr	r2, [pc, #548]	; (10001d4c <bit_init_mode+0x3cc>)
10001b26:	6951      	ldr	r1, [r2, #20]
10001b28:	1dba      	adds	r2, r7, #6
10001b2a:	7812      	ldrb	r2, [r2, #0]
10001b2c:	3a04      	subs	r2, #4
10001b2e:	00d2      	lsls	r2, r2, #3
10001b30:	3204      	adds	r2, #4
10001b32:	2001      	movs	r0, #1
10001b34:	4090      	lsls	r0, r2
10001b36:	1c02      	adds	r2, r0, #0
10001b38:	430a      	orrs	r2, r1
10001b3a:	615a      	str	r2, [r3, #20]
10001b3c:	e01c      	b.n	10001b78 <bit_init_mode+0x1f8>
					}else if (mode == PULLDOWN) {
10001b3e:	1d3b      	adds	r3, r7, #4
10001b40:	781b      	ldrb	r3, [r3, #0]
10001b42:	2b02      	cmp	r3, #2
10001b44:	d118      	bne.n	10001b78 <bit_init_mode+0x1f8>
						PORT0->IOCR4 &= ~(0x0000001F << ((bitnr * 8)+3) );
10001b46:	4b81      	ldr	r3, [pc, #516]	; (10001d4c <bit_init_mode+0x3cc>)
10001b48:	4a80      	ldr	r2, [pc, #512]	; (10001d4c <bit_init_mode+0x3cc>)
10001b4a:	6952      	ldr	r2, [r2, #20]
10001b4c:	1db9      	adds	r1, r7, #6
10001b4e:	7809      	ldrb	r1, [r1, #0]
10001b50:	00c9      	lsls	r1, r1, #3
10001b52:	3103      	adds	r1, #3
10001b54:	201f      	movs	r0, #31
10001b56:	4088      	lsls	r0, r1
10001b58:	1c01      	adds	r1, r0, #0
10001b5a:	43c9      	mvns	r1, r1
10001b5c:	400a      	ands	r2, r1
10001b5e:	615a      	str	r2, [r3, #20]
						PORT0->IOCR4 |= (1UL << ((bitnr * 8)+3) );
10001b60:	4b7a      	ldr	r3, [pc, #488]	; (10001d4c <bit_init_mode+0x3cc>)
10001b62:	4a7a      	ldr	r2, [pc, #488]	; (10001d4c <bit_init_mode+0x3cc>)
10001b64:	6951      	ldr	r1, [r2, #20]
10001b66:	1dba      	adds	r2, r7, #6
10001b68:	7812      	ldrb	r2, [r2, #0]
10001b6a:	00d2      	lsls	r2, r2, #3
10001b6c:	3203      	adds	r2, #3
10001b6e:	2001      	movs	r0, #1
10001b70:	4090      	lsls	r0, r2
10001b72:	1c02      	adds	r2, r0, #0
10001b74:	430a      	orrs	r2, r1
10001b76:	615a      	str	r2, [r3, #20]
					}
				}
			}
			if ( (bitnr <12) && (bitnr > 7)) {
10001b78:	1dbb      	adds	r3, r7, #6
10001b7a:	781b      	ldrb	r3, [r3, #0]
10001b7c:	2b0b      	cmp	r3, #11
10001b7e:	d86e      	bhi.n	10001c5e <bit_init_mode+0x2de>
10001b80:	1dbb      	adds	r3, r7, #6
10001b82:	781b      	ldrb	r3, [r3, #0]
10001b84:	2b07      	cmp	r3, #7
10001b86:	d96a      	bls.n	10001c5e <bit_init_mode+0x2de>
				if (direction == 1) {
10001b88:	1d7b      	adds	r3, r7, #5
10001b8a:	781b      	ldrb	r3, [r3, #0]
10001b8c:	2b01      	cmp	r3, #1
10001b8e:	d11b      	bne.n	10001bc8 <bit_init_mode+0x248>
					PORT0->IOCR8 |= 1UL << (((bitnr-8) * 8)+7);
10001b90:	4b6e      	ldr	r3, [pc, #440]	; (10001d4c <bit_init_mode+0x3cc>)
10001b92:	4a6e      	ldr	r2, [pc, #440]	; (10001d4c <bit_init_mode+0x3cc>)
10001b94:	6991      	ldr	r1, [r2, #24]
10001b96:	1dba      	adds	r2, r7, #6
10001b98:	7812      	ldrb	r2, [r2, #0]
10001b9a:	3a08      	subs	r2, #8
10001b9c:	00d2      	lsls	r2, r2, #3
10001b9e:	3207      	adds	r2, #7
10001ba0:	2001      	movs	r0, #1
10001ba2:	4090      	lsls	r0, r2
10001ba4:	1c02      	adds	r2, r0, #0
10001ba6:	430a      	orrs	r2, r1
10001ba8:	619a      	str	r2, [r3, #24]
					PORT0->IOCR8 &= ~(0x0000000F << (((bitnr-8) * 8)+3));
10001baa:	4b68      	ldr	r3, [pc, #416]	; (10001d4c <bit_init_mode+0x3cc>)
10001bac:	4a67      	ldr	r2, [pc, #412]	; (10001d4c <bit_init_mode+0x3cc>)
10001bae:	6992      	ldr	r2, [r2, #24]
10001bb0:	1db9      	adds	r1, r7, #6
10001bb2:	7809      	ldrb	r1, [r1, #0]
10001bb4:	3908      	subs	r1, #8
10001bb6:	00c9      	lsls	r1, r1, #3
10001bb8:	3103      	adds	r1, #3
10001bba:	200f      	movs	r0, #15
10001bbc:	4088      	lsls	r0, r1
10001bbe:	1c01      	adds	r1, r0, #0
10001bc0:	43c9      	mvns	r1, r1
10001bc2:	400a      	ands	r2, r1
10001bc4:	619a      	str	r2, [r3, #24]
10001bc6:	e04a      	b.n	10001c5e <bit_init_mode+0x2de>
				}
				else {
					PORT0->IOCR8 &= ~(1UL << (((bitnr-8) * 8)+7) );
10001bc8:	4b60      	ldr	r3, [pc, #384]	; (10001d4c <bit_init_mode+0x3cc>)
10001bca:	4a60      	ldr	r2, [pc, #384]	; (10001d4c <bit_init_mode+0x3cc>)
10001bcc:	6992      	ldr	r2, [r2, #24]
10001bce:	1db9      	adds	r1, r7, #6
10001bd0:	7809      	ldrb	r1, [r1, #0]
10001bd2:	3908      	subs	r1, #8
10001bd4:	00c9      	lsls	r1, r1, #3
10001bd6:	3107      	adds	r1, #7
10001bd8:	2001      	movs	r0, #1
10001bda:	4088      	lsls	r0, r1
10001bdc:	1c01      	adds	r1, r0, #0
10001bde:	43c9      	mvns	r1, r1
10001be0:	400a      	ands	r2, r1
10001be2:	619a      	str	r2, [r3, #24]
					if (mode == PULLUP) {
10001be4:	1d3b      	adds	r3, r7, #4
10001be6:	781b      	ldrb	r3, [r3, #0]
10001be8:	2b01      	cmp	r3, #1
10001bea:	d11b      	bne.n	10001c24 <bit_init_mode+0x2a4>
						PORT0->IOCR8 &= ~(0x0000001F << (((bitnr-8) * 8)+3) );
10001bec:	4b57      	ldr	r3, [pc, #348]	; (10001d4c <bit_init_mode+0x3cc>)
10001bee:	4a57      	ldr	r2, [pc, #348]	; (10001d4c <bit_init_mode+0x3cc>)
10001bf0:	6992      	ldr	r2, [r2, #24]
10001bf2:	1db9      	adds	r1, r7, #6
10001bf4:	7809      	ldrb	r1, [r1, #0]
10001bf6:	3908      	subs	r1, #8
10001bf8:	00c9      	lsls	r1, r1, #3
10001bfa:	3103      	adds	r1, #3
10001bfc:	201f      	movs	r0, #31
10001bfe:	4088      	lsls	r0, r1
10001c00:	1c01      	adds	r1, r0, #0
10001c02:	43c9      	mvns	r1, r1
10001c04:	400a      	ands	r2, r1
10001c06:	619a      	str	r2, [r3, #24]
						PORT0->IOCR8 |= (1UL << (((bitnr-8) * 8)+4) );
10001c08:	4b50      	ldr	r3, [pc, #320]	; (10001d4c <bit_init_mode+0x3cc>)
10001c0a:	4a50      	ldr	r2, [pc, #320]	; (10001d4c <bit_init_mode+0x3cc>)
10001c0c:	6991      	ldr	r1, [r2, #24]
10001c0e:	1dba      	adds	r2, r7, #6
10001c10:	7812      	ldrb	r2, [r2, #0]
10001c12:	3a08      	subs	r2, #8
10001c14:	00d2      	lsls	r2, r2, #3
10001c16:	3204      	adds	r2, #4
10001c18:	2001      	movs	r0, #1
10001c1a:	4090      	lsls	r0, r2
10001c1c:	1c02      	adds	r2, r0, #0
10001c1e:	430a      	orrs	r2, r1
10001c20:	619a      	str	r2, [r3, #24]
10001c22:	e01c      	b.n	10001c5e <bit_init_mode+0x2de>
					} else if (mode == PULLDOWN) {
10001c24:	1d3b      	adds	r3, r7, #4
10001c26:	781b      	ldrb	r3, [r3, #0]
10001c28:	2b02      	cmp	r3, #2
10001c2a:	d118      	bne.n	10001c5e <bit_init_mode+0x2de>
						PORT0->IOCR8 &= ~(0x0000001F << ((bitnr * 8)+3) );
10001c2c:	4b47      	ldr	r3, [pc, #284]	; (10001d4c <bit_init_mode+0x3cc>)
10001c2e:	4a47      	ldr	r2, [pc, #284]	; (10001d4c <bit_init_mode+0x3cc>)
10001c30:	6992      	ldr	r2, [r2, #24]
10001c32:	1db9      	adds	r1, r7, #6
10001c34:	7809      	ldrb	r1, [r1, #0]
10001c36:	00c9      	lsls	r1, r1, #3
10001c38:	3103      	adds	r1, #3
10001c3a:	201f      	movs	r0, #31
10001c3c:	4088      	lsls	r0, r1
10001c3e:	1c01      	adds	r1, r0, #0
10001c40:	43c9      	mvns	r1, r1
10001c42:	400a      	ands	r2, r1
10001c44:	619a      	str	r2, [r3, #24]
						PORT0->IOCR8 |= (1UL << ((bitnr * 8)+3) );
10001c46:	4b41      	ldr	r3, [pc, #260]	; (10001d4c <bit_init_mode+0x3cc>)
10001c48:	4a40      	ldr	r2, [pc, #256]	; (10001d4c <bit_init_mode+0x3cc>)
10001c4a:	6991      	ldr	r1, [r2, #24]
10001c4c:	1dba      	adds	r2, r7, #6
10001c4e:	7812      	ldrb	r2, [r2, #0]
10001c50:	00d2      	lsls	r2, r2, #3
10001c52:	3203      	adds	r2, #3
10001c54:	2001      	movs	r0, #1
10001c56:	4090      	lsls	r0, r2
10001c58:	1c02      	adds	r2, r0, #0
10001c5a:	430a      	orrs	r2, r1
10001c5c:	619a      	str	r2, [r3, #24]
					}
				}
			}
			if ( (bitnr <16) && (bitnr > 11)) {
10001c5e:	1dbb      	adds	r3, r7, #6
10001c60:	781b      	ldrb	r3, [r3, #0]
10001c62:	2b0f      	cmp	r3, #15
10001c64:	d870      	bhi.n	10001d48 <bit_init_mode+0x3c8>
10001c66:	1dbb      	adds	r3, r7, #6
10001c68:	781b      	ldrb	r3, [r3, #0]
10001c6a:	2b0b      	cmp	r3, #11
10001c6c:	d96c      	bls.n	10001d48 <bit_init_mode+0x3c8>
				if (direction == OUTP){
10001c6e:	1d7b      	adds	r3, r7, #5
10001c70:	781b      	ldrb	r3, [r3, #0]
10001c72:	2b01      	cmp	r3, #1
10001c74:	d11b      	bne.n	10001cae <bit_init_mode+0x32e>
					PORT0->IOCR12 |= 1UL << (((bitnr-12) * 8)+7);
10001c76:	4b35      	ldr	r3, [pc, #212]	; (10001d4c <bit_init_mode+0x3cc>)
10001c78:	4a34      	ldr	r2, [pc, #208]	; (10001d4c <bit_init_mode+0x3cc>)
10001c7a:	69d1      	ldr	r1, [r2, #28]
10001c7c:	1dba      	adds	r2, r7, #6
10001c7e:	7812      	ldrb	r2, [r2, #0]
10001c80:	3a0c      	subs	r2, #12
10001c82:	00d2      	lsls	r2, r2, #3
10001c84:	3207      	adds	r2, #7
10001c86:	2001      	movs	r0, #1
10001c88:	4090      	lsls	r0, r2
10001c8a:	1c02      	adds	r2, r0, #0
10001c8c:	430a      	orrs	r2, r1
10001c8e:	61da      	str	r2, [r3, #28]
					PORT0->IOCR12 &= ~(0x0000000F << (((bitnr-12) * 8)+3));
10001c90:	4b2e      	ldr	r3, [pc, #184]	; (10001d4c <bit_init_mode+0x3cc>)
10001c92:	4a2e      	ldr	r2, [pc, #184]	; (10001d4c <bit_init_mode+0x3cc>)
10001c94:	69d2      	ldr	r2, [r2, #28]
10001c96:	1db9      	adds	r1, r7, #6
10001c98:	7809      	ldrb	r1, [r1, #0]
10001c9a:	390c      	subs	r1, #12
10001c9c:	00c9      	lsls	r1, r1, #3
10001c9e:	3103      	adds	r1, #3
10001ca0:	200f      	movs	r0, #15
10001ca2:	4088      	lsls	r0, r1
10001ca4:	1c01      	adds	r1, r0, #0
10001ca6:	43c9      	mvns	r1, r1
10001ca8:	400a      	ands	r2, r1
10001caa:	61da      	str	r2, [r3, #28]
10001cac:	e04c      	b.n	10001d48 <bit_init_mode+0x3c8>
				}
				else {
					PORT0->IOCR12 &= ~(1UL << (((bitnr-12) * 8)+7) );
10001cae:	4b27      	ldr	r3, [pc, #156]	; (10001d4c <bit_init_mode+0x3cc>)
10001cb0:	4a26      	ldr	r2, [pc, #152]	; (10001d4c <bit_init_mode+0x3cc>)
10001cb2:	69d2      	ldr	r2, [r2, #28]
10001cb4:	1db9      	adds	r1, r7, #6
10001cb6:	7809      	ldrb	r1, [r1, #0]
10001cb8:	390c      	subs	r1, #12
10001cba:	00c9      	lsls	r1, r1, #3
10001cbc:	3107      	adds	r1, #7
10001cbe:	2001      	movs	r0, #1
10001cc0:	4088      	lsls	r0, r1
10001cc2:	1c01      	adds	r1, r0, #0
10001cc4:	43c9      	mvns	r1, r1
10001cc6:	400a      	ands	r2, r1
10001cc8:	61da      	str	r2, [r3, #28]
					if (mode == PULLUP) {
10001cca:	1d3b      	adds	r3, r7, #4
10001ccc:	781b      	ldrb	r3, [r3, #0]
10001cce:	2b01      	cmp	r3, #1
10001cd0:	d11b      	bne.n	10001d0a <bit_init_mode+0x38a>
						PORT0->IOCR12 &= ~(0x0000001F << (((bitnr-12) * 8)+3) );
10001cd2:	4b1e      	ldr	r3, [pc, #120]	; (10001d4c <bit_init_mode+0x3cc>)
10001cd4:	4a1d      	ldr	r2, [pc, #116]	; (10001d4c <bit_init_mode+0x3cc>)
10001cd6:	69d2      	ldr	r2, [r2, #28]
10001cd8:	1db9      	adds	r1, r7, #6
10001cda:	7809      	ldrb	r1, [r1, #0]
10001cdc:	390c      	subs	r1, #12
10001cde:	00c9      	lsls	r1, r1, #3
10001ce0:	3103      	adds	r1, #3
10001ce2:	201f      	movs	r0, #31
10001ce4:	4088      	lsls	r0, r1
10001ce6:	1c01      	adds	r1, r0, #0
10001ce8:	43c9      	mvns	r1, r1
10001cea:	400a      	ands	r2, r1
10001cec:	61da      	str	r2, [r3, #28]
						PORT0->IOCR12 |= (1UL << (((bitnr-12) * 8)+4) );
10001cee:	4b17      	ldr	r3, [pc, #92]	; (10001d4c <bit_init_mode+0x3cc>)
10001cf0:	4a16      	ldr	r2, [pc, #88]	; (10001d4c <bit_init_mode+0x3cc>)
10001cf2:	69d1      	ldr	r1, [r2, #28]
10001cf4:	1dba      	adds	r2, r7, #6
10001cf6:	7812      	ldrb	r2, [r2, #0]
10001cf8:	3a0c      	subs	r2, #12
10001cfa:	00d2      	lsls	r2, r2, #3
10001cfc:	3204      	adds	r2, #4
10001cfe:	2001      	movs	r0, #1
10001d00:	4090      	lsls	r0, r2
10001d02:	1c02      	adds	r2, r0, #0
10001d04:	430a      	orrs	r2, r1
10001d06:	61da      	str	r2, [r3, #28]
10001d08:	e01e      	b.n	10001d48 <bit_init_mode+0x3c8>
					}else if (mode == PULLDOWN) {
10001d0a:	1d3b      	adds	r3, r7, #4
10001d0c:	781b      	ldrb	r3, [r3, #0]
10001d0e:	2b02      	cmp	r3, #2
10001d10:	d11a      	bne.n	10001d48 <bit_init_mode+0x3c8>
						PORT0->IOCR12 &= ~(0x0000001F << ((bitnr * 8)+3) );
10001d12:	4b0e      	ldr	r3, [pc, #56]	; (10001d4c <bit_init_mode+0x3cc>)
10001d14:	4a0d      	ldr	r2, [pc, #52]	; (10001d4c <bit_init_mode+0x3cc>)
10001d16:	69d2      	ldr	r2, [r2, #28]
10001d18:	1db9      	adds	r1, r7, #6
10001d1a:	7809      	ldrb	r1, [r1, #0]
10001d1c:	00c9      	lsls	r1, r1, #3
10001d1e:	3103      	adds	r1, #3
10001d20:	201f      	movs	r0, #31
10001d22:	4088      	lsls	r0, r1
10001d24:	1c01      	adds	r1, r0, #0
10001d26:	43c9      	mvns	r1, r1
10001d28:	400a      	ands	r2, r1
10001d2a:	61da      	str	r2, [r3, #28]
						PORT0->IOCR12 |= (1UL << ((bitnr * 8)+3) );
10001d2c:	4b07      	ldr	r3, [pc, #28]	; (10001d4c <bit_init_mode+0x3cc>)
10001d2e:	4a07      	ldr	r2, [pc, #28]	; (10001d4c <bit_init_mode+0x3cc>)
10001d30:	69d1      	ldr	r1, [r2, #28]
10001d32:	1dba      	adds	r2, r7, #6
10001d34:	7812      	ldrb	r2, [r2, #0]
10001d36:	00d2      	lsls	r2, r2, #3
10001d38:	3203      	adds	r2, #3
10001d3a:	2001      	movs	r0, #1
10001d3c:	4090      	lsls	r0, r2
10001d3e:	1c02      	adds	r2, r0, #0
10001d40:	430a      	orrs	r2, r1
10001d42:	61da      	str	r2, [r3, #28]
					}
				}
			}
		}
		break;
10001d44:	f000 fbd3 	bl	100024ee <bit_init_mode+0xb6e>
10001d48:	f000 fbd1 	bl	100024ee <bit_init_mode+0xb6e>
10001d4c:	40040000 	.word	0x40040000
		case 1 :
		{
			if (bitnr < 4 ) {
10001d50:	1dbb      	adds	r3, r7, #6
10001d52:	781b      	ldrb	r3, [r3, #0]
10001d54:	2b03      	cmp	r3, #3
10001d56:	d865      	bhi.n	10001e24 <bit_init_mode+0x4a4>
				if (direction == 1) {
10001d58:	1d7b      	adds	r3, r7, #5
10001d5a:	781b      	ldrb	r3, [r3, #0]
10001d5c:	2b01      	cmp	r3, #1
10001d5e:	d119      	bne.n	10001d94 <bit_init_mode+0x414>
					PORT1->IOCR0 |=1UL << ((bitnr * 8)+7);
10001d60:	4bd8      	ldr	r3, [pc, #864]	; (100020c4 <bit_init_mode+0x744>)
10001d62:	4ad8      	ldr	r2, [pc, #864]	; (100020c4 <bit_init_mode+0x744>)
10001d64:	6911      	ldr	r1, [r2, #16]
10001d66:	1dba      	adds	r2, r7, #6
10001d68:	7812      	ldrb	r2, [r2, #0]
10001d6a:	00d2      	lsls	r2, r2, #3
10001d6c:	3207      	adds	r2, #7
10001d6e:	2001      	movs	r0, #1
10001d70:	4090      	lsls	r0, r2
10001d72:	1c02      	adds	r2, r0, #0
10001d74:	430a      	orrs	r2, r1
10001d76:	611a      	str	r2, [r3, #16]
					PORT1->IOCR0 &= ~(0x0000000F << ((bitnr * 8)+3));
10001d78:	4bd2      	ldr	r3, [pc, #840]	; (100020c4 <bit_init_mode+0x744>)
10001d7a:	4ad2      	ldr	r2, [pc, #840]	; (100020c4 <bit_init_mode+0x744>)
10001d7c:	6912      	ldr	r2, [r2, #16]
10001d7e:	1db9      	adds	r1, r7, #6
10001d80:	7809      	ldrb	r1, [r1, #0]
10001d82:	00c9      	lsls	r1, r1, #3
10001d84:	3103      	adds	r1, #3
10001d86:	200f      	movs	r0, #15
10001d88:	4088      	lsls	r0, r1
10001d8a:	1c01      	adds	r1, r0, #0
10001d8c:	43c9      	mvns	r1, r1
10001d8e:	400a      	ands	r2, r1
10001d90:	611a      	str	r2, [r3, #16]
10001d92:	e047      	b.n	10001e24 <bit_init_mode+0x4a4>
				}
				else {
					PORT1->IOCR0 &= ~(1UL << ((bitnr * 8 ) + 7 ));
10001d94:	4bcb      	ldr	r3, [pc, #812]	; (100020c4 <bit_init_mode+0x744>)
10001d96:	4acb      	ldr	r2, [pc, #812]	; (100020c4 <bit_init_mode+0x744>)
10001d98:	6912      	ldr	r2, [r2, #16]
10001d9a:	1db9      	adds	r1, r7, #6
10001d9c:	7809      	ldrb	r1, [r1, #0]
10001d9e:	00c9      	lsls	r1, r1, #3
10001da0:	3107      	adds	r1, #7
10001da2:	2001      	movs	r0, #1
10001da4:	4088      	lsls	r0, r1
10001da6:	1c01      	adds	r1, r0, #0
10001da8:	43c9      	mvns	r1, r1
10001daa:	400a      	ands	r2, r1
10001dac:	611a      	str	r2, [r3, #16]
					if (mode == PULLUP) {
10001dae:	1d3b      	adds	r3, r7, #4
10001db0:	781b      	ldrb	r3, [r3, #0]
10001db2:	2b01      	cmp	r3, #1
10001db4:	d119      	bne.n	10001dea <bit_init_mode+0x46a>
						PORT1->IOCR0 &= ~(0x0000001F << ((bitnr * 8)+3) );
10001db6:	4bc3      	ldr	r3, [pc, #780]	; (100020c4 <bit_init_mode+0x744>)
10001db8:	4ac2      	ldr	r2, [pc, #776]	; (100020c4 <bit_init_mode+0x744>)
10001dba:	6912      	ldr	r2, [r2, #16]
10001dbc:	1db9      	adds	r1, r7, #6
10001dbe:	7809      	ldrb	r1, [r1, #0]
10001dc0:	00c9      	lsls	r1, r1, #3
10001dc2:	3103      	adds	r1, #3
10001dc4:	201f      	movs	r0, #31
10001dc6:	4088      	lsls	r0, r1
10001dc8:	1c01      	adds	r1, r0, #0
10001dca:	43c9      	mvns	r1, r1
10001dcc:	400a      	ands	r2, r1
10001dce:	611a      	str	r2, [r3, #16]
						PORT1->IOCR0 |= (1UL << ((bitnr * 8)+4) );
10001dd0:	4bbc      	ldr	r3, [pc, #752]	; (100020c4 <bit_init_mode+0x744>)
10001dd2:	4abc      	ldr	r2, [pc, #752]	; (100020c4 <bit_init_mode+0x744>)
10001dd4:	6911      	ldr	r1, [r2, #16]
10001dd6:	1dba      	adds	r2, r7, #6
10001dd8:	7812      	ldrb	r2, [r2, #0]
10001dda:	00d2      	lsls	r2, r2, #3
10001ddc:	3204      	adds	r2, #4
10001dde:	2001      	movs	r0, #1
10001de0:	4090      	lsls	r0, r2
10001de2:	1c02      	adds	r2, r0, #0
10001de4:	430a      	orrs	r2, r1
10001de6:	611a      	str	r2, [r3, #16]
10001de8:	e01c      	b.n	10001e24 <bit_init_mode+0x4a4>
					} else if (mode == PULLDOWN) {
10001dea:	1d3b      	adds	r3, r7, #4
10001dec:	781b      	ldrb	r3, [r3, #0]
10001dee:	2b02      	cmp	r3, #2
10001df0:	d118      	bne.n	10001e24 <bit_init_mode+0x4a4>
						PORT1->IOCR0 &= ~(0x0000001F << ((bitnr * 8)+3) );
10001df2:	4bb4      	ldr	r3, [pc, #720]	; (100020c4 <bit_init_mode+0x744>)
10001df4:	4ab3      	ldr	r2, [pc, #716]	; (100020c4 <bit_init_mode+0x744>)
10001df6:	6912      	ldr	r2, [r2, #16]
10001df8:	1db9      	adds	r1, r7, #6
10001dfa:	7809      	ldrb	r1, [r1, #0]
10001dfc:	00c9      	lsls	r1, r1, #3
10001dfe:	3103      	adds	r1, #3
10001e00:	201f      	movs	r0, #31
10001e02:	4088      	lsls	r0, r1
10001e04:	1c01      	adds	r1, r0, #0
10001e06:	43c9      	mvns	r1, r1
10001e08:	400a      	ands	r2, r1
10001e0a:	611a      	str	r2, [r3, #16]
						PORT1->IOCR0 |= (1UL << ((bitnr * 8)+3) );
10001e0c:	4bad      	ldr	r3, [pc, #692]	; (100020c4 <bit_init_mode+0x744>)
10001e0e:	4aad      	ldr	r2, [pc, #692]	; (100020c4 <bit_init_mode+0x744>)
10001e10:	6911      	ldr	r1, [r2, #16]
10001e12:	1dba      	adds	r2, r7, #6
10001e14:	7812      	ldrb	r2, [r2, #0]
10001e16:	00d2      	lsls	r2, r2, #3
10001e18:	3203      	adds	r2, #3
10001e1a:	2001      	movs	r0, #1
10001e1c:	4090      	lsls	r0, r2
10001e1e:	1c02      	adds	r2, r0, #0
10001e20:	430a      	orrs	r2, r1
10001e22:	611a      	str	r2, [r3, #16]
					}
				}
			}
			if ( (bitnr <8) && (bitnr > 3)) {
10001e24:	1dbb      	adds	r3, r7, #6
10001e26:	781b      	ldrb	r3, [r3, #0]
10001e28:	2b07      	cmp	r3, #7
10001e2a:	d86f      	bhi.n	10001f0c <bit_init_mode+0x58c>
10001e2c:	1dbb      	adds	r3, r7, #6
10001e2e:	781b      	ldrb	r3, [r3, #0]
10001e30:	2b03      	cmp	r3, #3
10001e32:	d96b      	bls.n	10001f0c <bit_init_mode+0x58c>
				if (direction == 1) {
10001e34:	1d7b      	adds	r3, r7, #5
10001e36:	781b      	ldrb	r3, [r3, #0]
10001e38:	2b01      	cmp	r3, #1
10001e3a:	d11b      	bne.n	10001e74 <bit_init_mode+0x4f4>
					PORT1->IOCR4 |= 1UL<< (((bitnr-4) * 8)+7);
10001e3c:	4ba1      	ldr	r3, [pc, #644]	; (100020c4 <bit_init_mode+0x744>)
10001e3e:	4aa1      	ldr	r2, [pc, #644]	; (100020c4 <bit_init_mode+0x744>)
10001e40:	6951      	ldr	r1, [r2, #20]
10001e42:	1dba      	adds	r2, r7, #6
10001e44:	7812      	ldrb	r2, [r2, #0]
10001e46:	3a04      	subs	r2, #4
10001e48:	00d2      	lsls	r2, r2, #3
10001e4a:	3207      	adds	r2, #7
10001e4c:	2001      	movs	r0, #1
10001e4e:	4090      	lsls	r0, r2
10001e50:	1c02      	adds	r2, r0, #0
10001e52:	430a      	orrs	r2, r1
10001e54:	615a      	str	r2, [r3, #20]
					PORT1->IOCR4 &= ~(0x0000000F << (((bitnr-4) * 8)+3));
10001e56:	4b9b      	ldr	r3, [pc, #620]	; (100020c4 <bit_init_mode+0x744>)
10001e58:	4a9a      	ldr	r2, [pc, #616]	; (100020c4 <bit_init_mode+0x744>)
10001e5a:	6952      	ldr	r2, [r2, #20]
10001e5c:	1db9      	adds	r1, r7, #6
10001e5e:	7809      	ldrb	r1, [r1, #0]
10001e60:	3904      	subs	r1, #4
10001e62:	00c9      	lsls	r1, r1, #3
10001e64:	3103      	adds	r1, #3
10001e66:	200f      	movs	r0, #15
10001e68:	4088      	lsls	r0, r1
10001e6a:	1c01      	adds	r1, r0, #0
10001e6c:	43c9      	mvns	r1, r1
10001e6e:	400a      	ands	r2, r1
10001e70:	615a      	str	r2, [r3, #20]
10001e72:	e04b      	b.n	10001f0c <bit_init_mode+0x58c>
				}
				else {
					PORT1->IOCR4 &= ~(1UL << (((bitnr-4) * 8)+7) );
10001e74:	4b93      	ldr	r3, [pc, #588]	; (100020c4 <bit_init_mode+0x744>)
10001e76:	4a93      	ldr	r2, [pc, #588]	; (100020c4 <bit_init_mode+0x744>)
10001e78:	6952      	ldr	r2, [r2, #20]
10001e7a:	1db9      	adds	r1, r7, #6
10001e7c:	7809      	ldrb	r1, [r1, #0]
10001e7e:	3904      	subs	r1, #4
10001e80:	00c9      	lsls	r1, r1, #3
10001e82:	3107      	adds	r1, #7
10001e84:	2001      	movs	r0, #1
10001e86:	4088      	lsls	r0, r1
10001e88:	1c01      	adds	r1, r0, #0
10001e8a:	43c9      	mvns	r1, r1
10001e8c:	400a      	ands	r2, r1
10001e8e:	615a      	str	r2, [r3, #20]
					if (mode == PULLUP) {
10001e90:	1d3b      	adds	r3, r7, #4
10001e92:	781b      	ldrb	r3, [r3, #0]
10001e94:	2b01      	cmp	r3, #1
10001e96:	d11b      	bne.n	10001ed0 <bit_init_mode+0x550>
						PORT1->IOCR4 &= ~(0x0000001F << (((bitnr-4) * 8)+3) );
10001e98:	4b8a      	ldr	r3, [pc, #552]	; (100020c4 <bit_init_mode+0x744>)
10001e9a:	4a8a      	ldr	r2, [pc, #552]	; (100020c4 <bit_init_mode+0x744>)
10001e9c:	6952      	ldr	r2, [r2, #20]
10001e9e:	1db9      	adds	r1, r7, #6
10001ea0:	7809      	ldrb	r1, [r1, #0]
10001ea2:	3904      	subs	r1, #4
10001ea4:	00c9      	lsls	r1, r1, #3
10001ea6:	3103      	adds	r1, #3
10001ea8:	201f      	movs	r0, #31
10001eaa:	4088      	lsls	r0, r1
10001eac:	1c01      	adds	r1, r0, #0
10001eae:	43c9      	mvns	r1, r1
10001eb0:	400a      	ands	r2, r1
10001eb2:	615a      	str	r2, [r3, #20]
						PORT1->IOCR4 |= (1UL << (((bitnr-4) * 8)+4) );
10001eb4:	4b83      	ldr	r3, [pc, #524]	; (100020c4 <bit_init_mode+0x744>)
10001eb6:	4a83      	ldr	r2, [pc, #524]	; (100020c4 <bit_init_mode+0x744>)
10001eb8:	6951      	ldr	r1, [r2, #20]
10001eba:	1dba      	adds	r2, r7, #6
10001ebc:	7812      	ldrb	r2, [r2, #0]
10001ebe:	3a04      	subs	r2, #4
10001ec0:	00d2      	lsls	r2, r2, #3
10001ec2:	3204      	adds	r2, #4
10001ec4:	2001      	movs	r0, #1
10001ec6:	4090      	lsls	r0, r2
10001ec8:	1c02      	adds	r2, r0, #0
10001eca:	430a      	orrs	r2, r1
10001ecc:	615a      	str	r2, [r3, #20]
10001ece:	e01d      	b.n	10001f0c <bit_init_mode+0x58c>
					}else if (mode == PULLDOWN) {
10001ed0:	1d3b      	adds	r3, r7, #4
10001ed2:	781b      	ldrb	r3, [r3, #0]
10001ed4:	2b02      	cmp	r3, #2
10001ed6:	d119      	bne.n	10001f0c <bit_init_mode+0x58c>
						PORT1->IOCR4 &= ~(0x0000001F << ((bitnr * 8)+3) );
10001ed8:	4b7a      	ldr	r3, [pc, #488]	; (100020c4 <bit_init_mode+0x744>)
10001eda:	4a7a      	ldr	r2, [pc, #488]	; (100020c4 <bit_init_mode+0x744>)
10001edc:	6952      	ldr	r2, [r2, #20]
10001ede:	1db9      	adds	r1, r7, #6
10001ee0:	7809      	ldrb	r1, [r1, #0]
10001ee2:	00c9      	lsls	r1, r1, #3
10001ee4:	3103      	adds	r1, #3
10001ee6:	201f      	movs	r0, #31
10001ee8:	4088      	lsls	r0, r1
10001eea:	1c01      	adds	r1, r0, #0
10001eec:	43c9      	mvns	r1, r1
10001eee:	400a      	ands	r2, r1
10001ef0:	615a      	str	r2, [r3, #20]
						PORT1->IOCR4 |= (1UL << ((bitnr * 8)+3) );
10001ef2:	4b74      	ldr	r3, [pc, #464]	; (100020c4 <bit_init_mode+0x744>)
10001ef4:	4a73      	ldr	r2, [pc, #460]	; (100020c4 <bit_init_mode+0x744>)
10001ef6:	6951      	ldr	r1, [r2, #20]
10001ef8:	1dba      	adds	r2, r7, #6
10001efa:	7812      	ldrb	r2, [r2, #0]
10001efc:	00d2      	lsls	r2, r2, #3
10001efe:	3203      	adds	r2, #3
10001f00:	2001      	movs	r0, #1
10001f02:	4090      	lsls	r0, r2
10001f04:	1c02      	adds	r2, r0, #0
10001f06:	430a      	orrs	r2, r1
10001f08:	615a      	str	r2, [r3, #20]
					}
				}
			}
		}
		break;
10001f0a:	e2f0      	b.n	100024ee <bit_init_mode+0xb6e>
10001f0c:	e2ef      	b.n	100024ee <bit_init_mode+0xb6e>

		case 2 :
			if (bitnr == 0) { //P2.0
10001f0e:	1dbb      	adds	r3, r7, #6
10001f10:	781b      	ldrb	r3, [r3, #0]
10001f12:	2b00      	cmp	r3, #0
10001f14:	d14c      	bne.n	10001fb0 <bit_init_mode+0x630>
			 if (direction == OUTP) {
10001f16:	1d7b      	adds	r3, r7, #5
10001f18:	781b      	ldrb	r3, [r3, #0]
10001f1a:	2b01      	cmp	r3, #1
10001f1c:	d112      	bne.n	10001f44 <bit_init_mode+0x5c4>
				 CLR_BIT(PORT2->PDISC,0); // digital Pad aktiv
10001f1e:	4b6a      	ldr	r3, [pc, #424]	; (100020c8 <bit_init_mode+0x748>)
10001f20:	4a69      	ldr	r2, [pc, #420]	; (100020c8 <bit_init_mode+0x748>)
10001f22:	6e12      	ldr	r2, [r2, #96]	; 0x60
10001f24:	2101      	movs	r1, #1
10001f26:	438a      	bics	r2, r1
10001f28:	661a      	str	r2, [r3, #96]	; 0x60
				 PORT2->IOCR0 &= 0xffffff00;
10001f2a:	4b67      	ldr	r3, [pc, #412]	; (100020c8 <bit_init_mode+0x748>)
10001f2c:	4a66      	ldr	r2, [pc, #408]	; (100020c8 <bit_init_mode+0x748>)
10001f2e:	6912      	ldr	r2, [r2, #16]
10001f30:	21ff      	movs	r1, #255	; 0xff
10001f32:	438a      	bics	r2, r1
10001f34:	611a      	str	r2, [r3, #16]
				 PORT2->IOCR0 |= 0x00000080;
10001f36:	4b64      	ldr	r3, [pc, #400]	; (100020c8 <bit_init_mode+0x748>)
10001f38:	4a63      	ldr	r2, [pc, #396]	; (100020c8 <bit_init_mode+0x748>)
10001f3a:	6912      	ldr	r2, [r2, #16]
10001f3c:	2180      	movs	r1, #128	; 0x80
10001f3e:	430a      	orrs	r2, r1
10001f40:	611a      	str	r2, [r3, #16]
10001f42:	e035      	b.n	10001fb0 <bit_init_mode+0x630>
			 } else if (direction == INP) {
10001f44:	1d7b      	adds	r3, r7, #5
10001f46:	781b      	ldrb	r3, [r3, #0]
10001f48:	2b00      	cmp	r3, #0
10001f4a:	d131      	bne.n	10001fb0 <bit_init_mode+0x630>
				 CLR_BIT(PORT2->PDISC,0); // digital Pad aktiv
10001f4c:	4b5e      	ldr	r3, [pc, #376]	; (100020c8 <bit_init_mode+0x748>)
10001f4e:	4a5e      	ldr	r2, [pc, #376]	; (100020c8 <bit_init_mode+0x748>)
10001f50:	6e12      	ldr	r2, [r2, #96]	; 0x60
10001f52:	2101      	movs	r1, #1
10001f54:	438a      	bics	r2, r1
10001f56:	661a      	str	r2, [r3, #96]	; 0x60
				 if (mode==PULLUP) {
10001f58:	1d3b      	adds	r3, r7, #4
10001f5a:	781b      	ldrb	r3, [r3, #0]
10001f5c:	2b01      	cmp	r3, #1
10001f5e:	d10c      	bne.n	10001f7a <bit_init_mode+0x5fa>
					 PORT2->IOCR0 &= 0xFFFFFF00;
10001f60:	4b59      	ldr	r3, [pc, #356]	; (100020c8 <bit_init_mode+0x748>)
10001f62:	4a59      	ldr	r2, [pc, #356]	; (100020c8 <bit_init_mode+0x748>)
10001f64:	6912      	ldr	r2, [r2, #16]
10001f66:	21ff      	movs	r1, #255	; 0xff
10001f68:	438a      	bics	r2, r1
10001f6a:	611a      	str	r2, [r3, #16]
					 PORT2->IOCR0 |= 0x00000010;
10001f6c:	4b56      	ldr	r3, [pc, #344]	; (100020c8 <bit_init_mode+0x748>)
10001f6e:	4a56      	ldr	r2, [pc, #344]	; (100020c8 <bit_init_mode+0x748>)
10001f70:	6912      	ldr	r2, [r2, #16]
10001f72:	2110      	movs	r1, #16
10001f74:	430a      	orrs	r2, r1
10001f76:	611a      	str	r2, [r3, #16]
10001f78:	e01a      	b.n	10001fb0 <bit_init_mode+0x630>
				 } else if (mode==PULLDOWN) {
10001f7a:	1d3b      	adds	r3, r7, #4
10001f7c:	781b      	ldrb	r3, [r3, #0]
10001f7e:	2b02      	cmp	r3, #2
10001f80:	d10c      	bne.n	10001f9c <bit_init_mode+0x61c>
					 PORT2->IOCR0 &= 0xFFFFFF00;
10001f82:	4b51      	ldr	r3, [pc, #324]	; (100020c8 <bit_init_mode+0x748>)
10001f84:	4a50      	ldr	r2, [pc, #320]	; (100020c8 <bit_init_mode+0x748>)
10001f86:	6912      	ldr	r2, [r2, #16]
10001f88:	21ff      	movs	r1, #255	; 0xff
10001f8a:	438a      	bics	r2, r1
10001f8c:	611a      	str	r2, [r3, #16]
					 PORT2->IOCR0 |= 0x00000008;
10001f8e:	4b4e      	ldr	r3, [pc, #312]	; (100020c8 <bit_init_mode+0x748>)
10001f90:	4a4d      	ldr	r2, [pc, #308]	; (100020c8 <bit_init_mode+0x748>)
10001f92:	6912      	ldr	r2, [r2, #16]
10001f94:	2108      	movs	r1, #8
10001f96:	430a      	orrs	r2, r1
10001f98:	611a      	str	r2, [r3, #16]
10001f9a:	e009      	b.n	10001fb0 <bit_init_mode+0x630>
				 } else if (mode == ANALOG) {
10001f9c:	1d3b      	adds	r3, r7, #4
10001f9e:	781b      	ldrb	r3, [r3, #0]
10001fa0:	2b03      	cmp	r3, #3
10001fa2:	d105      	bne.n	10001fb0 <bit_init_mode+0x630>
					SET_BIT(PORT2->PDISC,0); //Analog Modus aktiv
10001fa4:	4b48      	ldr	r3, [pc, #288]	; (100020c8 <bit_init_mode+0x748>)
10001fa6:	4a48      	ldr	r2, [pc, #288]	; (100020c8 <bit_init_mode+0x748>)
10001fa8:	6e12      	ldr	r2, [r2, #96]	; 0x60
10001faa:	2101      	movs	r1, #1
10001fac:	430a      	orrs	r2, r1
10001fae:	661a      	str	r2, [r3, #96]	; 0x60
				 }
			 }
		 }
		 if (bitnr == 1) { //P2.1
10001fb0:	1dbb      	adds	r3, r7, #6
10001fb2:	781b      	ldrb	r3, [r3, #0]
10001fb4:	2b01      	cmp	r3, #1
10001fb6:	d14f      	bne.n	10002058 <bit_init_mode+0x6d8>
			 if (direction == OUTP) {
10001fb8:	1d7b      	adds	r3, r7, #5
10001fba:	781b      	ldrb	r3, [r3, #0]
10001fbc:	2b01      	cmp	r3, #1
10001fbe:	d113      	bne.n	10001fe8 <bit_init_mode+0x668>
				 CLR_BIT(PORT2->PDISC,1); // digital Pad aktiv
10001fc0:	4b41      	ldr	r3, [pc, #260]	; (100020c8 <bit_init_mode+0x748>)
10001fc2:	4a41      	ldr	r2, [pc, #260]	; (100020c8 <bit_init_mode+0x748>)
10001fc4:	6e12      	ldr	r2, [r2, #96]	; 0x60
10001fc6:	2102      	movs	r1, #2
10001fc8:	438a      	bics	r2, r1
10001fca:	661a      	str	r2, [r3, #96]	; 0x60
				 PORT2->IOCR0 &= 0xffff00ff;
10001fcc:	4b3e      	ldr	r3, [pc, #248]	; (100020c8 <bit_init_mode+0x748>)
10001fce:	4a3e      	ldr	r2, [pc, #248]	; (100020c8 <bit_init_mode+0x748>)
10001fd0:	6912      	ldr	r2, [r2, #16]
10001fd2:	493e      	ldr	r1, [pc, #248]	; (100020cc <bit_init_mode+0x74c>)
10001fd4:	400a      	ands	r2, r1
10001fd6:	611a      	str	r2, [r3, #16]
				 PORT2->IOCR0 |= 0x00008000;
10001fd8:	4b3b      	ldr	r3, [pc, #236]	; (100020c8 <bit_init_mode+0x748>)
10001fda:	4a3b      	ldr	r2, [pc, #236]	; (100020c8 <bit_init_mode+0x748>)
10001fdc:	6912      	ldr	r2, [r2, #16]
10001fde:	2180      	movs	r1, #128	; 0x80
10001fe0:	0209      	lsls	r1, r1, #8
10001fe2:	430a      	orrs	r2, r1
10001fe4:	611a      	str	r2, [r3, #16]
10001fe6:	e037      	b.n	10002058 <bit_init_mode+0x6d8>
			 } else if (direction == INP) {
10001fe8:	1d7b      	adds	r3, r7, #5
10001fea:	781b      	ldrb	r3, [r3, #0]
10001fec:	2b00      	cmp	r3, #0
10001fee:	d133      	bne.n	10002058 <bit_init_mode+0x6d8>
				 CLR_BIT(PORT2->PDISC,1); // digital Pad aktiv
10001ff0:	4b35      	ldr	r3, [pc, #212]	; (100020c8 <bit_init_mode+0x748>)
10001ff2:	4a35      	ldr	r2, [pc, #212]	; (100020c8 <bit_init_mode+0x748>)
10001ff4:	6e12      	ldr	r2, [r2, #96]	; 0x60
10001ff6:	2102      	movs	r1, #2
10001ff8:	438a      	bics	r2, r1
10001ffa:	661a      	str	r2, [r3, #96]	; 0x60
				 if (mode==PULLUP) {
10001ffc:	1d3b      	adds	r3, r7, #4
10001ffe:	781b      	ldrb	r3, [r3, #0]
10002000:	2b01      	cmp	r3, #1
10002002:	d10d      	bne.n	10002020 <bit_init_mode+0x6a0>
					 PORT2->IOCR0 &= 0xFFFF00ff;
10002004:	4b30      	ldr	r3, [pc, #192]	; (100020c8 <bit_init_mode+0x748>)
10002006:	4a30      	ldr	r2, [pc, #192]	; (100020c8 <bit_init_mode+0x748>)
10002008:	6912      	ldr	r2, [r2, #16]
1000200a:	4930      	ldr	r1, [pc, #192]	; (100020cc <bit_init_mode+0x74c>)
1000200c:	400a      	ands	r2, r1
1000200e:	611a      	str	r2, [r3, #16]
					 PORT2->IOCR0 |= 0x00001000;
10002010:	4b2d      	ldr	r3, [pc, #180]	; (100020c8 <bit_init_mode+0x748>)
10002012:	4a2d      	ldr	r2, [pc, #180]	; (100020c8 <bit_init_mode+0x748>)
10002014:	6912      	ldr	r2, [r2, #16]
10002016:	2180      	movs	r1, #128	; 0x80
10002018:	0149      	lsls	r1, r1, #5
1000201a:	430a      	orrs	r2, r1
1000201c:	611a      	str	r2, [r3, #16]
1000201e:	e01b      	b.n	10002058 <bit_init_mode+0x6d8>
				 } else if (mode==PULLDOWN) {
10002020:	1d3b      	adds	r3, r7, #4
10002022:	781b      	ldrb	r3, [r3, #0]
10002024:	2b02      	cmp	r3, #2
10002026:	d10d      	bne.n	10002044 <bit_init_mode+0x6c4>
					 PORT2->IOCR0 &= 0xFFFF00ff;
10002028:	4b27      	ldr	r3, [pc, #156]	; (100020c8 <bit_init_mode+0x748>)
1000202a:	4a27      	ldr	r2, [pc, #156]	; (100020c8 <bit_init_mode+0x748>)
1000202c:	6912      	ldr	r2, [r2, #16]
1000202e:	4927      	ldr	r1, [pc, #156]	; (100020cc <bit_init_mode+0x74c>)
10002030:	400a      	ands	r2, r1
10002032:	611a      	str	r2, [r3, #16]
					 PORT2->IOCR0 |= 0x00000800;
10002034:	4b24      	ldr	r3, [pc, #144]	; (100020c8 <bit_init_mode+0x748>)
10002036:	4a24      	ldr	r2, [pc, #144]	; (100020c8 <bit_init_mode+0x748>)
10002038:	6912      	ldr	r2, [r2, #16]
1000203a:	2180      	movs	r1, #128	; 0x80
1000203c:	0109      	lsls	r1, r1, #4
1000203e:	430a      	orrs	r2, r1
10002040:	611a      	str	r2, [r3, #16]
10002042:	e009      	b.n	10002058 <bit_init_mode+0x6d8>
				 } else if (mode == ANALOG) {
10002044:	1d3b      	adds	r3, r7, #4
10002046:	781b      	ldrb	r3, [r3, #0]
10002048:	2b03      	cmp	r3, #3
1000204a:	d105      	bne.n	10002058 <bit_init_mode+0x6d8>
					SET_BIT(PORT2->PDISC,1); //Analog Modus aktiv
1000204c:	4b1e      	ldr	r3, [pc, #120]	; (100020c8 <bit_init_mode+0x748>)
1000204e:	4a1e      	ldr	r2, [pc, #120]	; (100020c8 <bit_init_mode+0x748>)
10002050:	6e12      	ldr	r2, [r2, #96]	; 0x60
10002052:	2102      	movs	r1, #2
10002054:	430a      	orrs	r2, r1
10002056:	661a      	str	r2, [r3, #96]	; 0x60
				 }
			 }
		 }
		 if (bitnr == 2) { //P2.2
10002058:	1dbb      	adds	r3, r7, #6
1000205a:	781b      	ldrb	r3, [r3, #0]
1000205c:	2b02      	cmp	r3, #2
1000205e:	d143      	bne.n	100020e8 <bit_init_mode+0x768>
			 if (direction == OUTP) {
10002060:	1d7b      	adds	r3, r7, #5
10002062:	781b      	ldrb	r3, [r3, #0]
10002064:	2b01      	cmp	r3, #1
10002066:	d03f      	beq.n	100020e8 <bit_init_mode+0x768>
				 // nicht moeglich
			 } else if (direction == INP) {
10002068:	1d7b      	adds	r3, r7, #5
1000206a:	781b      	ldrb	r3, [r3, #0]
1000206c:	2b00      	cmp	r3, #0
1000206e:	d13b      	bne.n	100020e8 <bit_init_mode+0x768>
				 CLR_BIT(PORT2->PDISC,2); // digital Pad aktiv
10002070:	4b15      	ldr	r3, [pc, #84]	; (100020c8 <bit_init_mode+0x748>)
10002072:	4a15      	ldr	r2, [pc, #84]	; (100020c8 <bit_init_mode+0x748>)
10002074:	6e12      	ldr	r2, [r2, #96]	; 0x60
10002076:	2104      	movs	r1, #4
10002078:	438a      	bics	r2, r1
1000207a:	661a      	str	r2, [r3, #96]	; 0x60
				 if (mode==PULLUP) {
1000207c:	1d3b      	adds	r3, r7, #4
1000207e:	781b      	ldrb	r3, [r3, #0]
10002080:	2b01      	cmp	r3, #1
10002082:	d10d      	bne.n	100020a0 <bit_init_mode+0x720>
					 PORT2->IOCR0 &= 0xFF00ffff;
10002084:	4b10      	ldr	r3, [pc, #64]	; (100020c8 <bit_init_mode+0x748>)
10002086:	4a10      	ldr	r2, [pc, #64]	; (100020c8 <bit_init_mode+0x748>)
10002088:	6912      	ldr	r2, [r2, #16]
1000208a:	4911      	ldr	r1, [pc, #68]	; (100020d0 <bit_init_mode+0x750>)
1000208c:	400a      	ands	r2, r1
1000208e:	611a      	str	r2, [r3, #16]
					 PORT2->IOCR0 |= 0x00100000;
10002090:	4b0d      	ldr	r3, [pc, #52]	; (100020c8 <bit_init_mode+0x748>)
10002092:	4a0d      	ldr	r2, [pc, #52]	; (100020c8 <bit_init_mode+0x748>)
10002094:	6912      	ldr	r2, [r2, #16]
10002096:	2180      	movs	r1, #128	; 0x80
10002098:	0349      	lsls	r1, r1, #13
1000209a:	430a      	orrs	r2, r1
1000209c:	611a      	str	r2, [r3, #16]
1000209e:	e023      	b.n	100020e8 <bit_init_mode+0x768>
				 } else if (mode==PULLDOWN) {
100020a0:	1d3b      	adds	r3, r7, #4
100020a2:	781b      	ldrb	r3, [r3, #0]
100020a4:	2b02      	cmp	r3, #2
100020a6:	d115      	bne.n	100020d4 <bit_init_mode+0x754>
					 PORT2->IOCR0 &= 0xFF00ffff;
100020a8:	4b07      	ldr	r3, [pc, #28]	; (100020c8 <bit_init_mode+0x748>)
100020aa:	4a07      	ldr	r2, [pc, #28]	; (100020c8 <bit_init_mode+0x748>)
100020ac:	6912      	ldr	r2, [r2, #16]
100020ae:	4908      	ldr	r1, [pc, #32]	; (100020d0 <bit_init_mode+0x750>)
100020b0:	400a      	ands	r2, r1
100020b2:	611a      	str	r2, [r3, #16]
					 PORT2->IOCR0 |= 0x00080000;
100020b4:	4b04      	ldr	r3, [pc, #16]	; (100020c8 <bit_init_mode+0x748>)
100020b6:	4a04      	ldr	r2, [pc, #16]	; (100020c8 <bit_init_mode+0x748>)
100020b8:	6912      	ldr	r2, [r2, #16]
100020ba:	2180      	movs	r1, #128	; 0x80
100020bc:	0309      	lsls	r1, r1, #12
100020be:	430a      	orrs	r2, r1
100020c0:	611a      	str	r2, [r3, #16]
100020c2:	e011      	b.n	100020e8 <bit_init_mode+0x768>
100020c4:	40040100 	.word	0x40040100
100020c8:	40040200 	.word	0x40040200
100020cc:	ffff00ff 	.word	0xffff00ff
100020d0:	ff00ffff 	.word	0xff00ffff
				 } else if (mode == ANALOG) {
100020d4:	1d3b      	adds	r3, r7, #4
100020d6:	781b      	ldrb	r3, [r3, #0]
100020d8:	2b03      	cmp	r3, #3
100020da:	d105      	bne.n	100020e8 <bit_init_mode+0x768>
					SET_BIT(PORT2->PDISC,2); //Analog Modus aktiv
100020dc:	4bcd      	ldr	r3, [pc, #820]	; (10002414 <bit_init_mode+0xa94>)
100020de:	4acd      	ldr	r2, [pc, #820]	; (10002414 <bit_init_mode+0xa94>)
100020e0:	6e12      	ldr	r2, [r2, #96]	; 0x60
100020e2:	2104      	movs	r1, #4
100020e4:	430a      	orrs	r2, r1
100020e6:	661a      	str	r2, [r3, #96]	; 0x60
				 }
			 }
		 }
		 if (bitnr == 3) { //P2.3
100020e8:	1dbb      	adds	r3, r7, #6
100020ea:	781b      	ldrb	r3, [r3, #0]
100020ec:	2b03      	cmp	r3, #3
100020ee:	d13b      	bne.n	10002168 <bit_init_mode+0x7e8>
			 if (direction == OUTP) {
100020f0:	1d7b      	adds	r3, r7, #5
100020f2:	781b      	ldrb	r3, [r3, #0]
100020f4:	2b01      	cmp	r3, #1
100020f6:	d037      	beq.n	10002168 <bit_init_mode+0x7e8>
				 // nicht moeglich
			 } else if (direction == INP) {
100020f8:	1d7b      	adds	r3, r7, #5
100020fa:	781b      	ldrb	r3, [r3, #0]
100020fc:	2b00      	cmp	r3, #0
100020fe:	d133      	bne.n	10002168 <bit_init_mode+0x7e8>
				 CLR_BIT(PORT2->PDISC,3); // digital Pad aktiv
10002100:	4bc4      	ldr	r3, [pc, #784]	; (10002414 <bit_init_mode+0xa94>)
10002102:	4ac4      	ldr	r2, [pc, #784]	; (10002414 <bit_init_mode+0xa94>)
10002104:	6e12      	ldr	r2, [r2, #96]	; 0x60
10002106:	2108      	movs	r1, #8
10002108:	438a      	bics	r2, r1
1000210a:	661a      	str	r2, [r3, #96]	; 0x60
				 if (mode==PULLUP) {
1000210c:	1d3b      	adds	r3, r7, #4
1000210e:	781b      	ldrb	r3, [r3, #0]
10002110:	2b01      	cmp	r3, #1
10002112:	d10d      	bne.n	10002130 <bit_init_mode+0x7b0>
					 PORT2->IOCR0 &= 0x00ffffff;
10002114:	4bbf      	ldr	r3, [pc, #764]	; (10002414 <bit_init_mode+0xa94>)
10002116:	4abf      	ldr	r2, [pc, #764]	; (10002414 <bit_init_mode+0xa94>)
10002118:	6912      	ldr	r2, [r2, #16]
1000211a:	0212      	lsls	r2, r2, #8
1000211c:	0a12      	lsrs	r2, r2, #8
1000211e:	611a      	str	r2, [r3, #16]
					 PORT2->IOCR0 |= 0x10000000;
10002120:	4bbc      	ldr	r3, [pc, #752]	; (10002414 <bit_init_mode+0xa94>)
10002122:	4abc      	ldr	r2, [pc, #752]	; (10002414 <bit_init_mode+0xa94>)
10002124:	6912      	ldr	r2, [r2, #16]
10002126:	2180      	movs	r1, #128	; 0x80
10002128:	0549      	lsls	r1, r1, #21
1000212a:	430a      	orrs	r2, r1
1000212c:	611a      	str	r2, [r3, #16]
1000212e:	e01b      	b.n	10002168 <bit_init_mode+0x7e8>
				 } else if (mode==PULLDOWN) {
10002130:	1d3b      	adds	r3, r7, #4
10002132:	781b      	ldrb	r3, [r3, #0]
10002134:	2b02      	cmp	r3, #2
10002136:	d10d      	bne.n	10002154 <bit_init_mode+0x7d4>
					 PORT2->IOCR0 &= 0x00ffffff;
10002138:	4bb6      	ldr	r3, [pc, #728]	; (10002414 <bit_init_mode+0xa94>)
1000213a:	4ab6      	ldr	r2, [pc, #728]	; (10002414 <bit_init_mode+0xa94>)
1000213c:	6912      	ldr	r2, [r2, #16]
1000213e:	0212      	lsls	r2, r2, #8
10002140:	0a12      	lsrs	r2, r2, #8
10002142:	611a      	str	r2, [r3, #16]
					 PORT2->IOCR0 |= 0x08000000;
10002144:	4bb3      	ldr	r3, [pc, #716]	; (10002414 <bit_init_mode+0xa94>)
10002146:	4ab3      	ldr	r2, [pc, #716]	; (10002414 <bit_init_mode+0xa94>)
10002148:	6912      	ldr	r2, [r2, #16]
1000214a:	2180      	movs	r1, #128	; 0x80
1000214c:	0509      	lsls	r1, r1, #20
1000214e:	430a      	orrs	r2, r1
10002150:	611a      	str	r2, [r3, #16]
10002152:	e009      	b.n	10002168 <bit_init_mode+0x7e8>
				 } else if (mode == ANALOG) {
10002154:	1d3b      	adds	r3, r7, #4
10002156:	781b      	ldrb	r3, [r3, #0]
10002158:	2b03      	cmp	r3, #3
1000215a:	d105      	bne.n	10002168 <bit_init_mode+0x7e8>
					SET_BIT(PORT2->PDISC,3); //Analog Modus aktiv
1000215c:	4bad      	ldr	r3, [pc, #692]	; (10002414 <bit_init_mode+0xa94>)
1000215e:	4aad      	ldr	r2, [pc, #692]	; (10002414 <bit_init_mode+0xa94>)
10002160:	6e12      	ldr	r2, [r2, #96]	; 0x60
10002162:	2108      	movs	r1, #8
10002164:	430a      	orrs	r2, r1
10002166:	661a      	str	r2, [r3, #96]	; 0x60
				 }
			 }
		 }
		 if ((bitnr > 3) && (bitnr < 8)) { //P2.4 bis P2.7
10002168:	1dbb      	adds	r3, r7, #6
1000216a:	781b      	ldrb	r3, [r3, #0]
1000216c:	2b03      	cmp	r3, #3
1000216e:	d960      	bls.n	10002232 <bit_init_mode+0x8b2>
10002170:	1dbb      	adds	r3, r7, #6
10002172:	781b      	ldrb	r3, [r3, #0]
10002174:	2b07      	cmp	r3, #7
10002176:	d85c      	bhi.n	10002232 <bit_init_mode+0x8b2>
			 if (direction == OUTP) {
10002178:	1d7b      	adds	r3, r7, #5
1000217a:	781b      	ldrb	r3, [r3, #0]
1000217c:	2b01      	cmp	r3, #1
1000217e:	d058      	beq.n	10002232 <bit_init_mode+0x8b2>
				 // nicht moeglich
			 } else if (direction == INP) {
10002180:	1d7b      	adds	r3, r7, #5
10002182:	781b      	ldrb	r3, [r3, #0]
10002184:	2b00      	cmp	r3, #0
10002186:	d154      	bne.n	10002232 <bit_init_mode+0x8b2>
				 CLR_BIT(PORT2->PDISC,bitnr); // digital Pad aktiv
10002188:	4ba2      	ldr	r3, [pc, #648]	; (10002414 <bit_init_mode+0xa94>)
1000218a:	4aa2      	ldr	r2, [pc, #648]	; (10002414 <bit_init_mode+0xa94>)
1000218c:	6e12      	ldr	r2, [r2, #96]	; 0x60
1000218e:	1db9      	adds	r1, r7, #6
10002190:	7809      	ldrb	r1, [r1, #0]
10002192:	2001      	movs	r0, #1
10002194:	4088      	lsls	r0, r1
10002196:	1c01      	adds	r1, r0, #0
10002198:	43c9      	mvns	r1, r1
1000219a:	400a      	ands	r2, r1
1000219c:	661a      	str	r2, [r3, #96]	; 0x60
				 if (mode==PULLUP) {
1000219e:	1d3b      	adds	r3, r7, #4
100021a0:	781b      	ldrb	r3, [r3, #0]
100021a2:	2b01      	cmp	r3, #1
100021a4:	d119      	bne.n	100021da <bit_init_mode+0x85a>
					 PORT2->IOCR4 &= ~(0xff<<((bitnr-4)*8)); //PORT2->IOCR1 &= 0xffffff00;
100021a6:	4b9b      	ldr	r3, [pc, #620]	; (10002414 <bit_init_mode+0xa94>)
100021a8:	4a9a      	ldr	r2, [pc, #616]	; (10002414 <bit_init_mode+0xa94>)
100021aa:	6952      	ldr	r2, [r2, #20]
100021ac:	1db9      	adds	r1, r7, #6
100021ae:	7809      	ldrb	r1, [r1, #0]
100021b0:	3904      	subs	r1, #4
100021b2:	00c9      	lsls	r1, r1, #3
100021b4:	20ff      	movs	r0, #255	; 0xff
100021b6:	4088      	lsls	r0, r1
100021b8:	1c01      	adds	r1, r0, #0
100021ba:	43c9      	mvns	r1, r1
100021bc:	400a      	ands	r2, r1
100021be:	615a      	str	r2, [r3, #20]
					 PORT2->IOCR4 |= 0x10<<((bitnr-4)*8);    //PORT2->IOCR4 |= 0x00000010;
100021c0:	4b94      	ldr	r3, [pc, #592]	; (10002414 <bit_init_mode+0xa94>)
100021c2:	4a94      	ldr	r2, [pc, #592]	; (10002414 <bit_init_mode+0xa94>)
100021c4:	6952      	ldr	r2, [r2, #20]
100021c6:	1db9      	adds	r1, r7, #6
100021c8:	7809      	ldrb	r1, [r1, #0]
100021ca:	3904      	subs	r1, #4
100021cc:	00c9      	lsls	r1, r1, #3
100021ce:	2010      	movs	r0, #16
100021d0:	4088      	lsls	r0, r1
100021d2:	1c01      	adds	r1, r0, #0
100021d4:	430a      	orrs	r2, r1
100021d6:	615a      	str	r2, [r3, #20]
100021d8:	e02b      	b.n	10002232 <bit_init_mode+0x8b2>
				 } else if (mode==PULLDOWN) {
100021da:	1d3b      	adds	r3, r7, #4
100021dc:	781b      	ldrb	r3, [r3, #0]
100021de:	2b02      	cmp	r3, #2
100021e0:	d119      	bne.n	10002216 <bit_init_mode+0x896>
					 PORT2->IOCR4 &= ~(0xff<<((bitnr-4)*8)); //PORT2->IOCR1 &= 0xffffff00;
100021e2:	4b8c      	ldr	r3, [pc, #560]	; (10002414 <bit_init_mode+0xa94>)
100021e4:	4a8b      	ldr	r2, [pc, #556]	; (10002414 <bit_init_mode+0xa94>)
100021e6:	6952      	ldr	r2, [r2, #20]
100021e8:	1db9      	adds	r1, r7, #6
100021ea:	7809      	ldrb	r1, [r1, #0]
100021ec:	3904      	subs	r1, #4
100021ee:	00c9      	lsls	r1, r1, #3
100021f0:	20ff      	movs	r0, #255	; 0xff
100021f2:	4088      	lsls	r0, r1
100021f4:	1c01      	adds	r1, r0, #0
100021f6:	43c9      	mvns	r1, r1
100021f8:	400a      	ands	r2, r1
100021fa:	615a      	str	r2, [r3, #20]
					 PORT2->IOCR4 |= 0x08<<((bitnr-4)*8);    //PORT2->IOCR4 |= 0x00000010;
100021fc:	4b85      	ldr	r3, [pc, #532]	; (10002414 <bit_init_mode+0xa94>)
100021fe:	4a85      	ldr	r2, [pc, #532]	; (10002414 <bit_init_mode+0xa94>)
10002200:	6952      	ldr	r2, [r2, #20]
10002202:	1db9      	adds	r1, r7, #6
10002204:	7809      	ldrb	r1, [r1, #0]
10002206:	3904      	subs	r1, #4
10002208:	00c9      	lsls	r1, r1, #3
1000220a:	2008      	movs	r0, #8
1000220c:	4088      	lsls	r0, r1
1000220e:	1c01      	adds	r1, r0, #0
10002210:	430a      	orrs	r2, r1
10002212:	615a      	str	r2, [r3, #20]
10002214:	e00d      	b.n	10002232 <bit_init_mode+0x8b2>
				 } else if (mode == ANALOG) {
10002216:	1d3b      	adds	r3, r7, #4
10002218:	781b      	ldrb	r3, [r3, #0]
1000221a:	2b03      	cmp	r3, #3
1000221c:	d109      	bne.n	10002232 <bit_init_mode+0x8b2>
					 SET_BIT(PORT2->PDISC,bitnr); //Analog Modus aktiv
1000221e:	4b7d      	ldr	r3, [pc, #500]	; (10002414 <bit_init_mode+0xa94>)
10002220:	4a7c      	ldr	r2, [pc, #496]	; (10002414 <bit_init_mode+0xa94>)
10002222:	6e11      	ldr	r1, [r2, #96]	; 0x60
10002224:	1dba      	adds	r2, r7, #6
10002226:	7812      	ldrb	r2, [r2, #0]
10002228:	2001      	movs	r0, #1
1000222a:	4090      	lsls	r0, r2
1000222c:	1c02      	adds	r2, r0, #0
1000222e:	430a      	orrs	r2, r1
10002230:	661a      	str	r2, [r3, #96]	; 0x60
				 }
			 }
		 }
		 if (bitnr == 8) { //P2.8
10002232:	1dbb      	adds	r3, r7, #6
10002234:	781b      	ldrb	r3, [r3, #0]
10002236:	2b08      	cmp	r3, #8
10002238:	d14d      	bne.n	100022d6 <bit_init_mode+0x956>
			if (direction == OUTP) {
1000223a:	1d7b      	adds	r3, r7, #5
1000223c:	781b      	ldrb	r3, [r3, #0]
1000223e:	2b01      	cmp	r3, #1
10002240:	d112      	bne.n	10002268 <bit_init_mode+0x8e8>
				CLR_BIT(PORT2->PDISC,8); // digital Pad aktiv
10002242:	4b74      	ldr	r3, [pc, #464]	; (10002414 <bit_init_mode+0xa94>)
10002244:	4a73      	ldr	r2, [pc, #460]	; (10002414 <bit_init_mode+0xa94>)
10002246:	6e12      	ldr	r2, [r2, #96]	; 0x60
10002248:	4973      	ldr	r1, [pc, #460]	; (10002418 <bit_init_mode+0xa98>)
1000224a:	400a      	ands	r2, r1
1000224c:	661a      	str	r2, [r3, #96]	; 0x60
				PORT2->IOCR8 &= 0xffffff00;
1000224e:	4b71      	ldr	r3, [pc, #452]	; (10002414 <bit_init_mode+0xa94>)
10002250:	4a70      	ldr	r2, [pc, #448]	; (10002414 <bit_init_mode+0xa94>)
10002252:	6992      	ldr	r2, [r2, #24]
10002254:	21ff      	movs	r1, #255	; 0xff
10002256:	438a      	bics	r2, r1
10002258:	619a      	str	r2, [r3, #24]
				PORT2->IOCR8 |= 0x00000080;
1000225a:	4b6e      	ldr	r3, [pc, #440]	; (10002414 <bit_init_mode+0xa94>)
1000225c:	4a6d      	ldr	r2, [pc, #436]	; (10002414 <bit_init_mode+0xa94>)
1000225e:	6992      	ldr	r2, [r2, #24]
10002260:	2180      	movs	r1, #128	; 0x80
10002262:	430a      	orrs	r2, r1
10002264:	619a      	str	r2, [r3, #24]
10002266:	e036      	b.n	100022d6 <bit_init_mode+0x956>
			} else if (direction == INP) {
10002268:	1d7b      	adds	r3, r7, #5
1000226a:	781b      	ldrb	r3, [r3, #0]
1000226c:	2b00      	cmp	r3, #0
1000226e:	d132      	bne.n	100022d6 <bit_init_mode+0x956>
				CLR_BIT(PORT2->PDISC,8); // digital Pad aktiv
10002270:	4b68      	ldr	r3, [pc, #416]	; (10002414 <bit_init_mode+0xa94>)
10002272:	4a68      	ldr	r2, [pc, #416]	; (10002414 <bit_init_mode+0xa94>)
10002274:	6e12      	ldr	r2, [r2, #96]	; 0x60
10002276:	4968      	ldr	r1, [pc, #416]	; (10002418 <bit_init_mode+0xa98>)
10002278:	400a      	ands	r2, r1
1000227a:	661a      	str	r2, [r3, #96]	; 0x60
				if (mode==PULLUP) {
1000227c:	1d3b      	adds	r3, r7, #4
1000227e:	781b      	ldrb	r3, [r3, #0]
10002280:	2b01      	cmp	r3, #1
10002282:	d10c      	bne.n	1000229e <bit_init_mode+0x91e>
					PORT2->IOCR8 &= 0xFFFFFF00;
10002284:	4b63      	ldr	r3, [pc, #396]	; (10002414 <bit_init_mode+0xa94>)
10002286:	4a63      	ldr	r2, [pc, #396]	; (10002414 <bit_init_mode+0xa94>)
10002288:	6992      	ldr	r2, [r2, #24]
1000228a:	21ff      	movs	r1, #255	; 0xff
1000228c:	438a      	bics	r2, r1
1000228e:	619a      	str	r2, [r3, #24]
					PORT2->IOCR8 |= 0x00000010;
10002290:	4b60      	ldr	r3, [pc, #384]	; (10002414 <bit_init_mode+0xa94>)
10002292:	4a60      	ldr	r2, [pc, #384]	; (10002414 <bit_init_mode+0xa94>)
10002294:	6992      	ldr	r2, [r2, #24]
10002296:	2110      	movs	r1, #16
10002298:	430a      	orrs	r2, r1
1000229a:	619a      	str	r2, [r3, #24]
1000229c:	e01b      	b.n	100022d6 <bit_init_mode+0x956>
				} else if (mode==PULLDOWN) {
1000229e:	1d3b      	adds	r3, r7, #4
100022a0:	781b      	ldrb	r3, [r3, #0]
100022a2:	2b02      	cmp	r3, #2
100022a4:	d10c      	bne.n	100022c0 <bit_init_mode+0x940>
					PORT2->IOCR8 &= 0xFFFFFF00;
100022a6:	4b5b      	ldr	r3, [pc, #364]	; (10002414 <bit_init_mode+0xa94>)
100022a8:	4a5a      	ldr	r2, [pc, #360]	; (10002414 <bit_init_mode+0xa94>)
100022aa:	6992      	ldr	r2, [r2, #24]
100022ac:	21ff      	movs	r1, #255	; 0xff
100022ae:	438a      	bics	r2, r1
100022b0:	619a      	str	r2, [r3, #24]
					PORT2->IOCR8 |= 0x00000008;
100022b2:	4b58      	ldr	r3, [pc, #352]	; (10002414 <bit_init_mode+0xa94>)
100022b4:	4a57      	ldr	r2, [pc, #348]	; (10002414 <bit_init_mode+0xa94>)
100022b6:	6992      	ldr	r2, [r2, #24]
100022b8:	2108      	movs	r1, #8
100022ba:	430a      	orrs	r2, r1
100022bc:	619a      	str	r2, [r3, #24]
100022be:	e00a      	b.n	100022d6 <bit_init_mode+0x956>
				} else if (mode == ANALOG) {
100022c0:	1d3b      	adds	r3, r7, #4
100022c2:	781b      	ldrb	r3, [r3, #0]
100022c4:	2b03      	cmp	r3, #3
100022c6:	d106      	bne.n	100022d6 <bit_init_mode+0x956>
					SET_BIT(PORT2->PDISC,8); //Analog Modus aktiv
100022c8:	4b52      	ldr	r3, [pc, #328]	; (10002414 <bit_init_mode+0xa94>)
100022ca:	4a52      	ldr	r2, [pc, #328]	; (10002414 <bit_init_mode+0xa94>)
100022cc:	6e12      	ldr	r2, [r2, #96]	; 0x60
100022ce:	2180      	movs	r1, #128	; 0x80
100022d0:	0049      	lsls	r1, r1, #1
100022d2:	430a      	orrs	r2, r1
100022d4:	661a      	str	r2, [r3, #96]	; 0x60
				}
			}
		 }
		 if (bitnr == 9) { //P2.9
100022d6:	1dbb      	adds	r3, r7, #6
100022d8:	781b      	ldrb	r3, [r3, #0]
100022da:	2b09      	cmp	r3, #9
100022dc:	d150      	bne.n	10002380 <bit_init_mode+0xa00>
			if (direction == OUTP) {
100022de:	1d7b      	adds	r3, r7, #5
100022e0:	781b      	ldrb	r3, [r3, #0]
100022e2:	2b01      	cmp	r3, #1
100022e4:	d113      	bne.n	1000230e <bit_init_mode+0x98e>
				CLR_BIT(PORT2->PDISC,9); // digital Pad aktiv
100022e6:	4b4b      	ldr	r3, [pc, #300]	; (10002414 <bit_init_mode+0xa94>)
100022e8:	4a4a      	ldr	r2, [pc, #296]	; (10002414 <bit_init_mode+0xa94>)
100022ea:	6e12      	ldr	r2, [r2, #96]	; 0x60
100022ec:	494b      	ldr	r1, [pc, #300]	; (1000241c <bit_init_mode+0xa9c>)
100022ee:	400a      	ands	r2, r1
100022f0:	661a      	str	r2, [r3, #96]	; 0x60
				PORT2->IOCR8 &= 0xffff00ff;
100022f2:	4b48      	ldr	r3, [pc, #288]	; (10002414 <bit_init_mode+0xa94>)
100022f4:	4a47      	ldr	r2, [pc, #284]	; (10002414 <bit_init_mode+0xa94>)
100022f6:	6992      	ldr	r2, [r2, #24]
100022f8:	4949      	ldr	r1, [pc, #292]	; (10002420 <bit_init_mode+0xaa0>)
100022fa:	400a      	ands	r2, r1
100022fc:	619a      	str	r2, [r3, #24]
				PORT2->IOCR8 |= 0x00008000;
100022fe:	4b45      	ldr	r3, [pc, #276]	; (10002414 <bit_init_mode+0xa94>)
10002300:	4a44      	ldr	r2, [pc, #272]	; (10002414 <bit_init_mode+0xa94>)
10002302:	6992      	ldr	r2, [r2, #24]
10002304:	2180      	movs	r1, #128	; 0x80
10002306:	0209      	lsls	r1, r1, #8
10002308:	430a      	orrs	r2, r1
1000230a:	619a      	str	r2, [r3, #24]
1000230c:	e038      	b.n	10002380 <bit_init_mode+0xa00>
			} else if (direction == INP) {
1000230e:	1d7b      	adds	r3, r7, #5
10002310:	781b      	ldrb	r3, [r3, #0]
10002312:	2b00      	cmp	r3, #0
10002314:	d134      	bne.n	10002380 <bit_init_mode+0xa00>
				CLR_BIT(PORT2->PDISC,9); // digital Pad aktiv
10002316:	4b3f      	ldr	r3, [pc, #252]	; (10002414 <bit_init_mode+0xa94>)
10002318:	4a3e      	ldr	r2, [pc, #248]	; (10002414 <bit_init_mode+0xa94>)
1000231a:	6e12      	ldr	r2, [r2, #96]	; 0x60
1000231c:	493f      	ldr	r1, [pc, #252]	; (1000241c <bit_init_mode+0xa9c>)
1000231e:	400a      	ands	r2, r1
10002320:	661a      	str	r2, [r3, #96]	; 0x60
				if (mode==PULLUP) {
10002322:	1d3b      	adds	r3, r7, #4
10002324:	781b      	ldrb	r3, [r3, #0]
10002326:	2b01      	cmp	r3, #1
10002328:	d10d      	bne.n	10002346 <bit_init_mode+0x9c6>
					PORT2->IOCR8 &= 0xFFFF00FF;
1000232a:	4b3a      	ldr	r3, [pc, #232]	; (10002414 <bit_init_mode+0xa94>)
1000232c:	4a39      	ldr	r2, [pc, #228]	; (10002414 <bit_init_mode+0xa94>)
1000232e:	6992      	ldr	r2, [r2, #24]
10002330:	493b      	ldr	r1, [pc, #236]	; (10002420 <bit_init_mode+0xaa0>)
10002332:	400a      	ands	r2, r1
10002334:	619a      	str	r2, [r3, #24]
					PORT2->IOCR8 |= 0x00001000;
10002336:	4b37      	ldr	r3, [pc, #220]	; (10002414 <bit_init_mode+0xa94>)
10002338:	4a36      	ldr	r2, [pc, #216]	; (10002414 <bit_init_mode+0xa94>)
1000233a:	6992      	ldr	r2, [r2, #24]
1000233c:	2180      	movs	r1, #128	; 0x80
1000233e:	0149      	lsls	r1, r1, #5
10002340:	430a      	orrs	r2, r1
10002342:	619a      	str	r2, [r3, #24]
10002344:	e01c      	b.n	10002380 <bit_init_mode+0xa00>
				} else if (mode==PULLDOWN) {
10002346:	1d3b      	adds	r3, r7, #4
10002348:	781b      	ldrb	r3, [r3, #0]
1000234a:	2b02      	cmp	r3, #2
1000234c:	d10d      	bne.n	1000236a <bit_init_mode+0x9ea>
					PORT2->IOCR8 &= 0xFFFF00FF;
1000234e:	4b31      	ldr	r3, [pc, #196]	; (10002414 <bit_init_mode+0xa94>)
10002350:	4a30      	ldr	r2, [pc, #192]	; (10002414 <bit_init_mode+0xa94>)
10002352:	6992      	ldr	r2, [r2, #24]
10002354:	4932      	ldr	r1, [pc, #200]	; (10002420 <bit_init_mode+0xaa0>)
10002356:	400a      	ands	r2, r1
10002358:	619a      	str	r2, [r3, #24]
					PORT2->IOCR8 |= 0x00000800;
1000235a:	4b2e      	ldr	r3, [pc, #184]	; (10002414 <bit_init_mode+0xa94>)
1000235c:	4a2d      	ldr	r2, [pc, #180]	; (10002414 <bit_init_mode+0xa94>)
1000235e:	6992      	ldr	r2, [r2, #24]
10002360:	2180      	movs	r1, #128	; 0x80
10002362:	0109      	lsls	r1, r1, #4
10002364:	430a      	orrs	r2, r1
10002366:	619a      	str	r2, [r3, #24]
10002368:	e00a      	b.n	10002380 <bit_init_mode+0xa00>
				} else if (mode == ANALOG) {
1000236a:	1d3b      	adds	r3, r7, #4
1000236c:	781b      	ldrb	r3, [r3, #0]
1000236e:	2b03      	cmp	r3, #3
10002370:	d106      	bne.n	10002380 <bit_init_mode+0xa00>
					SET_BIT(PORT2->PDISC,9); //Analog Modus aktiv
10002372:	4b28      	ldr	r3, [pc, #160]	; (10002414 <bit_init_mode+0xa94>)
10002374:	4a27      	ldr	r2, [pc, #156]	; (10002414 <bit_init_mode+0xa94>)
10002376:	6e12      	ldr	r2, [r2, #96]	; 0x60
10002378:	2180      	movs	r1, #128	; 0x80
1000237a:	0089      	lsls	r1, r1, #2
1000237c:	430a      	orrs	r2, r1
1000237e:	661a      	str	r2, [r3, #96]	; 0x60
				}
			}
		 }
		 if (bitnr == 10) { //P2.10
10002380:	1dbb      	adds	r3, r7, #6
10002382:	781b      	ldrb	r3, [r3, #0]
10002384:	2b0a      	cmp	r3, #10
10002386:	d15c      	bne.n	10002442 <bit_init_mode+0xac2>
			 if (direction == OUTP) {
10002388:	1d7b      	adds	r3, r7, #5
1000238a:	781b      	ldrb	r3, [r3, #0]
1000238c:	2b01      	cmp	r3, #1
1000238e:	d113      	bne.n	100023b8 <bit_init_mode+0xa38>
				 CLR_BIT(PORT2->PDISC,10); // digital Pad aktiv
10002390:	4b20      	ldr	r3, [pc, #128]	; (10002414 <bit_init_mode+0xa94>)
10002392:	4a20      	ldr	r2, [pc, #128]	; (10002414 <bit_init_mode+0xa94>)
10002394:	6e12      	ldr	r2, [r2, #96]	; 0x60
10002396:	4923      	ldr	r1, [pc, #140]	; (10002424 <bit_init_mode+0xaa4>)
10002398:	400a      	ands	r2, r1
1000239a:	661a      	str	r2, [r3, #96]	; 0x60
				 PORT2->IOCR8 &= 0xff00ffff;
1000239c:	4b1d      	ldr	r3, [pc, #116]	; (10002414 <bit_init_mode+0xa94>)
1000239e:	4a1d      	ldr	r2, [pc, #116]	; (10002414 <bit_init_mode+0xa94>)
100023a0:	6992      	ldr	r2, [r2, #24]
100023a2:	4921      	ldr	r1, [pc, #132]	; (10002428 <bit_init_mode+0xaa8>)
100023a4:	400a      	ands	r2, r1
100023a6:	619a      	str	r2, [r3, #24]
				 PORT2->IOCR8 |= 0x00800000;
100023a8:	4b1a      	ldr	r3, [pc, #104]	; (10002414 <bit_init_mode+0xa94>)
100023aa:	4a1a      	ldr	r2, [pc, #104]	; (10002414 <bit_init_mode+0xa94>)
100023ac:	6992      	ldr	r2, [r2, #24]
100023ae:	2180      	movs	r1, #128	; 0x80
100023b0:	0409      	lsls	r1, r1, #16
100023b2:	430a      	orrs	r2, r1
100023b4:	619a      	str	r2, [r3, #24]
100023b6:	e044      	b.n	10002442 <bit_init_mode+0xac2>
			 } else if (direction == INP) {
100023b8:	1d7b      	adds	r3, r7, #5
100023ba:	781b      	ldrb	r3, [r3, #0]
100023bc:	2b00      	cmp	r3, #0
100023be:	d140      	bne.n	10002442 <bit_init_mode+0xac2>
				 CLR_BIT(PORT2->PDISC,10); // digital Pad aktiv
100023c0:	4b14      	ldr	r3, [pc, #80]	; (10002414 <bit_init_mode+0xa94>)
100023c2:	4a14      	ldr	r2, [pc, #80]	; (10002414 <bit_init_mode+0xa94>)
100023c4:	6e12      	ldr	r2, [r2, #96]	; 0x60
100023c6:	4917      	ldr	r1, [pc, #92]	; (10002424 <bit_init_mode+0xaa4>)
100023c8:	400a      	ands	r2, r1
100023ca:	661a      	str	r2, [r3, #96]	; 0x60
				 if (mode==PULLUP) {
100023cc:	1d3b      	adds	r3, r7, #4
100023ce:	781b      	ldrb	r3, [r3, #0]
100023d0:	2b01      	cmp	r3, #1
100023d2:	d10d      	bne.n	100023f0 <bit_init_mode+0xa70>
					 PORT2->IOCR8 &= 0xFF00FFFF;
100023d4:	4b0f      	ldr	r3, [pc, #60]	; (10002414 <bit_init_mode+0xa94>)
100023d6:	4a0f      	ldr	r2, [pc, #60]	; (10002414 <bit_init_mode+0xa94>)
100023d8:	6992      	ldr	r2, [r2, #24]
100023da:	4913      	ldr	r1, [pc, #76]	; (10002428 <bit_init_mode+0xaa8>)
100023dc:	400a      	ands	r2, r1
100023de:	619a      	str	r2, [r3, #24]
					 PORT2->IOCR8 |= 0x00100000;
100023e0:	4b0c      	ldr	r3, [pc, #48]	; (10002414 <bit_init_mode+0xa94>)
100023e2:	4a0c      	ldr	r2, [pc, #48]	; (10002414 <bit_init_mode+0xa94>)
100023e4:	6992      	ldr	r2, [r2, #24]
100023e6:	2180      	movs	r1, #128	; 0x80
100023e8:	0349      	lsls	r1, r1, #13
100023ea:	430a      	orrs	r2, r1
100023ec:	619a      	str	r2, [r3, #24]
100023ee:	e028      	b.n	10002442 <bit_init_mode+0xac2>
				 } else if (mode==PULLDOWN) {
100023f0:	1d3b      	adds	r3, r7, #4
100023f2:	781b      	ldrb	r3, [r3, #0]
100023f4:	2b02      	cmp	r3, #2
100023f6:	d119      	bne.n	1000242c <bit_init_mode+0xaac>
					 PORT2->IOCR8 &= 0xFF00FFFF;
100023f8:	4b06      	ldr	r3, [pc, #24]	; (10002414 <bit_init_mode+0xa94>)
100023fa:	4a06      	ldr	r2, [pc, #24]	; (10002414 <bit_init_mode+0xa94>)
100023fc:	6992      	ldr	r2, [r2, #24]
100023fe:	490a      	ldr	r1, [pc, #40]	; (10002428 <bit_init_mode+0xaa8>)
10002400:	400a      	ands	r2, r1
10002402:	619a      	str	r2, [r3, #24]
					 PORT2->IOCR8 |= 0x00080000;
10002404:	4b03      	ldr	r3, [pc, #12]	; (10002414 <bit_init_mode+0xa94>)
10002406:	4a03      	ldr	r2, [pc, #12]	; (10002414 <bit_init_mode+0xa94>)
10002408:	6992      	ldr	r2, [r2, #24]
1000240a:	2180      	movs	r1, #128	; 0x80
1000240c:	0309      	lsls	r1, r1, #12
1000240e:	430a      	orrs	r2, r1
10002410:	619a      	str	r2, [r3, #24]
10002412:	e016      	b.n	10002442 <bit_init_mode+0xac2>
10002414:	40040200 	.word	0x40040200
10002418:	fffffeff 	.word	0xfffffeff
1000241c:	fffffdff 	.word	0xfffffdff
10002420:	ffff00ff 	.word	0xffff00ff
10002424:	fffffbff 	.word	0xfffffbff
10002428:	ff00ffff 	.word	0xff00ffff
				 } else if (mode == ANALOG) {
1000242c:	1d3b      	adds	r3, r7, #4
1000242e:	781b      	ldrb	r3, [r3, #0]
10002430:	2b03      	cmp	r3, #3
10002432:	d106      	bne.n	10002442 <bit_init_mode+0xac2>
					 SET_BIT(PORT2->PDISC,10); //Analog Modus aktiv
10002434:	4b2f      	ldr	r3, [pc, #188]	; (100024f4 <bit_init_mode+0xb74>)
10002436:	4a2f      	ldr	r2, [pc, #188]	; (100024f4 <bit_init_mode+0xb74>)
10002438:	6e12      	ldr	r2, [r2, #96]	; 0x60
1000243a:	2180      	movs	r1, #128	; 0x80
1000243c:	00c9      	lsls	r1, r1, #3
1000243e:	430a      	orrs	r2, r1
10002440:	661a      	str	r2, [r3, #96]	; 0x60
				 }
			 }
		 }
		 if (bitnr == 11) { //P2.11
10002442:	1dbb      	adds	r3, r7, #6
10002444:	781b      	ldrb	r3, [r3, #0]
10002446:	2b0b      	cmp	r3, #11
10002448:	d150      	bne.n	100024ec <bit_init_mode+0xb6c>
			if (direction == OUTP) {
1000244a:	1d7b      	adds	r3, r7, #5
1000244c:	781b      	ldrb	r3, [r3, #0]
1000244e:	2b01      	cmp	r3, #1
10002450:	d113      	bne.n	1000247a <bit_init_mode+0xafa>
				CLR_BIT(PORT2->PDISC,11); // digital Pad aktiv
10002452:	4b28      	ldr	r3, [pc, #160]	; (100024f4 <bit_init_mode+0xb74>)
10002454:	4a27      	ldr	r2, [pc, #156]	; (100024f4 <bit_init_mode+0xb74>)
10002456:	6e12      	ldr	r2, [r2, #96]	; 0x60
10002458:	4927      	ldr	r1, [pc, #156]	; (100024f8 <bit_init_mode+0xb78>)
1000245a:	400a      	ands	r2, r1
1000245c:	661a      	str	r2, [r3, #96]	; 0x60
				PORT2->IOCR8 &= 0x00ffffff;
1000245e:	4b25      	ldr	r3, [pc, #148]	; (100024f4 <bit_init_mode+0xb74>)
10002460:	4a24      	ldr	r2, [pc, #144]	; (100024f4 <bit_init_mode+0xb74>)
10002462:	6992      	ldr	r2, [r2, #24]
10002464:	0212      	lsls	r2, r2, #8
10002466:	0a12      	lsrs	r2, r2, #8
10002468:	619a      	str	r2, [r3, #24]
				PORT2->IOCR8 |= 0x80000000;
1000246a:	4b22      	ldr	r3, [pc, #136]	; (100024f4 <bit_init_mode+0xb74>)
1000246c:	4a21      	ldr	r2, [pc, #132]	; (100024f4 <bit_init_mode+0xb74>)
1000246e:	6992      	ldr	r2, [r2, #24]
10002470:	2180      	movs	r1, #128	; 0x80
10002472:	0609      	lsls	r1, r1, #24
10002474:	430a      	orrs	r2, r1
10002476:	619a      	str	r2, [r3, #24]
10002478:	e038      	b.n	100024ec <bit_init_mode+0xb6c>
			} else if (direction == INP) {
1000247a:	1d7b      	adds	r3, r7, #5
1000247c:	781b      	ldrb	r3, [r3, #0]
1000247e:	2b00      	cmp	r3, #0
10002480:	d134      	bne.n	100024ec <bit_init_mode+0xb6c>
				CLR_BIT(PORT2->PDISC,11); // digital Pad aktiv
10002482:	4b1c      	ldr	r3, [pc, #112]	; (100024f4 <bit_init_mode+0xb74>)
10002484:	4a1b      	ldr	r2, [pc, #108]	; (100024f4 <bit_init_mode+0xb74>)
10002486:	6e12      	ldr	r2, [r2, #96]	; 0x60
10002488:	491b      	ldr	r1, [pc, #108]	; (100024f8 <bit_init_mode+0xb78>)
1000248a:	400a      	ands	r2, r1
1000248c:	661a      	str	r2, [r3, #96]	; 0x60
				if (mode==PULLUP) {
1000248e:	1d3b      	adds	r3, r7, #4
10002490:	781b      	ldrb	r3, [r3, #0]
10002492:	2b01      	cmp	r3, #1
10002494:	d10d      	bne.n	100024b2 <bit_init_mode+0xb32>
					PORT2->IOCR8 &= 0x00FFFFFF;
10002496:	4b17      	ldr	r3, [pc, #92]	; (100024f4 <bit_init_mode+0xb74>)
10002498:	4a16      	ldr	r2, [pc, #88]	; (100024f4 <bit_init_mode+0xb74>)
1000249a:	6992      	ldr	r2, [r2, #24]
1000249c:	0212      	lsls	r2, r2, #8
1000249e:	0a12      	lsrs	r2, r2, #8
100024a0:	619a      	str	r2, [r3, #24]
					PORT2->IOCR8 |= 0x10000000;
100024a2:	4b14      	ldr	r3, [pc, #80]	; (100024f4 <bit_init_mode+0xb74>)
100024a4:	4a13      	ldr	r2, [pc, #76]	; (100024f4 <bit_init_mode+0xb74>)
100024a6:	6992      	ldr	r2, [r2, #24]
100024a8:	2180      	movs	r1, #128	; 0x80
100024aa:	0549      	lsls	r1, r1, #21
100024ac:	430a      	orrs	r2, r1
100024ae:	619a      	str	r2, [r3, #24]
100024b0:	e01c      	b.n	100024ec <bit_init_mode+0xb6c>
				} else if (mode==PULLDOWN) {
100024b2:	1d3b      	adds	r3, r7, #4
100024b4:	781b      	ldrb	r3, [r3, #0]
100024b6:	2b02      	cmp	r3, #2
100024b8:	d10d      	bne.n	100024d6 <bit_init_mode+0xb56>
					PORT2->IOCR8 &= 0x00FFFFFF;
100024ba:	4b0e      	ldr	r3, [pc, #56]	; (100024f4 <bit_init_mode+0xb74>)
100024bc:	4a0d      	ldr	r2, [pc, #52]	; (100024f4 <bit_init_mode+0xb74>)
100024be:	6992      	ldr	r2, [r2, #24]
100024c0:	0212      	lsls	r2, r2, #8
100024c2:	0a12      	lsrs	r2, r2, #8
100024c4:	619a      	str	r2, [r3, #24]
					PORT2->IOCR8 |= 0x08000000;
100024c6:	4b0b      	ldr	r3, [pc, #44]	; (100024f4 <bit_init_mode+0xb74>)
100024c8:	4a0a      	ldr	r2, [pc, #40]	; (100024f4 <bit_init_mode+0xb74>)
100024ca:	6992      	ldr	r2, [r2, #24]
100024cc:	2180      	movs	r1, #128	; 0x80
100024ce:	0509      	lsls	r1, r1, #20
100024d0:	430a      	orrs	r2, r1
100024d2:	619a      	str	r2, [r3, #24]
100024d4:	e00a      	b.n	100024ec <bit_init_mode+0xb6c>
				} else if (mode == ANALOG) {
100024d6:	1d3b      	adds	r3, r7, #4
100024d8:	781b      	ldrb	r3, [r3, #0]
100024da:	2b03      	cmp	r3, #3
100024dc:	d106      	bne.n	100024ec <bit_init_mode+0xb6c>
					SET_BIT(PORT2->PDISC,11); //Analog Modus aktiv
100024de:	4b05      	ldr	r3, [pc, #20]	; (100024f4 <bit_init_mode+0xb74>)
100024e0:	4a04      	ldr	r2, [pc, #16]	; (100024f4 <bit_init_mode+0xb74>)
100024e2:	6e12      	ldr	r2, [r2, #96]	; 0x60
100024e4:	2180      	movs	r1, #128	; 0x80
100024e6:	0109      	lsls	r1, r1, #4
100024e8:	430a      	orrs	r2, r1
100024ea:	661a      	str	r2, [r3, #96]	; 0x60
				}
			}
		 }
		 break;
100024ec:	46c0      	nop			; (mov r8, r8)
	}
}
100024ee:	46bd      	mov	sp, r7
100024f0:	b002      	add	sp, #8
100024f2:	bdb0      	pop	{r4, r5, r7, pc}
100024f4:	40040200 	.word	0x40040200
100024f8:	fffff7ff 	.word	0xfffff7ff

100024fc <bit_read>:
//---------------------------------------------------------------
// Einzelnes Portbit einlesen
// port: P0,P1,P2 bitnr: 0..15
//---------------------------------------------------------------
uint8_t bit_read(uint8_t port, uint8_t bitnr)
{
100024fc:	b590      	push	{r4, r7, lr}
100024fe:	b085      	sub	sp, #20
10002500:	af00      	add	r7, sp, #0
10002502:	1c02      	adds	r2, r0, #0
10002504:	1dfb      	adds	r3, r7, #7
10002506:	701a      	strb	r2, [r3, #0]
10002508:	1dbb      	adds	r3, r7, #6
1000250a:	1c0a      	adds	r2, r1, #0
1000250c:	701a      	strb	r2, [r3, #0]
  uint16_t temp;

  temp = port_read(port);
1000250e:	230e      	movs	r3, #14
10002510:	18fc      	adds	r4, r7, r3
10002512:	1dfb      	adds	r3, r7, #7
10002514:	781b      	ldrb	r3, [r3, #0]
10002516:	1c18      	adds	r0, r3, #0
10002518:	f000 f8a0 	bl	1000265c <port_read>
1000251c:	1c03      	adds	r3, r0, #0
1000251e:	8023      	strh	r3, [r4, #0]
  return ((temp>>bitnr) & 0x01);
10002520:	230e      	movs	r3, #14
10002522:	18fb      	adds	r3, r7, r3
10002524:	881a      	ldrh	r2, [r3, #0]
10002526:	1dbb      	adds	r3, r7, #6
10002528:	781b      	ldrb	r3, [r3, #0]
1000252a:	411a      	asrs	r2, r3
1000252c:	1c13      	adds	r3, r2, #0
1000252e:	b2db      	uxtb	r3, r3
10002530:	2201      	movs	r2, #1
10002532:	4013      	ands	r3, r2
10002534:	b2db      	uxtb	r3, r3
}
10002536:	1c18      	adds	r0, r3, #0
10002538:	46bd      	mov	sp, r7
1000253a:	b005      	add	sp, #20
1000253c:	bd90      	pop	{r4, r7, pc}
1000253e:	46c0      	nop			; (mov r8, r8)

10002540 <bit_write>:
//---------------------------------------------------------------
// Einzelnes Portbit ausgeben
// port: P0,P1 bitnr: 0..15 P2=>bitnr 9..11
//---------------------------------------------------------------
void bit_write(uint8_t port, uint8_t bitnr, uint8_t value)
{
10002540:	b590      	push	{r4, r7, lr}
10002542:	b083      	sub	sp, #12
10002544:	af00      	add	r7, sp, #0
10002546:	1c04      	adds	r4, r0, #0
10002548:	1c08      	adds	r0, r1, #0
1000254a:	1c11      	adds	r1, r2, #0
1000254c:	1dfb      	adds	r3, r7, #7
1000254e:	1c22      	adds	r2, r4, #0
10002550:	701a      	strb	r2, [r3, #0]
10002552:	1dbb      	adds	r3, r7, #6
10002554:	1c02      	adds	r2, r0, #0
10002556:	701a      	strb	r2, [r3, #0]
10002558:	1d7b      	adds	r3, r7, #5
1000255a:	1c0a      	adds	r2, r1, #0
1000255c:	701a      	strb	r2, [r3, #0]
	//uint32_t temp;
	value &= 0x01;       // value darf nur 0 oder 1 sein!
1000255e:	1d7b      	adds	r3, r7, #5
10002560:	1d7a      	adds	r2, r7, #5
10002562:	7812      	ldrb	r2, [r2, #0]
10002564:	2101      	movs	r1, #1
10002566:	400a      	ands	r2, r1
10002568:	701a      	strb	r2, [r3, #0]
	switch (port)
1000256a:	1dfb      	adds	r3, r7, #7
1000256c:	781b      	ldrb	r3, [r3, #0]
1000256e:	2b01      	cmp	r3, #1
10002570:	d035      	beq.n	100025de <bit_write+0x9e>
10002572:	2b02      	cmp	r3, #2
10002574:	d04e      	beq.n	10002614 <bit_write+0xd4>
10002576:	2b00      	cmp	r3, #0
10002578:	d167      	bne.n	1000264a <bit_write+0x10a>
	{
		case 0 :
			if (value == 1) {
1000257a:	1d7b      	adds	r3, r7, #5
1000257c:	781b      	ldrb	r3, [r3, #0]
1000257e:	2b01      	cmp	r3, #1
10002580:	d116      	bne.n	100025b0 <bit_write+0x70>
				//PORT0->OUT |= 1UL << bitnr ;
				PORT0->OMR &= ~(1UL << (bitnr + 16)); // loeschen des Bits
10002582:	4b33      	ldr	r3, [pc, #204]	; (10002650 <bit_write+0x110>)
10002584:	4a32      	ldr	r2, [pc, #200]	; (10002650 <bit_write+0x110>)
10002586:	6852      	ldr	r2, [r2, #4]
10002588:	1db9      	adds	r1, r7, #6
1000258a:	7809      	ldrb	r1, [r1, #0]
1000258c:	3110      	adds	r1, #16
1000258e:	2001      	movs	r0, #1
10002590:	4088      	lsls	r0, r1
10002592:	1c01      	adds	r1, r0, #0
10002594:	43c9      	mvns	r1, r1
10002596:	400a      	ands	r2, r1
10002598:	605a      	str	r2, [r3, #4]
				PORT0->OMR |= 1UL << bitnr;      // setzen
1000259a:	4b2d      	ldr	r3, [pc, #180]	; (10002650 <bit_write+0x110>)
1000259c:	4a2c      	ldr	r2, [pc, #176]	; (10002650 <bit_write+0x110>)
1000259e:	6851      	ldr	r1, [r2, #4]
100025a0:	1dba      	adds	r2, r7, #6
100025a2:	7812      	ldrb	r2, [r2, #0]
100025a4:	2001      	movs	r0, #1
100025a6:	4090      	lsls	r0, r2
100025a8:	1c02      	adds	r2, r0, #0
100025aa:	430a      	orrs	r2, r1
100025ac:	605a      	str	r2, [r3, #4]
				//temp = PORT0->OMR;
				//temp &= ~(1UL << bitnr);      // Set = 0
				//temp |= 1UL << (bitnr + 16); // Reset = 0
				//PORT0->OMR = temp;
			}
			break;
100025ae:	e04c      	b.n	1000264a <bit_write+0x10a>
				//temp |= 1UL << bitnr;      // setzen
				//PORT0->OMR = temp;
			}
			else {
				//PORT0->OUT &= ~( 1UL << bitnr);
				PORT0->OMR &= ~(1UL << bitnr);      // Set = 0
100025b0:	4b27      	ldr	r3, [pc, #156]	; (10002650 <bit_write+0x110>)
100025b2:	4a27      	ldr	r2, [pc, #156]	; (10002650 <bit_write+0x110>)
100025b4:	6852      	ldr	r2, [r2, #4]
100025b6:	1db9      	adds	r1, r7, #6
100025b8:	7809      	ldrb	r1, [r1, #0]
100025ba:	2001      	movs	r0, #1
100025bc:	4088      	lsls	r0, r1
100025be:	1c01      	adds	r1, r0, #0
100025c0:	43c9      	mvns	r1, r1
100025c2:	400a      	ands	r2, r1
100025c4:	605a      	str	r2, [r3, #4]
				PORT0->OMR |= 1UL << (bitnr + 16); // Reset = 0
100025c6:	4b22      	ldr	r3, [pc, #136]	; (10002650 <bit_write+0x110>)
100025c8:	4a21      	ldr	r2, [pc, #132]	; (10002650 <bit_write+0x110>)
100025ca:	6851      	ldr	r1, [r2, #4]
100025cc:	1dba      	adds	r2, r7, #6
100025ce:	7812      	ldrb	r2, [r2, #0]
100025d0:	3210      	adds	r2, #16
100025d2:	2001      	movs	r0, #1
100025d4:	4090      	lsls	r0, r2
100025d6:	1c02      	adds	r2, r0, #0
100025d8:	430a      	orrs	r2, r1
100025da:	605a      	str	r2, [r3, #4]
				//temp = PORT0->OMR;
				//temp &= ~(1UL << bitnr);      // Set = 0
				//temp |= 1UL << (bitnr + 16); // Reset = 0
				//PORT0->OMR = temp;
			}
			break;
100025dc:	e035      	b.n	1000264a <bit_write+0x10a>
	    case 1 :
	  	  	  {if (value == 1) PORT1->OUT |= 1UL << bitnr ;
100025de:	1d7b      	adds	r3, r7, #5
100025e0:	781b      	ldrb	r3, [r3, #0]
100025e2:	2b01      	cmp	r3, #1
100025e4:	d10a      	bne.n	100025fc <bit_write+0xbc>
100025e6:	4b1b      	ldr	r3, [pc, #108]	; (10002654 <bit_write+0x114>)
100025e8:	4a1a      	ldr	r2, [pc, #104]	; (10002654 <bit_write+0x114>)
100025ea:	6811      	ldr	r1, [r2, #0]
100025ec:	1dba      	adds	r2, r7, #6
100025ee:	7812      	ldrb	r2, [r2, #0]
100025f0:	2001      	movs	r0, #1
100025f2:	4090      	lsls	r0, r2
100025f4:	1c02      	adds	r2, r0, #0
100025f6:	430a      	orrs	r2, r1
100025f8:	601a      	str	r2, [r3, #0]
	  		   else PORT1->OUT &= ~( 1UL << bitnr);
	  		  }
			break;
100025fa:	e026      	b.n	1000264a <bit_write+0x10a>
				//PORT0->OMR = temp;
			}
			break;
	    case 1 :
	  	  	  {if (value == 1) PORT1->OUT |= 1UL << bitnr ;
	  		   else PORT1->OUT &= ~( 1UL << bitnr);
100025fc:	4b15      	ldr	r3, [pc, #84]	; (10002654 <bit_write+0x114>)
100025fe:	4a15      	ldr	r2, [pc, #84]	; (10002654 <bit_write+0x114>)
10002600:	6812      	ldr	r2, [r2, #0]
10002602:	1db9      	adds	r1, r7, #6
10002604:	7809      	ldrb	r1, [r1, #0]
10002606:	2001      	movs	r0, #1
10002608:	4088      	lsls	r0, r1
1000260a:	1c01      	adds	r1, r0, #0
1000260c:	43c9      	mvns	r1, r1
1000260e:	400a      	ands	r2, r1
10002610:	601a      	str	r2, [r3, #0]
	  		  }
			break;
10002612:	e01a      	b.n	1000264a <bit_write+0x10a>

	    case 2 :
			  {if (value == 1) PORT2->OUT |= 1UL << bitnr ;
10002614:	1d7b      	adds	r3, r7, #5
10002616:	781b      	ldrb	r3, [r3, #0]
10002618:	2b01      	cmp	r3, #1
1000261a:	d10a      	bne.n	10002632 <bit_write+0xf2>
1000261c:	4b0e      	ldr	r3, [pc, #56]	; (10002658 <bit_write+0x118>)
1000261e:	4a0e      	ldr	r2, [pc, #56]	; (10002658 <bit_write+0x118>)
10002620:	6811      	ldr	r1, [r2, #0]
10002622:	1dba      	adds	r2, r7, #6
10002624:	7812      	ldrb	r2, [r2, #0]
10002626:	2001      	movs	r0, #1
10002628:	4090      	lsls	r0, r2
1000262a:	1c02      	adds	r2, r0, #0
1000262c:	430a      	orrs	r2, r1
1000262e:	601a      	str	r2, [r3, #0]
10002630:	e00a      	b.n	10002648 <bit_write+0x108>
			   else PORT2->OUT &= ~( 1UL << bitnr);
10002632:	4b09      	ldr	r3, [pc, #36]	; (10002658 <bit_write+0x118>)
10002634:	4a08      	ldr	r2, [pc, #32]	; (10002658 <bit_write+0x118>)
10002636:	6812      	ldr	r2, [r2, #0]
10002638:	1db9      	adds	r1, r7, #6
1000263a:	7809      	ldrb	r1, [r1, #0]
1000263c:	2001      	movs	r0, #1
1000263e:	4088      	lsls	r0, r1
10002640:	1c01      	adds	r1, r0, #0
10002642:	43c9      	mvns	r1, r1
10002644:	400a      	ands	r2, r1
10002646:	601a      	str	r2, [r3, #0]
			  }
			break;
10002648:	46c0      	nop			; (mov r8, r8)
		}
 }
1000264a:	46bd      	mov	sp, r7
1000264c:	b003      	add	sp, #12
1000264e:	bd90      	pop	{r4, r7, pc}
10002650:	40040000 	.word	0x40040000
10002654:	40040100 	.word	0x40040100
10002658:	40040200 	.word	0x40040200

1000265c <port_read>:
//---------------------------------------------------------------
// Gesamtes Port einlesen
// port: P0,P1,P2
//---------------------------------------------------------------
uint16_t port_read (uint8_t port)
{
1000265c:	b580      	push	{r7, lr}
1000265e:	b084      	sub	sp, #16
10002660:	af00      	add	r7, sp, #0
10002662:	1c02      	adds	r2, r0, #0
10002664:	1dfb      	adds	r3, r7, #7
10002666:	701a      	strb	r2, [r3, #0]
	uint16_t temp;
  switch (port)
10002668:	1dfb      	adds	r3, r7, #7
1000266a:	781b      	ldrb	r3, [r3, #0]
1000266c:	2b01      	cmp	r3, #1
1000266e:	d00c      	beq.n	1000268a <port_read+0x2e>
10002670:	2b02      	cmp	r3, #2
10002672:	d013      	beq.n	1000269c <port_read+0x40>
10002674:	2b00      	cmp	r3, #0
10002676:	d11a      	bne.n	100026ae <port_read+0x52>
  {
    case 0: temp = PORT0->IN; return temp; break;
10002678:	4b0f      	ldr	r3, [pc, #60]	; (100026b8 <port_read+0x5c>)
1000267a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
1000267c:	230e      	movs	r3, #14
1000267e:	18fb      	adds	r3, r7, r3
10002680:	801a      	strh	r2, [r3, #0]
10002682:	230e      	movs	r3, #14
10002684:	18fb      	adds	r3, r7, r3
10002686:	881b      	ldrh	r3, [r3, #0]
10002688:	e012      	b.n	100026b0 <port_read+0x54>
    case 1: temp = PORT1->IN; return temp; break;
1000268a:	4b0c      	ldr	r3, [pc, #48]	; (100026bc <port_read+0x60>)
1000268c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
1000268e:	230e      	movs	r3, #14
10002690:	18fb      	adds	r3, r7, r3
10002692:	801a      	strh	r2, [r3, #0]
10002694:	230e      	movs	r3, #14
10002696:	18fb      	adds	r3, r7, r3
10002698:	881b      	ldrh	r3, [r3, #0]
1000269a:	e009      	b.n	100026b0 <port_read+0x54>
    case 2: temp = PORT2->IN; return temp; break;
1000269c:	4b08      	ldr	r3, [pc, #32]	; (100026c0 <port_read+0x64>)
1000269e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
100026a0:	230e      	movs	r3, #14
100026a2:	18fb      	adds	r3, r7, r3
100026a4:	801a      	strh	r2, [r3, #0]
100026a6:	230e      	movs	r3, #14
100026a8:	18fb      	adds	r3, r7, r3
100026aa:	881b      	ldrh	r3, [r3, #0]
100026ac:	e000      	b.n	100026b0 <port_read+0x54>
    default: return 0; break;
100026ae:	2300      	movs	r3, #0
  }
  //return 0;
}
100026b0:	1c18      	adds	r0, r3, #0
100026b2:	46bd      	mov	sp, r7
100026b4:	b004      	add	sp, #16
100026b6:	bd80      	pop	{r7, pc}
100026b8:	40040000 	.word	0x40040000
100026bc:	40040100 	.word	0x40040100
100026c0:	40040200 	.word	0x40040200

100026c4 <clock_init>:
//#define periode_pwm 0xffff // max 16-Bit-Periode


//------- Takt für 8-Bit- und 16-Bit-Funktionen PWM --------------------------------
void clock_init(void)
{
100026c4:	b580      	push	{r7, lr}
100026c6:	af00      	add	r7, sp, #0
	SCU_GENERAL->PASSWD = 0x000000C0UL;
100026c8:	4b15      	ldr	r3, [pc, #84]	; (10002720 <clock_init+0x5c>)
100026ca:	22c0      	movs	r2, #192	; 0xc0
100026cc:	625a      	str	r2, [r3, #36]	; 0x24
	SCU_CLK->CLKCR = 0x3FF10100;			// Config SCU Clock = 32MHz , PCLK = 64 MHz
100026ce:	4b15      	ldr	r3, [pc, #84]	; (10002724 <clock_init+0x60>)
100026d0:	4a15      	ldr	r2, [pc, #84]	; (10002728 <clock_init+0x64>)
100026d2:	601a      	str	r2, [r3, #0]
	while((SCU_CLK->CLKCR)&0x40000000UL);	// wait for VDDC to stabilize
100026d4:	46c0      	nop			; (mov r8, r8)
100026d6:	4b13      	ldr	r3, [pc, #76]	; (10002724 <clock_init+0x60>)
100026d8:	681a      	ldr	r2, [r3, #0]
100026da:	2380      	movs	r3, #128	; 0x80
100026dc:	05db      	lsls	r3, r3, #23
100026de:	4013      	ands	r3, r2
100026e0:	d1f9      	bne.n	100026d6 <clock_init+0x12>
	SCU_GENERAL->PASSWD = 0x000000C3UL;
100026e2:	4b0f      	ldr	r3, [pc, #60]	; (10002720 <clock_init+0x5c>)
100026e4:	22c3      	movs	r2, #195	; 0xc3
100026e6:	625a      	str	r2, [r3, #36]	; 0x24
	SCU_GENERAL->PASSWD = 0x000000C0UL;
100026e8:	4b0d      	ldr	r3, [pc, #52]	; (10002720 <clock_init+0x5c>)
100026ea:	22c0      	movs	r2, #192	; 0xc0
100026ec:	625a      	str	r2, [r3, #36]	; 0x24
	SCU_CLK->CGATCLR0 |= 0x04;				// Disable CCU4 Gating
100026ee:	4b0d      	ldr	r3, [pc, #52]	; (10002724 <clock_init+0x60>)
100026f0:	4a0c      	ldr	r2, [pc, #48]	; (10002724 <clock_init+0x60>)
100026f2:	6912      	ldr	r2, [r2, #16]
100026f4:	2104      	movs	r1, #4
100026f6:	430a      	orrs	r2, r1
100026f8:	611a      	str	r2, [r3, #16]
	while((SCU_CLK->CLKCR)&0x40000000UL);	// wait for VDDC to stabilize
100026fa:	46c0      	nop			; (mov r8, r8)
100026fc:	4b09      	ldr	r3, [pc, #36]	; (10002724 <clock_init+0x60>)
100026fe:	681a      	ldr	r2, [r3, #0]
10002700:	2380      	movs	r3, #128	; 0x80
10002702:	05db      	lsls	r3, r3, #23
10002704:	4013      	ands	r3, r2
10002706:	d1f9      	bne.n	100026fc <clock_init+0x38>
	SCU_GENERAL->PASSWD = 0x000000C3UL;
10002708:	4b05      	ldr	r3, [pc, #20]	; (10002720 <clock_init+0x5c>)
1000270a:	22c3      	movs	r2, #195	; 0xc3
1000270c:	625a      	str	r2, [r3, #36]	; 0x24
	SCU_CLK->CGATSET0 |= 0xfff;				// Modul  Clock enable , all Modul's
1000270e:	4b05      	ldr	r3, [pc, #20]	; (10002724 <clock_init+0x60>)
10002710:	4a04      	ldr	r2, [pc, #16]	; (10002724 <clock_init+0x60>)
10002712:	68d2      	ldr	r2, [r2, #12]
10002714:	4905      	ldr	r1, [pc, #20]	; (1000272c <clock_init+0x68>)
10002716:	430a      	orrs	r2, r1
10002718:	60da      	str	r2, [r3, #12]
}
1000271a:	46bd      	mov	sp, r7
1000271c:	bd80      	pop	{r7, pc}
1000271e:	46c0      	nop			; (mov r8, r8)
10002720:	40010000 	.word	0x40010000
10002724:	40010300 	.word	0x40010300
10002728:	3ff10100 	.word	0x3ff10100
1000272c:	00000fff 	.word	0x00000fff

10002730 <pwm1_init>:
// PWM1-Ausgang P0.6 initialisieren (16-Bit),
// Hinweis: anschließend starten mit pwm1_start oder pwm1_start_interrupt
// eingestellte Periodendauer bei #define periode_pwm 50000
//----------------------------------------------------------------
void pwm1_init(void)
{
10002730:	b580      	push	{r7, lr}
10002732:	af00      	add	r7, sp, #0
	clock_init();
10002734:	f7ff ffc6 	bl	100026c4 <clock_init>
	SCU_GENERAL->CCUCON = 1;				// Enable CCU40
10002738:	4b0f      	ldr	r3, [pc, #60]	; (10002778 <pwm1_init+0x48>)
1000273a:	2201      	movs	r2, #1
1000273c:	631a      	str	r2, [r3, #48]	; 0x30
	// CCU40 Init:
	CCU40->GIDLC = 0x10F; 					// Vorteiler enable,CCU4x enable
1000273e:	4b0f      	ldr	r3, [pc, #60]	; (1000277c <pwm1_init+0x4c>)
10002740:	2210      	movs	r2, #16
10002742:	32ff      	adds	r2, #255	; 0xff
10002744:	60da      	str	r2, [r3, #12]
	CCU40_CC40->TC = 4;  					// Shadow transfer enable on clear
10002746:	4b0e      	ldr	r3, [pc, #56]	; (10002780 <pwm1_init+0x50>)
10002748:	2204      	movs	r2, #4
1000274a:	615a      	str	r2, [r3, #20]
	CCU40_CC40->PSC = 0x1;					// Vorteiler , hier 64Mhz/2
1000274c:	4b0c      	ldr	r3, [pc, #48]	; (10002780 <pwm1_init+0x50>)
1000274e:	2201      	movs	r2, #1
10002750:	625a      	str	r2, [r3, #36]	; 0x24
	CCU40_CC40->PRS = periode_pwm; 			// Period Register set, hier ca. 640 Hz
10002752:	4b0b      	ldr	r3, [pc, #44]	; (10002780 <pwm1_init+0x50>)
10002754:	4a0b      	ldr	r2, [pc, #44]	; (10002784 <pwm1_init+0x54>)
10002756:	635a      	str	r2, [r3, #52]	; 0x34

	// CCU40 Compare:  (Ausganspin P0.6)
	CCU40_CC40->CRS = 25000;				// Compare Wert,hier 1:1 Imp
10002758:	4b09      	ldr	r3, [pc, #36]	; (10002780 <pwm1_init+0x50>)
1000275a:	4a0b      	ldr	r2, [pc, #44]	; (10002788 <pwm1_init+0x58>)
1000275c:	63da      	str	r2, [r3, #60]	; 0x3c
	CCU40->GCSS = 1; 						// Shadow transfer request slice 0
1000275e:	4b07      	ldr	r3, [pc, #28]	; (1000277c <pwm1_init+0x4c>)
10002760:	2201      	movs	r2, #1
10002762:	611a      	str	r2, [r3, #16]
	//PORT0->IOCR0 = 0xA0;					// Alt4=>OUT bei P0.0
	PORT0->IOCR4 |= 0xA0<<16;				// Alt4=>OUT bei P0.6
10002764:	4b09      	ldr	r3, [pc, #36]	; (1000278c <pwm1_init+0x5c>)
10002766:	4a09      	ldr	r2, [pc, #36]	; (1000278c <pwm1_init+0x5c>)
10002768:	6952      	ldr	r2, [r2, #20]
1000276a:	21a0      	movs	r1, #160	; 0xa0
1000276c:	0409      	lsls	r1, r1, #16
1000276e:	430a      	orrs	r2, r1
10002770:	615a      	str	r2, [r3, #20]
	//CCU40_CC40->TCSET = 0x1; //starts counting
}
10002772:	46bd      	mov	sp, r7
10002774:	bd80      	pop	{r7, pc}
10002776:	46c0      	nop			; (mov r8, r8)
10002778:	40010000 	.word	0x40010000
1000277c:	48040000 	.word	0x48040000
10002780:	48040100 	.word	0x48040100
10002784:	0000c350 	.word	0x0000c350
10002788:	000061a8 	.word	0x000061a8
1000278c:	40040000 	.word	0x40040000

10002790 <pwm3_init>:
// PWM3-Ausgang P0.8 initialisieren (16-Bit)
// Hinweis: anschließend starten mit pwm3_start oder pwm3_start_interrupt
// eingestellte Periodendauer bei #define periode_pwm 50000
//---------------------------------------------------------------
void pwm3_init(void)
{
10002790:	b580      	push	{r7, lr}
10002792:	af00      	add	r7, sp, #0
	clock_init();
10002794:	f7ff ff96 	bl	100026c4 <clock_init>
	SCU_GENERAL->CCUCON = 1;			// Enable CCU40
10002798:	4b0f      	ldr	r3, [pc, #60]	; (100027d8 <pwm3_init+0x48>)
1000279a:	2201      	movs	r2, #1
1000279c:	631a      	str	r2, [r3, #48]	; 0x30
		// CCU42 Init:
	CCU40->GIDLC = 0x10F; 				// Vorteiler enable,CCU4x enable
1000279e:	4b0f      	ldr	r3, [pc, #60]	; (100027dc <pwm3_init+0x4c>)
100027a0:	2210      	movs	r2, #16
100027a2:	32ff      	adds	r2, #255	; 0xff
100027a4:	60da      	str	r2, [r3, #12]
	CCU40_CC42->TC = 4;  				// Shadow transfer enable on clear
100027a6:	4b0e      	ldr	r3, [pc, #56]	; (100027e0 <pwm3_init+0x50>)
100027a8:	2204      	movs	r2, #4
100027aa:	615a      	str	r2, [r3, #20]
	CCU40_CC42->PSC = 0x1;				// Vorteiler , hier 64Mhz/2
100027ac:	4b0c      	ldr	r3, [pc, #48]	; (100027e0 <pwm3_init+0x50>)
100027ae:	2201      	movs	r2, #1
100027b0:	625a      	str	r2, [r3, #36]	; 0x24
	CCU40_CC42->PRS = periode_pwm; 		// Period Register set , hier ca. 640 Hz
100027b2:	4b0b      	ldr	r3, [pc, #44]	; (100027e0 <pwm3_init+0x50>)
100027b4:	4a0b      	ldr	r2, [pc, #44]	; (100027e4 <pwm3_init+0x54>)
100027b6:	635a      	str	r2, [r3, #52]	; 0x34

	// CCU40 Compare:  (Ausganspin P0.8)
	CCU40_CC42->CRS = 25000;			// Compare Wert,hier 1:1 Imp
100027b8:	4b09      	ldr	r3, [pc, #36]	; (100027e0 <pwm3_init+0x50>)
100027ba:	4a0b      	ldr	r2, [pc, #44]	; (100027e8 <pwm3_init+0x58>)
100027bc:	63da      	str	r2, [r3, #60]	; 0x3c
	CCU40->GCSS = 1<<8; 				// Shadow transfer request slice 2
100027be:	4b07      	ldr	r3, [pc, #28]	; (100027dc <pwm3_init+0x4c>)
100027c0:	2280      	movs	r2, #128	; 0x80
100027c2:	0052      	lsls	r2, r2, #1
100027c4:	611a      	str	r2, [r3, #16]
	//PORT0->IOCR0 |= 0xA0 << 16;		// Alt4=>OUT bei P0.2
	PORT0->IOCR8 |= 0xA0;				// Alt4=>OUT bei P0.8
100027c6:	4b09      	ldr	r3, [pc, #36]	; (100027ec <pwm3_init+0x5c>)
100027c8:	4a08      	ldr	r2, [pc, #32]	; (100027ec <pwm3_init+0x5c>)
100027ca:	6992      	ldr	r2, [r2, #24]
100027cc:	21a0      	movs	r1, #160	; 0xa0
100027ce:	430a      	orrs	r2, r1
100027d0:	619a      	str	r2, [r3, #24]
}
100027d2:	46bd      	mov	sp, r7
100027d4:	bd80      	pop	{r7, pc}
100027d6:	46c0      	nop			; (mov r8, r8)
100027d8:	40010000 	.word	0x40010000
100027dc:	48040000 	.word	0x48040000
100027e0:	48040300 	.word	0x48040300
100027e4:	0000c350 	.word	0x0000c350
100027e8:	000061a8 	.word	0x000061a8
100027ec:	40040000 	.word	0x40040000

100027f0 <pwm1_duty_cycle>:
// 16-Bit-Comparewert einstellen, der den Tastgrad des PWM-Singals verändert
// eingestellte Periodendauer bei #define periode_pwm 50000
// compare = 0...50000, Tastgrad 50% bei compare = 25000
//---------------------------------------------------------------
void pwm1_duty_cycle (uint16_t compare)
{
100027f0:	b580      	push	{r7, lr}
100027f2:	b082      	sub	sp, #8
100027f4:	af00      	add	r7, sp, #0
100027f6:	1c02      	adds	r2, r0, #0
100027f8:	1dbb      	adds	r3, r7, #6
100027fa:	801a      	strh	r2, [r3, #0]
	CCU40_CC40->CRS = compare; 	// Compare Wert, hier 1:1 Imp
100027fc:	4b06      	ldr	r3, [pc, #24]	; (10002818 <pwm1_duty_cycle+0x28>)
100027fe:	1dba      	adds	r2, r7, #6
10002800:	8812      	ldrh	r2, [r2, #0]
10002802:	63da      	str	r2, [r3, #60]	; 0x3c
	CCU40->GCSS |= 1; 					// Shadow transfer request slice 0
10002804:	4b05      	ldr	r3, [pc, #20]	; (1000281c <pwm1_duty_cycle+0x2c>)
10002806:	4a05      	ldr	r2, [pc, #20]	; (1000281c <pwm1_duty_cycle+0x2c>)
10002808:	6912      	ldr	r2, [r2, #16]
1000280a:	2101      	movs	r1, #1
1000280c:	430a      	orrs	r2, r1
1000280e:	611a      	str	r2, [r3, #16]
}
10002810:	46bd      	mov	sp, r7
10002812:	b002      	add	sp, #8
10002814:	bd80      	pop	{r7, pc}
10002816:	46c0      	nop			; (mov r8, r8)
10002818:	48040100 	.word	0x48040100
1000281c:	48040000 	.word	0x48040000

10002820 <pwm3_duty_cycle>:
// 16-Bit-Comparewert einstellen, der den Tastgrad des PWM-Singals verändert
// eingestellte Periodendauer bei #define periode_pwm 50000
// compare = 0...50000, Tastgrad 50% bei compare = 25000
//---------------------------------------------------------------
void pwm3_duty_cycle (uint16_t compare)
{
10002820:	b580      	push	{r7, lr}
10002822:	b082      	sub	sp, #8
10002824:	af00      	add	r7, sp, #0
10002826:	1c02      	adds	r2, r0, #0
10002828:	1dbb      	adds	r3, r7, #6
1000282a:	801a      	strh	r2, [r3, #0]
	CCU40_CC42->CRS = compare;	// Compare Wert,hier 1:1 Imp
1000282c:	4b06      	ldr	r3, [pc, #24]	; (10002848 <pwm3_duty_cycle+0x28>)
1000282e:	1dba      	adds	r2, r7, #6
10002830:	8812      	ldrh	r2, [r2, #0]
10002832:	63da      	str	r2, [r3, #60]	; 0x3c
	CCU40->GCSS |= 1<<8; 				// Shadow transfer request slice 2
10002834:	4b05      	ldr	r3, [pc, #20]	; (1000284c <pwm3_duty_cycle+0x2c>)
10002836:	4a05      	ldr	r2, [pc, #20]	; (1000284c <pwm3_duty_cycle+0x2c>)
10002838:	6912      	ldr	r2, [r2, #16]
1000283a:	2180      	movs	r1, #128	; 0x80
1000283c:	0049      	lsls	r1, r1, #1
1000283e:	430a      	orrs	r2, r1
10002840:	611a      	str	r2, [r3, #16]
}
10002842:	46bd      	mov	sp, r7
10002844:	b002      	add	sp, #8
10002846:	bd80      	pop	{r7, pc}
10002848:	48040300 	.word	0x48040300
1000284c:	48040000 	.word	0x48040000

10002850 <pwm1_start>:
}
//----------------------------------------------------------------
// PWM1-Ausgang P0.6 Ausgabe starten ohne Interrupt starten, 8- oder 16-Bit
//----------------------------------------------------------------
void pwm1_start(void)
{
10002850:	b580      	push	{r7, lr}
10002852:	af00      	add	r7, sp, #0
	 CCU40_CC40->TCSET = 0x1; //starts counting
10002854:	4b02      	ldr	r3, [pc, #8]	; (10002860 <pwm1_start+0x10>)
10002856:	2201      	movs	r2, #1
10002858:	60da      	str	r2, [r3, #12]
}
1000285a:	46bd      	mov	sp, r7
1000285c:	bd80      	pop	{r7, pc}
1000285e:	46c0      	nop			; (mov r8, r8)
10002860:	48040100 	.word	0x48040100

10002864 <pwm3_start>:
}
//----------------------------------------------------------------
// PWM3-Ausgang P0.8 Ausgabe starten ohne Interrupt starten
//----------------------------------------------------------------
void pwm3_start(void)
{
10002864:	b580      	push	{r7, lr}
10002866:	af00      	add	r7, sp, #0
	 CCU40_CC42->TCSET = 0x1; //starts counting
10002868:	4b02      	ldr	r3, [pc, #8]	; (10002874 <pwm3_start+0x10>)
1000286a:	2201      	movs	r2, #1
1000286c:	60da      	str	r2, [r3, #12]
}
1000286e:	46bd      	mov	sp, r7
10002870:	bd80      	pop	{r7, pc}
10002872:	46c0      	nop			; (mov r8, r8)
10002874:	48040300 	.word	0x48040300

10002878 <delay_100us>:
}
//---------------------------------------------------------------
// Zeitverzögerung n mal 100µs
//---------------------------------------------------------------
void delay_100us (uint8_t n)
{
10002878:	b580      	push	{r7, lr}
1000287a:	b084      	sub	sp, #16
1000287c:	af00      	add	r7, sp, #0
1000287e:	1c02      	adds	r2, r0, #0
10002880:	1dfb      	adds	r3, r7, #7
10002882:	701a      	strb	r2, [r3, #0]
	volatile uint16_t z;
	for (;n != 0;--n)
10002884:	e018      	b.n	100028b8 <delay_100us+0x40>
		for (z = _T_CONST_; 	z!= 0; 	--z);
10002886:	230e      	movs	r3, #14
10002888:	18fb      	adds	r3, r7, r3
1000288a:	226d      	movs	r2, #109	; 0x6d
1000288c:	801a      	strh	r2, [r3, #0]
1000288e:	e008      	b.n	100028a2 <delay_100us+0x2a>
10002890:	230e      	movs	r3, #14
10002892:	18fb      	adds	r3, r7, r3
10002894:	881b      	ldrh	r3, [r3, #0]
10002896:	b29b      	uxth	r3, r3
10002898:	3b01      	subs	r3, #1
1000289a:	b29a      	uxth	r2, r3
1000289c:	230e      	movs	r3, #14
1000289e:	18fb      	adds	r3, r7, r3
100028a0:	801a      	strh	r2, [r3, #0]
100028a2:	230e      	movs	r3, #14
100028a4:	18fb      	adds	r3, r7, r3
100028a6:	881b      	ldrh	r3, [r3, #0]
100028a8:	b29b      	uxth	r3, r3
100028aa:	2b00      	cmp	r3, #0
100028ac:	d1f0      	bne.n	10002890 <delay_100us+0x18>
// Zeitverzögerung n mal 100µs
//---------------------------------------------------------------
void delay_100us (uint8_t n)
{
	volatile uint16_t z;
	for (;n != 0;--n)
100028ae:	1dfb      	adds	r3, r7, #7
100028b0:	1dfa      	adds	r2, r7, #7
100028b2:	7812      	ldrb	r2, [r2, #0]
100028b4:	3a01      	subs	r2, #1
100028b6:	701a      	strb	r2, [r3, #0]
100028b8:	1dfb      	adds	r3, r7, #7
100028ba:	781b      	ldrb	r3, [r3, #0]
100028bc:	2b00      	cmp	r3, #0
100028be:	d1e2      	bne.n	10002886 <delay_100us+0xe>
		for (z = _T_CONST_; 	z!= 0; 	--z);
}
100028c0:	46bd      	mov	sp, r7
100028c2:	b004      	add	sp, #16
100028c4:	bd80      	pop	{r7, pc}
100028c6:	46c0      	nop			; (mov r8, r8)

100028c8 <delay_ms>:

//---------------------------------------------------------------
// Zeitverzögerung Millisekunden
//---------------------------------------------------------------
void delay_ms( uint16_t millisekunden)
{
100028c8:	b580      	push	{r7, lr}
100028ca:	b084      	sub	sp, #16
100028cc:	af00      	add	r7, sp, #0
100028ce:	1c02      	adds	r2, r0, #0
100028d0:	1dbb      	adds	r3, r7, #6
100028d2:	801a      	strh	r2, [r3, #0]
	volatile uint16_t n = 0;
100028d4:	230e      	movs	r3, #14
100028d6:	18fb      	adds	r3, r7, r3
100028d8:	2200      	movs	r2, #0
100028da:	801a      	strh	r2, [r3, #0]

	while(n < millisekunden)
100028dc:	e00b      	b.n	100028f6 <delay_ms+0x2e>
	{
		delay_100us(10);
100028de:	200a      	movs	r0, #10
100028e0:	f7ff ffca 	bl	10002878 <delay_100us>
		n++;
100028e4:	230e      	movs	r3, #14
100028e6:	18fb      	adds	r3, r7, r3
100028e8:	881b      	ldrh	r3, [r3, #0]
100028ea:	b29b      	uxth	r3, r3
100028ec:	3301      	adds	r3, #1
100028ee:	b29a      	uxth	r2, r3
100028f0:	230e      	movs	r3, #14
100028f2:	18fb      	adds	r3, r7, r3
100028f4:	801a      	strh	r2, [r3, #0]
//---------------------------------------------------------------
void delay_ms( uint16_t millisekunden)
{
	volatile uint16_t n = 0;

	while(n < millisekunden)
100028f6:	230e      	movs	r3, #14
100028f8:	18fb      	adds	r3, r7, r3
100028fa:	881b      	ldrh	r3, [r3, #0]
100028fc:	b29b      	uxth	r3, r3
100028fe:	1dba      	adds	r2, r7, #6
10002900:	8812      	ldrh	r2, [r2, #0]
10002902:	429a      	cmp	r2, r3
10002904:	d8eb      	bhi.n	100028de <delay_ms+0x16>
	{
		delay_100us(10);
		n++;
	}
}
10002906:	46bd      	mov	sp, r7
10002908:	b004      	add	sp, #16
1000290a:	bd80      	pop	{r7, pc}

1000290c <rs232_init>:
// Serielle Schnittstelle initialisieren
// RxD auf P1.3 , XMC1100 TxD auf P1.2, 9600 Baud, 8N1
// über USB als virtuelle Schnittstelle COM x am PC verwendbar
//---------------------------------------------------------------
void rs232_init ( void )
{	//USIC0 Cannel 1 wird verwendet:
1000290c:	b580      	push	{r7, lr}
1000290e:	af00      	add	r7, sp, #0
	SCU_GENERAL->PASSWD = 0x000000C0UL;
10002910:	4b59      	ldr	r3, [pc, #356]	; (10002a78 <rs232_init+0x16c>)
10002912:	22c0      	movs	r2, #192	; 0xc0
10002914:	625a      	str	r2, [r3, #36]	; 0x24
	SCU_CLK->CGATCLR0 |= 0x00000008;		// stop gating USIC
10002916:	4b59      	ldr	r3, [pc, #356]	; (10002a7c <rs232_init+0x170>)
10002918:	4a58      	ldr	r2, [pc, #352]	; (10002a7c <rs232_init+0x170>)
1000291a:	6912      	ldr	r2, [r2, #16]
1000291c:	2108      	movs	r1, #8
1000291e:	430a      	orrs	r2, r1
10002920:	611a      	str	r2, [r3, #16]
		while((SCU_CLK->CLKCR)&0x40000000UL);	// wait for VDDC to stabilize
10002922:	46c0      	nop			; (mov r8, r8)
10002924:	4b55      	ldr	r3, [pc, #340]	; (10002a7c <rs232_init+0x170>)
10002926:	681a      	ldr	r2, [r3, #0]
10002928:	2380      	movs	r3, #128	; 0x80
1000292a:	05db      	lsls	r3, r3, #23
1000292c:	4013      	ands	r3, r2
1000292e:	d1f9      	bne.n	10002924 <rs232_init+0x18>
	SCU_GENERAL->PASSWD = 0x000000C3UL;
10002930:	4b51      	ldr	r3, [pc, #324]	; (10002a78 <rs232_init+0x16c>)
10002932:	22c3      	movs	r2, #195	; 0xc3
10002934:	625a      	str	r2, [r3, #36]	; 0x24

	USIC0_CH1->KSCFG |= 3UL ;	//  Mode enable + Freigabe write
10002936:	4b52      	ldr	r3, [pc, #328]	; (10002a80 <rs232_init+0x174>)
10002938:	4a51      	ldr	r2, [pc, #324]	; (10002a80 <rs232_init+0x174>)
1000293a:	68d2      	ldr	r2, [r2, #12]
1000293c:	2103      	movs	r1, #3
1000293e:	430a      	orrs	r2, r1
10002940:	60da      	str	r2, [r3, #12]
	//WR_REG(USIC0_CH1->FDR, USIC_CH_FDR_DM_Msk, USIC_CH_FDR_DM_Pos, 2);
	USIC0_CH1->FDR |= 1UL << 15 ;	//Fractional divider mode selected
10002942:	4b4f      	ldr	r3, [pc, #316]	; (10002a80 <rs232_init+0x174>)
10002944:	4a4e      	ldr	r2, [pc, #312]	; (10002a80 <rs232_init+0x174>)
10002946:	6912      	ldr	r2, [r2, #16]
10002948:	2180      	movs	r1, #128	; 0x80
1000294a:	0209      	lsls	r1, r1, #8
1000294c:	430a      	orrs	r2, r1
1000294e:	611a      	str	r2, [r3, #16]
		//Step value
	USIC0_CH1->FDR|= FDR_STEP ;
10002950:	4b4b      	ldr	r3, [pc, #300]	; (10002a80 <rs232_init+0x174>)
10002952:	4a4b      	ldr	r2, [pc, #300]	; (10002a80 <rs232_init+0x174>)
10002954:	6912      	ldr	r2, [r2, #16]
10002956:	2176      	movs	r1, #118	; 0x76
10002958:	430a      	orrs	r2, r1
1000295a:	611a      	str	r2, [r3, #16]
		//Vorteiler:
		// Baudrate = 32 MHz * Step/1024 * 1/(PDIV +1)  * 1/ (PCTQ +1) * 1/ (DCTQ +1)
	USIC0_CH1->BRG |= (BRG_PDIV << 16) ;
1000295c:	4b48      	ldr	r3, [pc, #288]	; (10002a80 <rs232_init+0x174>)
1000295e:	4a48      	ldr	r2, [pc, #288]	; (10002a80 <rs232_init+0x174>)
10002960:	6952      	ldr	r2, [r2, #20]
10002962:	21b8      	movs	r1, #184	; 0xb8
10002964:	0349      	lsls	r1, r1, #13
10002966:	430a      	orrs	r2, r1
10002968:	615a      	str	r2, [r3, #20]
	USIC0_CH1->BRG |= BRG_DCTQ << 10 ;
1000296a:	4b45      	ldr	r3, [pc, #276]	; (10002a80 <rs232_init+0x174>)
1000296c:	4a44      	ldr	r2, [pc, #272]	; (10002a80 <rs232_init+0x174>)
1000296e:	6952      	ldr	r2, [r2, #20]
10002970:	21f0      	movs	r1, #240	; 0xf0
10002972:	0189      	lsls	r1, r1, #6
10002974:	430a      	orrs	r2, r1
10002976:	615a      	str	r2, [r3, #20]
	USIC0_CH1->BRG |= BRG_PCTQ << 8 ;
10002978:	4b41      	ldr	r3, [pc, #260]	; (10002a80 <rs232_init+0x174>)
1000297a:	4a41      	ldr	r2, [pc, #260]	; (10002a80 <rs232_init+0x174>)
1000297c:	6952      	ldr	r2, [r2, #20]
1000297e:	615a      	str	r2, [r3, #20]

		//Configuration of USIC Shift Control
		//Transmit/Receive LSB first is selected, Transmission Mode (TRM) = 1, Passive Data Level (PDL) = 1
	WR_REG(USIC0_CH1->SCTR, USIC_CH_SCTR_PDL_Msk, USIC_CH_SCTR_PDL_Pos, 1);
10002980:	4b3f      	ldr	r3, [pc, #252]	; (10002a80 <rs232_init+0x174>)
10002982:	4a3f      	ldr	r2, [pc, #252]	; (10002a80 <rs232_init+0x174>)
10002984:	6b52      	ldr	r2, [r2, #52]	; 0x34
10002986:	2102      	movs	r1, #2
10002988:	430a      	orrs	r2, r1
1000298a:	635a      	str	r2, [r3, #52]	; 0x34
	WR_REG(USIC0_CH1->SCTR, USIC_CH_SCTR_TRM_Msk, USIC_CH_SCTR_TRM_Pos, 1);
1000298c:	4b3c      	ldr	r3, [pc, #240]	; (10002a80 <rs232_init+0x174>)
1000298e:	4a3c      	ldr	r2, [pc, #240]	; (10002a80 <rs232_init+0x174>)
10002990:	6b52      	ldr	r2, [r2, #52]	; 0x34
10002992:	493c      	ldr	r1, [pc, #240]	; (10002a84 <rs232_init+0x178>)
10002994:	400a      	ands	r2, r1
10002996:	2180      	movs	r1, #128	; 0x80
10002998:	0049      	lsls	r1, r1, #1
1000299a:	430a      	orrs	r2, r1
1000299c:	635a      	str	r2, [r3, #52]	; 0x34
		//Set Word Length (WLE) & Frame Length (FLE)
	WR_REG(USIC0_CH1->SCTR, USIC_CH_SCTR_FLE_Msk, USIC_CH_SCTR_FLE_Pos, 7);
1000299e:	4b38      	ldr	r3, [pc, #224]	; (10002a80 <rs232_init+0x174>)
100029a0:	4a37      	ldr	r2, [pc, #220]	; (10002a80 <rs232_init+0x174>)
100029a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
100029a4:	4938      	ldr	r1, [pc, #224]	; (10002a88 <rs232_init+0x17c>)
100029a6:	400a      	ands	r2, r1
100029a8:	21e0      	movs	r1, #224	; 0xe0
100029aa:	02c9      	lsls	r1, r1, #11
100029ac:	430a      	orrs	r2, r1
100029ae:	635a      	str	r2, [r3, #52]	; 0x34
	WR_REG(USIC0_CH1->SCTR, USIC_CH_SCTR_WLE_Msk, USIC_CH_SCTR_WLE_Pos, 7);
100029b0:	4b33      	ldr	r3, [pc, #204]	; (10002a80 <rs232_init+0x174>)
100029b2:	4a33      	ldr	r2, [pc, #204]	; (10002a80 <rs232_init+0x174>)
100029b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
100029b6:	4935      	ldr	r1, [pc, #212]	; (10002a8c <rs232_init+0x180>)
100029b8:	400a      	ands	r2, r1
100029ba:	21e0      	movs	r1, #224	; 0xe0
100029bc:	04c9      	lsls	r1, r1, #19
100029be:	430a      	orrs	r2, r1
100029c0:	635a      	str	r2, [r3, #52]	; 0x34

		//Configuration of USIC Transmit Control/Status Register
		//TBUF Data Enable (TDEN) = 1, TBUF Data Single Shot Mode (TDSSM) = 1
	WR_REG(USIC0_CH1->TCSR, USIC_CH_TCSR_TDEN_Msk, USIC_CH_TCSR_TDEN_Pos, 1);
100029c2:	4b2f      	ldr	r3, [pc, #188]	; (10002a80 <rs232_init+0x174>)
100029c4:	4a2e      	ldr	r2, [pc, #184]	; (10002a80 <rs232_init+0x174>)
100029c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
100029c8:	4931      	ldr	r1, [pc, #196]	; (10002a90 <rs232_init+0x184>)
100029ca:	400a      	ands	r2, r1
100029cc:	2180      	movs	r1, #128	; 0x80
100029ce:	00c9      	lsls	r1, r1, #3
100029d0:	430a      	orrs	r2, r1
100029d2:	639a      	str	r2, [r3, #56]	; 0x38
	WR_REG(USIC0_CH1->TCSR, USIC_CH_TCSR_TDSSM_Msk, USIC_CH_TCSR_TDSSM_Pos, 1);
100029d4:	4b2a      	ldr	r3, [pc, #168]	; (10002a80 <rs232_init+0x174>)
100029d6:	4a2a      	ldr	r2, [pc, #168]	; (10002a80 <rs232_init+0x174>)
100029d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
100029da:	2180      	movs	r1, #128	; 0x80
100029dc:	0049      	lsls	r1, r1, #1
100029de:	430a      	orrs	r2, r1
100029e0:	639a      	str	r2, [r3, #56]	; 0x38

		//Configuration of Protocol Control Register
		//Sample Mode (SMD) = 1, 1 Stop bit is selected, Sample Point (SP) = 2, Pulse Length (PL) = 0
	WR_REG(USIC0_CH1->PCR_ASCMode, USIC_CH_PCR_ASCMode_SMD_Msk,
100029e2:	4b27      	ldr	r3, [pc, #156]	; (10002a80 <rs232_init+0x174>)
100029e4:	4a26      	ldr	r2, [pc, #152]	; (10002a80 <rs232_init+0x174>)
100029e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
100029e8:	2101      	movs	r1, #1
100029ea:	430a      	orrs	r2, r1
100029ec:	63da      	str	r2, [r3, #60]	; 0x3c
				USIC_CH_PCR_ASCMode_SMD_Pos, 1);
	WR_REG(USIC0_CH1->PCR_ASCMode, USIC_CH_PCR_ASCMode_STPB_Msk, USIC_CH_PCR_ASCMode_STPB_Pos, 0);
100029ee:	4b24      	ldr	r3, [pc, #144]	; (10002a80 <rs232_init+0x174>)
100029f0:	4a23      	ldr	r2, [pc, #140]	; (10002a80 <rs232_init+0x174>)
100029f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
100029f4:	2102      	movs	r1, #2
100029f6:	438a      	bics	r2, r1
100029f8:	63da      	str	r2, [r3, #60]	; 0x3c
	WR_REG(USIC0_CH1->PCR_ASCMode, USIC_CH_PCR_ASCMode_SP_Msk, USIC_CH_PCR_ASCMode_SP_Pos, 9);
100029fa:	4b21      	ldr	r3, [pc, #132]	; (10002a80 <rs232_init+0x174>)
100029fc:	4a20      	ldr	r2, [pc, #128]	; (10002a80 <rs232_init+0x174>)
100029fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
10002a00:	4924      	ldr	r1, [pc, #144]	; (10002a94 <rs232_init+0x188>)
10002a02:	400a      	ands	r2, r1
10002a04:	2190      	movs	r1, #144	; 0x90
10002a06:	0109      	lsls	r1, r1, #4
10002a08:	430a      	orrs	r2, r1
10002a0a:	63da      	str	r2, [r3, #60]	; 0x3c
		//TBIF is set to simplify polling
	WR_REG(USIC0_CH1->PSR_ASCMode, USIC_CH_PSR_TBIF_Msk, USIC_CH_PSR_TBIF_Pos, 1);
10002a0c:	4b1c      	ldr	r3, [pc, #112]	; (10002a80 <rs232_init+0x174>)
10002a0e:	4a1c      	ldr	r2, [pc, #112]	; (10002a80 <rs232_init+0x174>)
10002a10:	6c92      	ldr	r2, [r2, #72]	; 0x48
10002a12:	2180      	movs	r1, #128	; 0x80
10002a14:	0189      	lsls	r1, r1, #6
10002a16:	430a      	orrs	r2, r1
10002a18:	649a      	str	r2, [r3, #72]	; 0x48
		//Configuration of Transmitter Buffer Control Register
	WR_REG(USIC0_CH1->TBCTR, USIC_CH_TBCTR_LIMIT_Msk, USIC_CH_TBCTR_LIMIT_Pos, 0);
10002a1a:	4919      	ldr	r1, [pc, #100]	; (10002a80 <rs232_init+0x174>)
10002a1c:	4a18      	ldr	r2, [pc, #96]	; (10002a80 <rs232_init+0x174>)
10002a1e:	2384      	movs	r3, #132	; 0x84
10002a20:	005b      	lsls	r3, r3, #1
10002a22:	58d3      	ldr	r3, [r2, r3]
10002a24:	4a1c      	ldr	r2, [pc, #112]	; (10002a98 <rs232_init+0x18c>)
10002a26:	401a      	ands	r2, r3
10002a28:	2384      	movs	r3, #132	; 0x84
10002a2a:	005b      	lsls	r3, r3, #1
10002a2c:	50ca      	str	r2, [r1, r3]

		//Configuration of Channel Control Register
		//parity generation is disabled
	USIC0_CH1->CCR |=  0x02;	// ASC Mode
10002a2e:	4b14      	ldr	r3, [pc, #80]	; (10002a80 <rs232_init+0x174>)
10002a30:	4a13      	ldr	r2, [pc, #76]	; (10002a80 <rs232_init+0x174>)
10002a32:	6c12      	ldr	r2, [r2, #64]	; 0x40
10002a34:	2102      	movs	r1, #2
10002a36:	430a      	orrs	r2, r1
10002a38:	641a      	str	r2, [r3, #64]	; 0x40

		//Data Pointer & Buffer Size for Transmitter Buffer Control - DPTR = 64,  SIZE = 6
	WR_REG(USIC0_CH1->TBCTR, USIC_CH_TBCTR_DPTRSIZE_Msk, USIC_CH_TBCTR_DPTRSIZE_Pos, 0x06000040);
10002a3a:	4911      	ldr	r1, [pc, #68]	; (10002a80 <rs232_init+0x174>)
10002a3c:	4a10      	ldr	r2, [pc, #64]	; (10002a80 <rs232_init+0x174>)
10002a3e:	2384      	movs	r3, #132	; 0x84
10002a40:	005b      	lsls	r3, r3, #1
10002a42:	58d3      	ldr	r3, [r2, r3]
10002a44:	4a15      	ldr	r2, [pc, #84]	; (10002a9c <rs232_init+0x190>)
10002a46:	4013      	ands	r3, r2
10002a48:	22c0      	movs	r2, #192	; 0xc0
10002a4a:	04d2      	lsls	r2, r2, #19
10002a4c:	431a      	orrs	r2, r3
10002a4e:	2384      	movs	r3, #132	; 0x84
10002a50:	005b      	lsls	r3, r3, #1
10002a52:	50ca      	str	r2, [r1, r3]
		// Rx Pin:
	USIC0_CH1->DX0CR = 0x00;	// Kanal: USIC0_CH1 => DXnB auf P1.3 ( siehe Pin Mapping)
10002a54:	4b0a      	ldr	r3, [pc, #40]	; (10002a80 <rs232_init+0x174>)
10002a56:	2200      	movs	r2, #0
10002a58:	61da      	str	r2, [r3, #28]
	PORT1->IOCR0  |= 0b10111 << 19 ; // ALT 7 fuer P1.2 => TxD d.h. XMC1100 sendet auf P1.2
10002a5a:	4b11      	ldr	r3, [pc, #68]	; (10002aa0 <rs232_init+0x194>)
10002a5c:	4a10      	ldr	r2, [pc, #64]	; (10002aa0 <rs232_init+0x194>)
10002a5e:	6912      	ldr	r2, [r2, #16]
10002a60:	21b8      	movs	r1, #184	; 0xb8
10002a62:	0409      	lsls	r1, r1, #16
10002a64:	430a      	orrs	r2, r1
10002a66:	611a      	str	r2, [r3, #16]
	PORT1->IOCR0 &= 0x00ffffff;	// P1.3 => INPUT =>  RxD
10002a68:	4b0d      	ldr	r3, [pc, #52]	; (10002aa0 <rs232_init+0x194>)
10002a6a:	4a0d      	ldr	r2, [pc, #52]	; (10002aa0 <rs232_init+0x194>)
10002a6c:	6912      	ldr	r2, [r2, #16]
10002a6e:	0212      	lsls	r2, r2, #8
10002a70:	0a12      	lsrs	r2, r2, #8
10002a72:	611a      	str	r2, [r3, #16]
}
10002a74:	46bd      	mov	sp, r7
10002a76:	bd80      	pop	{r7, pc}
10002a78:	40010000 	.word	0x40010000
10002a7c:	40010300 	.word	0x40010300
10002a80:	48000200 	.word	0x48000200
10002a84:	fffffcff 	.word	0xfffffcff
10002a88:	ffc0ffff 	.word	0xffc0ffff
10002a8c:	f0ffffff 	.word	0xf0ffffff
10002a90:	fffff3ff 	.word	0xfffff3ff
10002a94:	ffffe0ff 	.word	0xffffe0ff
10002a98:	ffffc0ff 	.word	0xffffc0ff
10002a9c:	f8ffffc0 	.word	0xf8ffffc0
10002aa0:	40040100 	.word	0x40040100

10002aa4 <rs232_interrupt_enable>:
	PORT1->IOCR0  |= 0b10111 << 19 ; // ALT 7 fuer P1.2 => TxD d.h. XMC1100 sendet auf P1.2
	PORT1->IOCR0 &= 0x00ffffff;	// P1.3 => INPUT =>  RxD
}

void rs232_interrupt_enable()
{
10002aa4:	b580      	push	{r7, lr}
10002aa6:	af00      	add	r7, sp, #0
	USIC0_CH1->CCR  |=0x00004000;
10002aa8:	4b0c      	ldr	r3, [pc, #48]	; (10002adc <rs232_interrupt_enable+0x38>)
10002aaa:	4a0c      	ldr	r2, [pc, #48]	; (10002adc <rs232_interrupt_enable+0x38>)
10002aac:	6c12      	ldr	r2, [r2, #64]	; 0x40
10002aae:	2180      	movs	r1, #128	; 0x80
10002ab0:	01c9      	lsls	r1, r1, #7
10002ab2:	430a      	orrs	r2, r1
10002ab4:	641a      	str	r2, [r3, #64]	; 0x40
	USIC0_CH1->INPR &=0xFFFFF8FF;
10002ab6:	4b09      	ldr	r3, [pc, #36]	; (10002adc <rs232_interrupt_enable+0x38>)
10002ab8:	4a08      	ldr	r2, [pc, #32]	; (10002adc <rs232_interrupt_enable+0x38>)
10002aba:	6992      	ldr	r2, [r2, #24]
10002abc:	4908      	ldr	r1, [pc, #32]	; (10002ae0 <rs232_interrupt_enable+0x3c>)
10002abe:	400a      	ands	r2, r1
10002ac0:	619a      	str	r2, [r3, #24]
	USIC0_CH1->PSCR |=0x00000400;
10002ac2:	4b06      	ldr	r3, [pc, #24]	; (10002adc <rs232_interrupt_enable+0x38>)
10002ac4:	4a05      	ldr	r2, [pc, #20]	; (10002adc <rs232_interrupt_enable+0x38>)
10002ac6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
10002ac8:	2180      	movs	r1, #128	; 0x80
10002aca:	00c9      	lsls	r1, r1, #3
10002acc:	430a      	orrs	r2, r1
10002ace:	64da      	str	r2, [r3, #76]	; 0x4c
	//NVIC_EnableIRQ(USIC0_0_IRQn); 	// Int Freigabe  SR0 für empfange Zeichen
	NVIC_EnableIRQ(9); 	// Int Freigabe  SR0 für empfange Zeichen
10002ad0:	2009      	movs	r0, #9
10002ad2:	f7fe fd7b 	bl	100015cc <__NVIC_EnableIRQ>
}
10002ad6:	46bd      	mov	sp, r7
10002ad8:	bd80      	pop	{r7, pc}
10002ada:	46c0      	nop			; (mov r8, r8)
10002adc:	48000200 	.word	0x48000200
10002ae0:	fffff8ff 	.word	0xfffff8ff

10002ae4 <rs232_put>:
}
//---------------------------------------------------------------
// schreibt ein Byte auf COM
//---------------------------------------------------------------
void rs232_put ( char value )
{
10002ae4:	b580      	push	{r7, lr}
10002ae6:	b082      	sub	sp, #8
10002ae8:	af00      	add	r7, sp, #0
10002aea:	1c02      	adds	r2, r0, #0
10002aec:	1dfb      	adds	r3, r7, #7
10002aee:	701a      	strb	r2, [r3, #0]
	USIC0_CH1->IN[0] = value;
10002af0:	4908      	ldr	r1, [pc, #32]	; (10002b14 <rs232_put+0x30>)
10002af2:	1dfb      	adds	r3, r7, #7
10002af4:	781a      	ldrb	r2, [r3, #0]
10002af6:	23c0      	movs	r3, #192	; 0xc0
10002af8:	005b      	lsls	r3, r3, #1
10002afa:	50ca      	str	r2, [r1, r3]
	while((USIC0_CH1->TRBSR & (1U<< 11))  == 0);  // Warten , falls Transmit Buffer empty
10002afc:	46c0      	nop			; (mov r8, r8)
10002afe:	4a05      	ldr	r2, [pc, #20]	; (10002b14 <rs232_put+0x30>)
10002b00:	238a      	movs	r3, #138	; 0x8a
10002b02:	005b      	lsls	r3, r3, #1
10002b04:	58d2      	ldr	r2, [r2, r3]
10002b06:	2380      	movs	r3, #128	; 0x80
10002b08:	011b      	lsls	r3, r3, #4
10002b0a:	4013      	ands	r3, r2
10002b0c:	d0f7      	beq.n	10002afe <rs232_put+0x1a>

}
10002b0e:	46bd      	mov	sp, r7
10002b10:	b002      	add	sp, #8
10002b12:	bd80      	pop	{r7, pc}
10002b14:	48000200 	.word	0x48000200

10002b18 <rs232_print>:
//---------------------------------------------------------------
// schreibt eine nullterminierte Zeichenfolge auf COM
//---------------------------------------------------------------
void rs232_print ( char *text )
{
10002b18:	b580      	push	{r7, lr}
10002b1a:	b082      	sub	sp, #8
10002b1c:	af00      	add	r7, sp, #0
10002b1e:	6078      	str	r0, [r7, #4]
  while (*text != '\0')
10002b20:	e006      	b.n	10002b30 <rs232_print+0x18>
    rs232_put(*text++);
10002b22:	687b      	ldr	r3, [r7, #4]
10002b24:	1c5a      	adds	r2, r3, #1
10002b26:	607a      	str	r2, [r7, #4]
10002b28:	781b      	ldrb	r3, [r3, #0]
10002b2a:	1c18      	adds	r0, r3, #0
10002b2c:	f7ff ffda 	bl	10002ae4 <rs232_put>
//---------------------------------------------------------------
// schreibt eine nullterminierte Zeichenfolge auf COM
//---------------------------------------------------------------
void rs232_print ( char *text )
{
  while (*text != '\0')
10002b30:	687b      	ldr	r3, [r7, #4]
10002b32:	781b      	ldrb	r3, [r3, #0]
10002b34:	2b00      	cmp	r3, #0
10002b36:	d1f4      	bne.n	10002b22 <rs232_print+0xa>
    rs232_put(*text++);
}
10002b38:	46bd      	mov	sp, r7
10002b3a:	b002      	add	sp, #8
10002b3c:	bd80      	pop	{r7, pc}
10002b3e:	46c0      	nop			; (mov r8, r8)

10002b40 <USIC0_0_IRQHandler>:
* rs232_wait_of_enter(), rs232_clear_receivedata()
* Es werden folgende globale Variablen benötigt:
* rs232Receivedata, rs232ReceivedataPointer, rs232EnterReceive
*/
void USIC0_0_IRQHandler(void)
{
10002b40:	b580      	push	{r7, lr}
10002b42:	b082      	sub	sp, #8
10002b44:	af00      	add	r7, sp, #0
	char temp=USIC0_CH1->RBUF & 0xff;	// Rx-Buffer auslesen
10002b46:	4b11      	ldr	r3, [pc, #68]	; (10002b8c <USIC0_0_IRQHandler+0x4c>)
10002b48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
10002b4a:	1dfb      	adds	r3, r7, #7
10002b4c:	701a      	strb	r2, [r3, #0]
	if (temp == '\r') {					// Enterzeichen empfangen?
10002b4e:	1dfb      	adds	r3, r7, #7
10002b50:	781b      	ldrb	r3, [r3, #0]
10002b52:	2b0d      	cmp	r3, #13
10002b54:	d109      	bne.n	10002b6a <USIC0_0_IRQHandler+0x2a>
		rs232Receivedata[rs232ReceivedataPointer]='\0';
10002b56:	4b0e      	ldr	r3, [pc, #56]	; (10002b90 <USIC0_0_IRQHandler+0x50>)
10002b58:	781b      	ldrb	r3, [r3, #0]
10002b5a:	1c1a      	adds	r2, r3, #0
10002b5c:	4b0d      	ldr	r3, [pc, #52]	; (10002b94 <USIC0_0_IRQHandler+0x54>)
10002b5e:	2100      	movs	r1, #0
10002b60:	5499      	strb	r1, [r3, r2]
		rs232EnterReceive = 1;
10002b62:	4b0d      	ldr	r3, [pc, #52]	; (10002b98 <USIC0_0_IRQHandler+0x58>)
10002b64:	2201      	movs	r2, #1
10002b66:	701a      	strb	r2, [r3, #0]
10002b68:	e006      	b.n	10002b78 <USIC0_0_IRQHandler+0x38>
	} else {
		rs232Receivedata[rs232ReceivedataPointer]=temp;
10002b6a:	4b09      	ldr	r3, [pc, #36]	; (10002b90 <USIC0_0_IRQHandler+0x50>)
10002b6c:	781b      	ldrb	r3, [r3, #0]
10002b6e:	1c19      	adds	r1, r3, #0
10002b70:	4b08      	ldr	r3, [pc, #32]	; (10002b94 <USIC0_0_IRQHandler+0x54>)
10002b72:	1dfa      	adds	r2, r7, #7
10002b74:	7812      	ldrb	r2, [r2, #0]
10002b76:	545a      	strb	r2, [r3, r1]
	}
	rs232ReceivedataPointer++;
10002b78:	4b05      	ldr	r3, [pc, #20]	; (10002b90 <USIC0_0_IRQHandler+0x50>)
10002b7a:	781b      	ldrb	r3, [r3, #0]
10002b7c:	3301      	adds	r3, #1
10002b7e:	b2da      	uxtb	r2, r3
10002b80:	4b03      	ldr	r3, [pc, #12]	; (10002b90 <USIC0_0_IRQHandler+0x50>)
10002b82:	701a      	strb	r2, [r3, #0]
	return;
10002b84:	46c0      	nop			; (mov r8, r8)
}
10002b86:	46bd      	mov	sp, r7
10002b88:	b002      	add	sp, #8
10002b8a:	bd80      	pop	{r7, pc}
10002b8c:	48000200 	.word	0x48000200
10002b90:	20000598 	.word	0x20000598
10002b94:	200006b0 	.word	0x200006b0
10002b98:	20000599 	.word	0x20000599

10002b9c <uart_init>:
//---------------------------------------------------------------
// Serielle Schnittstelle initialisieren
// RxD auf P1.1 0.6, TxD auf P1.0 0.7, 9600 Baud, 8N1
//---------------------------------------------------------------
void uart_init ( void )
{	//USIC0 Cannel 0 wird verwendet:
10002b9c:	b580      	push	{r7, lr}
10002b9e:	af00      	add	r7, sp, #0
	SCU_GENERAL->PASSWD = 0x000000C0UL;
10002ba0:	4b7f      	ldr	r3, [pc, #508]	; (10002da0 <uart_init+0x204>)
10002ba2:	22c0      	movs	r2, #192	; 0xc0
10002ba4:	625a      	str	r2, [r3, #36]	; 0x24
	SCU_CLK->CGATCLR0 |= 0x00000008;		// stop gating USIC
10002ba6:	4b7f      	ldr	r3, [pc, #508]	; (10002da4 <uart_init+0x208>)
10002ba8:	4a7e      	ldr	r2, [pc, #504]	; (10002da4 <uart_init+0x208>)
10002baa:	6912      	ldr	r2, [r2, #16]
10002bac:	2108      	movs	r1, #8
10002bae:	430a      	orrs	r2, r1
10002bb0:	611a      	str	r2, [r3, #16]
		while((SCU_CLK->CLKCR)&0x40000000UL);	// wait for VDDC to stabilize
10002bb2:	46c0      	nop			; (mov r8, r8)
10002bb4:	4b7b      	ldr	r3, [pc, #492]	; (10002da4 <uart_init+0x208>)
10002bb6:	681a      	ldr	r2, [r3, #0]
10002bb8:	2380      	movs	r3, #128	; 0x80
10002bba:	05db      	lsls	r3, r3, #23
10002bbc:	4013      	ands	r3, r2
10002bbe:	d1f9      	bne.n	10002bb4 <uart_init+0x18>
	SCU_GENERAL->PASSWD = 0x000000C3UL;
10002bc0:	4b77      	ldr	r3, [pc, #476]	; (10002da0 <uart_init+0x204>)
10002bc2:	22c3      	movs	r2, #195	; 0xc3
10002bc4:	625a      	str	r2, [r3, #36]	; 0x24

	USIC0_CH0->KSCFG |= 3UL ;	//  Mode enable + Freigabe write
10002bc6:	2390      	movs	r3, #144	; 0x90
10002bc8:	05db      	lsls	r3, r3, #23
10002bca:	2290      	movs	r2, #144	; 0x90
10002bcc:	05d2      	lsls	r2, r2, #23
10002bce:	68d2      	ldr	r2, [r2, #12]
10002bd0:	2103      	movs	r1, #3
10002bd2:	430a      	orrs	r2, r1
10002bd4:	60da      	str	r2, [r3, #12]
	//WR_REG(USIC0_CH1->FDR, USIC_CH_FDR_DM_Msk, USIC_CH_FDR_DM_Pos, 2);
	USIC0_CH0->FDR |= 1UL << 15 ;	//Fractional divider mode selected
10002bd6:	2390      	movs	r3, #144	; 0x90
10002bd8:	05db      	lsls	r3, r3, #23
10002bda:	2290      	movs	r2, #144	; 0x90
10002bdc:	05d2      	lsls	r2, r2, #23
10002bde:	6912      	ldr	r2, [r2, #16]
10002be0:	2180      	movs	r1, #128	; 0x80
10002be2:	0209      	lsls	r1, r1, #8
10002be4:	430a      	orrs	r2, r1
10002be6:	611a      	str	r2, [r3, #16]
		//Step value
	USIC0_CH0->FDR|= FDR_STEP_UART;
10002be8:	2390      	movs	r3, #144	; 0x90
10002bea:	05db      	lsls	r3, r3, #23
10002bec:	2290      	movs	r2, #144	; 0x90
10002bee:	05d2      	lsls	r2, r2, #23
10002bf0:	6912      	ldr	r2, [r2, #16]
10002bf2:	2176      	movs	r1, #118	; 0x76
10002bf4:	430a      	orrs	r2, r1
10002bf6:	611a      	str	r2, [r3, #16]
		//Vorteiler:
		// Baudrate = 32 MHz * Step/1024 * 1/(PDIV +1)  * 1/ (PCTQ +1) * 1/ (DCTQ +1)
	USIC0_CH0->BRG |= (BRG_PDIV_UART << 16) ;
10002bf8:	2390      	movs	r3, #144	; 0x90
10002bfa:	05db      	lsls	r3, r3, #23
10002bfc:	2290      	movs	r2, #144	; 0x90
10002bfe:	05d2      	lsls	r2, r2, #23
10002c00:	6952      	ldr	r2, [r2, #20]
10002c02:	21b8      	movs	r1, #184	; 0xb8
10002c04:	0349      	lsls	r1, r1, #13
10002c06:	430a      	orrs	r2, r1
10002c08:	615a      	str	r2, [r3, #20]
	USIC0_CH0->BRG |= BRG_DCTQ_UART << 10 ;
10002c0a:	2390      	movs	r3, #144	; 0x90
10002c0c:	05db      	lsls	r3, r3, #23
10002c0e:	2290      	movs	r2, #144	; 0x90
10002c10:	05d2      	lsls	r2, r2, #23
10002c12:	6952      	ldr	r2, [r2, #20]
10002c14:	21f0      	movs	r1, #240	; 0xf0
10002c16:	0189      	lsls	r1, r1, #6
10002c18:	430a      	orrs	r2, r1
10002c1a:	615a      	str	r2, [r3, #20]
	USIC0_CH0->BRG |= BRG_PCTQ_UART << 8 ;
10002c1c:	2390      	movs	r3, #144	; 0x90
10002c1e:	05db      	lsls	r3, r3, #23
10002c20:	2290      	movs	r2, #144	; 0x90
10002c22:	05d2      	lsls	r2, r2, #23
10002c24:	6952      	ldr	r2, [r2, #20]
10002c26:	615a      	str	r2, [r3, #20]

		//Configuration of USIC Shift Control
		//Transmit/Receive LSB first is selected, Transmission Mode (TRM) = 1, Passive Data Level (PDL) = 1
	WR_REG(USIC0_CH0->SCTR, USIC_CH_SCTR_PDL_Msk, USIC_CH_SCTR_PDL_Pos, 1);
10002c28:	2390      	movs	r3, #144	; 0x90
10002c2a:	05db      	lsls	r3, r3, #23
10002c2c:	2290      	movs	r2, #144	; 0x90
10002c2e:	05d2      	lsls	r2, r2, #23
10002c30:	6b52      	ldr	r2, [r2, #52]	; 0x34
10002c32:	2102      	movs	r1, #2
10002c34:	430a      	orrs	r2, r1
10002c36:	635a      	str	r2, [r3, #52]	; 0x34
	WR_REG(USIC0_CH0->SCTR, USIC_CH_SCTR_TRM_Msk, USIC_CH_SCTR_TRM_Pos, 1);
10002c38:	2390      	movs	r3, #144	; 0x90
10002c3a:	05db      	lsls	r3, r3, #23
10002c3c:	2290      	movs	r2, #144	; 0x90
10002c3e:	05d2      	lsls	r2, r2, #23
10002c40:	6b52      	ldr	r2, [r2, #52]	; 0x34
10002c42:	4959      	ldr	r1, [pc, #356]	; (10002da8 <uart_init+0x20c>)
10002c44:	400a      	ands	r2, r1
10002c46:	2180      	movs	r1, #128	; 0x80
10002c48:	0049      	lsls	r1, r1, #1
10002c4a:	430a      	orrs	r2, r1
10002c4c:	635a      	str	r2, [r3, #52]	; 0x34
		//Set Word Length (WLE) & Frame Length (FLE)
	WR_REG(USIC0_CH0->SCTR, USIC_CH_SCTR_FLE_Msk, USIC_CH_SCTR_FLE_Pos, 7);
10002c4e:	2390      	movs	r3, #144	; 0x90
10002c50:	05db      	lsls	r3, r3, #23
10002c52:	2290      	movs	r2, #144	; 0x90
10002c54:	05d2      	lsls	r2, r2, #23
10002c56:	6b52      	ldr	r2, [r2, #52]	; 0x34
10002c58:	4954      	ldr	r1, [pc, #336]	; (10002dac <uart_init+0x210>)
10002c5a:	400a      	ands	r2, r1
10002c5c:	21e0      	movs	r1, #224	; 0xe0
10002c5e:	02c9      	lsls	r1, r1, #11
10002c60:	430a      	orrs	r2, r1
10002c62:	635a      	str	r2, [r3, #52]	; 0x34
	WR_REG(USIC0_CH0->SCTR, USIC_CH_SCTR_WLE_Msk, USIC_CH_SCTR_WLE_Pos, 7);
10002c64:	2390      	movs	r3, #144	; 0x90
10002c66:	05db      	lsls	r3, r3, #23
10002c68:	2290      	movs	r2, #144	; 0x90
10002c6a:	05d2      	lsls	r2, r2, #23
10002c6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
10002c6e:	4950      	ldr	r1, [pc, #320]	; (10002db0 <uart_init+0x214>)
10002c70:	400a      	ands	r2, r1
10002c72:	21e0      	movs	r1, #224	; 0xe0
10002c74:	04c9      	lsls	r1, r1, #19
10002c76:	430a      	orrs	r2, r1
10002c78:	635a      	str	r2, [r3, #52]	; 0x34

		//Configuration of USIC Transmit Control/Status Register
		//TBUF Data Enable (TDEN) = 1, TBUF Data Single Shot Mode (TDSSM) = 1
	WR_REG(USIC0_CH0->TCSR, USIC_CH_TCSR_TDEN_Msk, USIC_CH_TCSR_TDEN_Pos, 1);
10002c7a:	2390      	movs	r3, #144	; 0x90
10002c7c:	05db      	lsls	r3, r3, #23
10002c7e:	2290      	movs	r2, #144	; 0x90
10002c80:	05d2      	lsls	r2, r2, #23
10002c82:	6b92      	ldr	r2, [r2, #56]	; 0x38
10002c84:	494b      	ldr	r1, [pc, #300]	; (10002db4 <uart_init+0x218>)
10002c86:	400a      	ands	r2, r1
10002c88:	2180      	movs	r1, #128	; 0x80
10002c8a:	00c9      	lsls	r1, r1, #3
10002c8c:	430a      	orrs	r2, r1
10002c8e:	639a      	str	r2, [r3, #56]	; 0x38
	WR_REG(USIC0_CH0->TCSR, USIC_CH_TCSR_TDSSM_Msk, USIC_CH_TCSR_TDSSM_Pos, 1);
10002c90:	2390      	movs	r3, #144	; 0x90
10002c92:	05db      	lsls	r3, r3, #23
10002c94:	2290      	movs	r2, #144	; 0x90
10002c96:	05d2      	lsls	r2, r2, #23
10002c98:	6b92      	ldr	r2, [r2, #56]	; 0x38
10002c9a:	2180      	movs	r1, #128	; 0x80
10002c9c:	0049      	lsls	r1, r1, #1
10002c9e:	430a      	orrs	r2, r1
10002ca0:	639a      	str	r2, [r3, #56]	; 0x38

		//Configuration of Protocol Control Register
		//Sample Mode (SMD) = 1, 1 Stop bit is selected, Sample Point (SP) = 2, Pulse Length (PL) = 0
	WR_REG(USIC0_CH0->PCR_ASCMode, USIC_CH_PCR_ASCMode_SMD_Msk,
10002ca2:	2390      	movs	r3, #144	; 0x90
10002ca4:	05db      	lsls	r3, r3, #23
10002ca6:	2290      	movs	r2, #144	; 0x90
10002ca8:	05d2      	lsls	r2, r2, #23
10002caa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
10002cac:	2101      	movs	r1, #1
10002cae:	430a      	orrs	r2, r1
10002cb0:	63da      	str	r2, [r3, #60]	; 0x3c
				USIC_CH_PCR_ASCMode_SMD_Pos, 1);
	WR_REG(USIC0_CH0->PCR_ASCMode, USIC_CH_PCR_ASCMode_STPB_Msk, USIC_CH_PCR_ASCMode_STPB_Pos, 0);
10002cb2:	2390      	movs	r3, #144	; 0x90
10002cb4:	05db      	lsls	r3, r3, #23
10002cb6:	2290      	movs	r2, #144	; 0x90
10002cb8:	05d2      	lsls	r2, r2, #23
10002cba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
10002cbc:	2102      	movs	r1, #2
10002cbe:	438a      	bics	r2, r1
10002cc0:	63da      	str	r2, [r3, #60]	; 0x3c
	WR_REG(USIC0_CH0->PCR_ASCMode, USIC_CH_PCR_ASCMode_SP_Msk, USIC_CH_PCR_ASCMode_SP_Pos, 9);
10002cc2:	2390      	movs	r3, #144	; 0x90
10002cc4:	05db      	lsls	r3, r3, #23
10002cc6:	2290      	movs	r2, #144	; 0x90
10002cc8:	05d2      	lsls	r2, r2, #23
10002cca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
10002ccc:	493a      	ldr	r1, [pc, #232]	; (10002db8 <uart_init+0x21c>)
10002cce:	400a      	ands	r2, r1
10002cd0:	2190      	movs	r1, #144	; 0x90
10002cd2:	0109      	lsls	r1, r1, #4
10002cd4:	430a      	orrs	r2, r1
10002cd6:	63da      	str	r2, [r3, #60]	; 0x3c
		//TBIF is set to simplify polling
	WR_REG(USIC0_CH0->PSR_ASCMode, USIC_CH_PSR_TBIF_Msk, USIC_CH_PSR_TBIF_Pos, 1);
10002cd8:	2390      	movs	r3, #144	; 0x90
10002cda:	05db      	lsls	r3, r3, #23
10002cdc:	2290      	movs	r2, #144	; 0x90
10002cde:	05d2      	lsls	r2, r2, #23
10002ce0:	6c92      	ldr	r2, [r2, #72]	; 0x48
10002ce2:	2180      	movs	r1, #128	; 0x80
10002ce4:	0189      	lsls	r1, r1, #6
10002ce6:	430a      	orrs	r2, r1
10002ce8:	649a      	str	r2, [r3, #72]	; 0x48
		//Configuration of Transmitter Buffer Control Register
	WR_REG(USIC0_CH0->TBCTR, USIC_CH_TBCTR_LIMIT_Msk, USIC_CH_TBCTR_LIMIT_Pos, 0);
10002cea:	2390      	movs	r3, #144	; 0x90
10002cec:	05da      	lsls	r2, r3, #23
10002cee:	2390      	movs	r3, #144	; 0x90
10002cf0:	05d9      	lsls	r1, r3, #23
10002cf2:	2384      	movs	r3, #132	; 0x84
10002cf4:	005b      	lsls	r3, r3, #1
10002cf6:	58cb      	ldr	r3, [r1, r3]
10002cf8:	4930      	ldr	r1, [pc, #192]	; (10002dbc <uart_init+0x220>)
10002cfa:	4019      	ands	r1, r3
10002cfc:	2384      	movs	r3, #132	; 0x84
10002cfe:	005b      	lsls	r3, r3, #1
10002d00:	50d1      	str	r1, [r2, r3]

		//Configuration of Channel Control Register
		//parity generation is disabled
	USIC0_CH0->CCR |=  0x02;	// ASC Mode
10002d02:	2390      	movs	r3, #144	; 0x90
10002d04:	05db      	lsls	r3, r3, #23
10002d06:	2290      	movs	r2, #144	; 0x90
10002d08:	05d2      	lsls	r2, r2, #23
10002d0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
10002d0c:	2102      	movs	r1, #2
10002d0e:	430a      	orrs	r2, r1
10002d10:	641a      	str	r2, [r3, #64]	; 0x40

		//Data Pointer & Buffer Size for Transmitter Buffer Control - DPTR = 64,  SIZE = 6
	WR_REG(USIC0_CH0->TBCTR, USIC_CH_TBCTR_DPTRSIZE_Msk_UART, USIC_CH_TBCTR_DPTRSIZE_Pos_UART, 0x06000040);
10002d12:	2390      	movs	r3, #144	; 0x90
10002d14:	05da      	lsls	r2, r3, #23
10002d16:	2390      	movs	r3, #144	; 0x90
10002d18:	05d9      	lsls	r1, r3, #23
10002d1a:	2384      	movs	r3, #132	; 0x84
10002d1c:	005b      	lsls	r3, r3, #1
10002d1e:	58cb      	ldr	r3, [r1, r3]
10002d20:	4927      	ldr	r1, [pc, #156]	; (10002dc0 <uart_init+0x224>)
10002d22:	400b      	ands	r3, r1
10002d24:	21c0      	movs	r1, #192	; 0xc0
10002d26:	04c9      	lsls	r1, r1, #19
10002d28:	4319      	orrs	r1, r3
10002d2a:	2384      	movs	r3, #132	; 0x84
10002d2c:	005b      	lsls	r3, r3, #1
10002d2e:	50d1      	str	r1, [r2, r3]

	// Rx Pin: P1.1
	bit_init(P1,1,INP); //P1.1 als Eingang definieren
10002d30:	2001      	movs	r0, #1
10002d32:	2101      	movs	r1, #1
10002d34:	2200      	movs	r2, #0
10002d36:	f7fe fc63 	bl	10001600 <bit_init>
	USIC0_CH0->DX0CR &= ~(0x7);	// Kanal: USIC0_CH0 => DX0D auf P1.1 ( siehe Pin Mapping)
10002d3a:	2390      	movs	r3, #144	; 0x90
10002d3c:	05db      	lsls	r3, r3, #23
10002d3e:	2290      	movs	r2, #144	; 0x90
10002d40:	05d2      	lsls	r2, r2, #23
10002d42:	69d2      	ldr	r2, [r2, #28]
10002d44:	2107      	movs	r1, #7
10002d46:	438a      	bics	r2, r1
10002d48:	61da      	str	r2, [r3, #28]
	USIC0_CH0->DX0CR |= 3;
10002d4a:	2390      	movs	r3, #144	; 0x90
10002d4c:	05db      	lsls	r3, r3, #23
10002d4e:	2290      	movs	r2, #144	; 0x90
10002d50:	05d2      	lsls	r2, r2, #23
10002d52:	69d2      	ldr	r2, [r2, #28]
10002d54:	2103      	movs	r1, #3
10002d56:	430a      	orrs	r2, r1
10002d58:	61da      	str	r2, [r3, #28]

	//Tx Pin P1.0
	PORT1->IOCR0 &= 0xffffff07;	// P1.0
10002d5a:	4b1a      	ldr	r3, [pc, #104]	; (10002dc4 <uart_init+0x228>)
10002d5c:	4a19      	ldr	r2, [pc, #100]	; (10002dc4 <uart_init+0x228>)
10002d5e:	6912      	ldr	r2, [r2, #16]
10002d60:	21f8      	movs	r1, #248	; 0xf8
10002d62:	438a      	bics	r2, r1
10002d64:	611a      	str	r2, [r3, #16]
	PORT1->IOCR0  |= 0x000000B8; // ALT 7 fuer P1.0 => TxD d.h. XMC1100 sendet auf P1.0
10002d66:	4b17      	ldr	r3, [pc, #92]	; (10002dc4 <uart_init+0x228>)
10002d68:	4a16      	ldr	r2, [pc, #88]	; (10002dc4 <uart_init+0x228>)
10002d6a:	6912      	ldr	r2, [r2, #16]
10002d6c:	21b8      	movs	r1, #184	; 0xb8
10002d6e:	430a      	orrs	r2, r1
10002d70:	611a      	str	r2, [r3, #16]

	//UART Channel Auswahl auf DCE
	bit_init(0,12,OUTP);
10002d72:	2000      	movs	r0, #0
10002d74:	210c      	movs	r1, #12
10002d76:	2201      	movs	r2, #1
10002d78:	f7fe fc42 	bl	10001600 <bit_init>
	bit_write(0,12,1);
10002d7c:	2000      	movs	r0, #0
10002d7e:	210c      	movs	r1, #12
10002d80:	2201      	movs	r2, #1
10002d82:	f7ff fbdd 	bl	10002540 <bit_write>
	bit_init(0,13,OUTP);
10002d86:	2000      	movs	r0, #0
10002d88:	210d      	movs	r1, #13
10002d8a:	2201      	movs	r2, #1
10002d8c:	f7fe fc38 	bl	10001600 <bit_init>
	bit_write(0,13,1);
10002d90:	2000      	movs	r0, #0
10002d92:	210d      	movs	r1, #13
10002d94:	2201      	movs	r2, #1
10002d96:	f7ff fbd3 	bl	10002540 <bit_write>
}
10002d9a:	46bd      	mov	sp, r7
10002d9c:	bd80      	pop	{r7, pc}
10002d9e:	46c0      	nop			; (mov r8, r8)
10002da0:	40010000 	.word	0x40010000
10002da4:	40010300 	.word	0x40010300
10002da8:	fffffcff 	.word	0xfffffcff
10002dac:	ffc0ffff 	.word	0xffc0ffff
10002db0:	f0ffffff 	.word	0xf0ffffff
10002db4:	fffff3ff 	.word	0xfffff3ff
10002db8:	ffffe0ff 	.word	0xffffe0ff
10002dbc:	ffffc0ff 	.word	0xffffc0ff
10002dc0:	f8ffffc0 	.word	0xf8ffffc0
10002dc4:	40040100 	.word	0x40040100

10002dc8 <uart_interrupt_enable>:
	bit_write(0,13,1);
}


void uart_interrupt_enable()
{
10002dc8:	b580      	push	{r7, lr}
10002dca:	af00      	add	r7, sp, #0
	USIC0_CH0->CCR  |=0x00004000;
10002dcc:	2390      	movs	r3, #144	; 0x90
10002dce:	05db      	lsls	r3, r3, #23
10002dd0:	2290      	movs	r2, #144	; 0x90
10002dd2:	05d2      	lsls	r2, r2, #23
10002dd4:	6c12      	ldr	r2, [r2, #64]	; 0x40
10002dd6:	2180      	movs	r1, #128	; 0x80
10002dd8:	01c9      	lsls	r1, r1, #7
10002dda:	430a      	orrs	r2, r1
10002ddc:	641a      	str	r2, [r3, #64]	; 0x40
	USIC0_CH0->INPR &=0xFFFFF8FF;
10002dde:	2390      	movs	r3, #144	; 0x90
10002de0:	05db      	lsls	r3, r3, #23
10002de2:	2290      	movs	r2, #144	; 0x90
10002de4:	05d2      	lsls	r2, r2, #23
10002de6:	6992      	ldr	r2, [r2, #24]
10002de8:	490c      	ldr	r1, [pc, #48]	; (10002e1c <uart_interrupt_enable+0x54>)
10002dea:	400a      	ands	r2, r1
10002dec:	619a      	str	r2, [r3, #24]
	USIC0_CH0->INPR |=0x00000100; // Interrupt wird auf SR1 gelegt
10002dee:	2390      	movs	r3, #144	; 0x90
10002df0:	05db      	lsls	r3, r3, #23
10002df2:	2290      	movs	r2, #144	; 0x90
10002df4:	05d2      	lsls	r2, r2, #23
10002df6:	6992      	ldr	r2, [r2, #24]
10002df8:	2180      	movs	r1, #128	; 0x80
10002dfa:	0049      	lsls	r1, r1, #1
10002dfc:	430a      	orrs	r2, r1
10002dfe:	619a      	str	r2, [r3, #24]
	USIC0_CH0->PSCR |=0x00000400;
10002e00:	2390      	movs	r3, #144	; 0x90
10002e02:	05db      	lsls	r3, r3, #23
10002e04:	2290      	movs	r2, #144	; 0x90
10002e06:	05d2      	lsls	r2, r2, #23
10002e08:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
10002e0a:	2180      	movs	r1, #128	; 0x80
10002e0c:	00c9      	lsls	r1, r1, #3
10002e0e:	430a      	orrs	r2, r1
10002e10:	64da      	str	r2, [r3, #76]	; 0x4c
	NVIC_EnableIRQ(USIC0_1_IRQn); 	// Int Freigabe  SR1 für empfange Zeichen
10002e12:	200a      	movs	r0, #10
10002e14:	f7fe fbda 	bl	100015cc <__NVIC_EnableIRQ>
	//NVIC_EnableIRQ(10); 	// Int Freigabe  SR0 für empfange Zeichen
}
10002e18:	46bd      	mov	sp, r7
10002e1a:	bd80      	pop	{r7, pc}
10002e1c:	fffff8ff 	.word	0xfffff8ff

10002e20 <uart_put>:
}
//---------------------------------------------------------------
// schreibt ein Byte auf COM
//---------------------------------------------------------------
void uart_put ( char value )
{
10002e20:	b580      	push	{r7, lr}
10002e22:	b082      	sub	sp, #8
10002e24:	af00      	add	r7, sp, #0
10002e26:	1c02      	adds	r2, r0, #0
10002e28:	1dfb      	adds	r3, r7, #7
10002e2a:	701a      	strb	r2, [r3, #0]
	USIC0_CH0->IN[0] = value;
10002e2c:	2390      	movs	r3, #144	; 0x90
10002e2e:	05da      	lsls	r2, r3, #23
10002e30:	1dfb      	adds	r3, r7, #7
10002e32:	7819      	ldrb	r1, [r3, #0]
10002e34:	23c0      	movs	r3, #192	; 0xc0
10002e36:	005b      	lsls	r3, r3, #1
10002e38:	50d1      	str	r1, [r2, r3]
	while((USIC0_CH0->TRBSR & (1U<< 11))  == 0);  // Warten , bis Transmit Buffer empty
10002e3a:	46c0      	nop			; (mov r8, r8)
10002e3c:	2390      	movs	r3, #144	; 0x90
10002e3e:	05da      	lsls	r2, r3, #23
10002e40:	238a      	movs	r3, #138	; 0x8a
10002e42:	005b      	lsls	r3, r3, #1
10002e44:	58d2      	ldr	r2, [r2, r3]
10002e46:	2380      	movs	r3, #128	; 0x80
10002e48:	011b      	lsls	r3, r3, #4
10002e4a:	4013      	ands	r3, r2
10002e4c:	d0f6      	beq.n	10002e3c <uart_put+0x1c>

}
10002e4e:	46bd      	mov	sp, r7
10002e50:	b002      	add	sp, #8
10002e52:	bd80      	pop	{r7, pc}

10002e54 <uart_print>:
//---------------------------------------------------------------
// schreibt eine nullterminierte Zeichenfolge auf COM
//---------------------------------------------------------------
void uart_print ( char *text )
{
10002e54:	b580      	push	{r7, lr}
10002e56:	b082      	sub	sp, #8
10002e58:	af00      	add	r7, sp, #0
10002e5a:	6078      	str	r0, [r7, #4]
  while (*text != '\0')
10002e5c:	e006      	b.n	10002e6c <uart_print+0x18>
    uart_put(*text++);
10002e5e:	687b      	ldr	r3, [r7, #4]
10002e60:	1c5a      	adds	r2, r3, #1
10002e62:	607a      	str	r2, [r7, #4]
10002e64:	781b      	ldrb	r3, [r3, #0]
10002e66:	1c18      	adds	r0, r3, #0
10002e68:	f7ff ffda 	bl	10002e20 <uart_put>
//---------------------------------------------------------------
// schreibt eine nullterminierte Zeichenfolge auf COM
//---------------------------------------------------------------
void uart_print ( char *text )
{
  while (*text != '\0')
10002e6c:	687b      	ldr	r3, [r7, #4]
10002e6e:	781b      	ldrb	r3, [r3, #0]
10002e70:	2b00      	cmp	r3, #0
10002e72:	d1f4      	bne.n	10002e5e <uart_print+0xa>
    uart_put(*text++);
}
10002e74:	46bd      	mov	sp, r7
10002e76:	b002      	add	sp, #8
10002e78:	bd80      	pop	{r7, pc}
10002e7a:	46c0      	nop			; (mov r8, r8)

10002e7c <USIC0_1_IRQHandler>:
* rs232_wait_of_enter(), rs232_clear_receivedata()
* Es werden folgende globale Variablen benötigt:
* rs232Receivedata, rs232ReceivedataPointer, rs232EnterReceive
*/
void USIC0_1_IRQHandler(void)
{
10002e7c:	b580      	push	{r7, lr}
10002e7e:	b082      	sub	sp, #8
10002e80:	af00      	add	r7, sp, #0
	char temp=USIC0_CH0->RBUF & 0xff;	// Rx-Buffer auslesen
10002e82:	2390      	movs	r3, #144	; 0x90
10002e84:	05db      	lsls	r3, r3, #23
10002e86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
10002e88:	1dfb      	adds	r3, r7, #7
10002e8a:	701a      	strb	r2, [r3, #0]
	if (temp == '\r') {					// Enterzeichen empfangen?
10002e8c:	1dfb      	adds	r3, r7, #7
10002e8e:	781b      	ldrb	r3, [r3, #0]
10002e90:	2b0d      	cmp	r3, #13
10002e92:	d109      	bne.n	10002ea8 <USIC0_1_IRQHandler+0x2c>
		uartReceivedata[uartReceivedataPointer]='\0';
10002e94:	4b0d      	ldr	r3, [pc, #52]	; (10002ecc <USIC0_1_IRQHandler+0x50>)
10002e96:	781b      	ldrb	r3, [r3, #0]
10002e98:	1c1a      	adds	r2, r3, #0
10002e9a:	4b0d      	ldr	r3, [pc, #52]	; (10002ed0 <USIC0_1_IRQHandler+0x54>)
10002e9c:	2100      	movs	r1, #0
10002e9e:	5499      	strb	r1, [r3, r2]
		uartEnterReceive = 1;
10002ea0:	4b0c      	ldr	r3, [pc, #48]	; (10002ed4 <USIC0_1_IRQHandler+0x58>)
10002ea2:	2201      	movs	r2, #1
10002ea4:	701a      	strb	r2, [r3, #0]
10002ea6:	e006      	b.n	10002eb6 <USIC0_1_IRQHandler+0x3a>
	} else {
		uartReceivedata[uartReceivedataPointer]=temp;
10002ea8:	4b08      	ldr	r3, [pc, #32]	; (10002ecc <USIC0_1_IRQHandler+0x50>)
10002eaa:	781b      	ldrb	r3, [r3, #0]
10002eac:	1c19      	adds	r1, r3, #0
10002eae:	4b08      	ldr	r3, [pc, #32]	; (10002ed0 <USIC0_1_IRQHandler+0x54>)
10002eb0:	1dfa      	adds	r2, r7, #7
10002eb2:	7812      	ldrb	r2, [r2, #0]
10002eb4:	545a      	strb	r2, [r3, r1]
	}
	uartReceivedataPointer++;
10002eb6:	4b05      	ldr	r3, [pc, #20]	; (10002ecc <USIC0_1_IRQHandler+0x50>)
10002eb8:	781b      	ldrb	r3, [r3, #0]
10002eba:	3301      	adds	r3, #1
10002ebc:	b2da      	uxtb	r2, r3
10002ebe:	4b03      	ldr	r3, [pc, #12]	; (10002ecc <USIC0_1_IRQHandler+0x50>)
10002ec0:	701a      	strb	r2, [r3, #0]
	//USIC0_CH0->PSCR |=0x00000400;
	return;
10002ec2:	46c0      	nop			; (mov r8, r8)
}
10002ec4:	46bd      	mov	sp, r7
10002ec6:	b002      	add	sp, #8
10002ec8:	bd80      	pop	{r7, pc}
10002eca:	46c0      	nop			; (mov r8, r8)
10002ecc:	2000059a 	.word	0x2000059a
10002ed0:	200005b0 	.word	0x200005b0
10002ed4:	2000059b 	.word	0x2000059b

10002ed8 <uart_clear_receivedata>:
{
	while (uartEnterReceive==0) {}
	uartEnterReceive=0;
}
void uart_clear_receivedata()
{
10002ed8:	b580      	push	{r7, lr}
10002eda:	af00      	add	r7, sp, #0
	uartReceivedata[0]='\0';
10002edc:	4b03      	ldr	r3, [pc, #12]	; (10002eec <uart_clear_receivedata+0x14>)
10002ede:	2200      	movs	r2, #0
10002ee0:	701a      	strb	r2, [r3, #0]
	uartReceivedataPointer=0;
10002ee2:	4b03      	ldr	r3, [pc, #12]	; (10002ef0 <uart_clear_receivedata+0x18>)
10002ee4:	2200      	movs	r2, #0
10002ee6:	701a      	strb	r2, [r3, #0]
}
10002ee8:	46bd      	mov	sp, r7
10002eea:	bd80      	pop	{r7, pc}
10002eec:	200005b0 	.word	0x200005b0
10002ef0:	2000059a 	.word	0x2000059a

10002ef4 <uart_select_channel>:
 * UARTCHANNEL_DCE : P0.12=1 und P0.13=1 => Stecker-Ausgang
 * UARTCHANNEL_DTE : P0.12=0 und P0.13=1 => Buchse Ausgang
 * UARTCHANNEL_0 : P0.12=1 und P0.13=0 => TTL Pegel Kanal 0
 * UARTCHANNEL_1 : P0.12=0 und P0.13=0 => TTL Pegel Kanal 1
 */
void uart_select_channel(uint8_t select) {
10002ef4:	b580      	push	{r7, lr}
10002ef6:	b082      	sub	sp, #8
10002ef8:	af00      	add	r7, sp, #0
10002efa:	1c02      	adds	r2, r0, #0
10002efc:	1dfb      	adds	r3, r7, #7
10002efe:	701a      	strb	r2, [r3, #0]
	while((USIC0_CH0->TRBSR & (1U<< 11))  == 0);  // Warten , bis Transmit Buffer empty
10002f00:	46c0      	nop			; (mov r8, r8)
10002f02:	2390      	movs	r3, #144	; 0x90
10002f04:	05da      	lsls	r2, r3, #23
10002f06:	238a      	movs	r3, #138	; 0x8a
10002f08:	005b      	lsls	r3, r3, #1
10002f0a:	58d2      	ldr	r2, [r2, r3]
10002f0c:	2380      	movs	r3, #128	; 0x80
10002f0e:	011b      	lsls	r3, r3, #4
10002f10:	4013      	ands	r3, r2
10002f12:	d0f6      	beq.n	10002f02 <uart_select_channel+0xe>
	//delay_ms(2);
	switch (select) {
10002f14:	1dfb      	adds	r3, r7, #7
10002f16:	781b      	ldrb	r3, [r3, #0]
10002f18:	2b01      	cmp	r3, #1
10002f1a:	d013      	beq.n	10002f44 <uart_select_channel+0x50>
10002f1c:	dc02      	bgt.n	10002f24 <uart_select_channel+0x30>
10002f1e:	2b00      	cmp	r3, #0
10002f20:	d005      	beq.n	10002f2e <uart_select_channel+0x3a>
10002f22:	e030      	b.n	10002f86 <uart_select_channel+0x92>
10002f24:	2b02      	cmp	r3, #2
10002f26:	d018      	beq.n	10002f5a <uart_select_channel+0x66>
10002f28:	2b03      	cmp	r3, #3
10002f2a:	d021      	beq.n	10002f70 <uart_select_channel+0x7c>
10002f2c:	e02b      	b.n	10002f86 <uart_select_channel+0x92>
	  case UARTCHANNEL_DCE:
	    bit_write(0,12,1);
10002f2e:	2000      	movs	r0, #0
10002f30:	210c      	movs	r1, #12
10002f32:	2201      	movs	r2, #1
10002f34:	f7ff fb04 	bl	10002540 <bit_write>
	    bit_write(0,13,1);
10002f38:	2000      	movs	r0, #0
10002f3a:	210d      	movs	r1, #13
10002f3c:	2201      	movs	r2, #1
10002f3e:	f7ff faff 	bl	10002540 <bit_write>
	    break;
10002f42:	e020      	b.n	10002f86 <uart_select_channel+0x92>
	  case UARTCHANNEL_DTE:
		bit_write(0,12,0);
10002f44:	2000      	movs	r0, #0
10002f46:	210c      	movs	r1, #12
10002f48:	2200      	movs	r2, #0
10002f4a:	f7ff faf9 	bl	10002540 <bit_write>
		bit_write(0,13,1);
10002f4e:	2000      	movs	r0, #0
10002f50:	210d      	movs	r1, #13
10002f52:	2201      	movs	r2, #1
10002f54:	f7ff faf4 	bl	10002540 <bit_write>
		break;
10002f58:	e015      	b.n	10002f86 <uart_select_channel+0x92>
	  case UARTCHANNEL_1:
	    bit_write(0,12,1);
10002f5a:	2000      	movs	r0, #0
10002f5c:	210c      	movs	r1, #12
10002f5e:	2201      	movs	r2, #1
10002f60:	f7ff faee 	bl	10002540 <bit_write>
	    bit_write(0,13,0);
10002f64:	2000      	movs	r0, #0
10002f66:	210d      	movs	r1, #13
10002f68:	2200      	movs	r2, #0
10002f6a:	f7ff fae9 	bl	10002540 <bit_write>
	    break;
10002f6e:	e00a      	b.n	10002f86 <uart_select_channel+0x92>
	  case UARTCHANNEL_0:
		bit_write(0,12,0);
10002f70:	2000      	movs	r0, #0
10002f72:	210c      	movs	r1, #12
10002f74:	2200      	movs	r2, #0
10002f76:	f7ff fae3 	bl	10002540 <bit_write>
		bit_write(0,13,0);
10002f7a:	2000      	movs	r0, #0
10002f7c:	210d      	movs	r1, #13
10002f7e:	2200      	movs	r2, #0
10002f80:	f7ff fade 	bl	10002540 <bit_write>
		break;
10002f84:	46c0      	nop			; (mov r8, r8)
	}
}
10002f86:	46bd      	mov	sp, r7
10002f88:	b002      	add	sp, #8
10002f8a:	bd80      	pop	{r7, pc}

10002f8c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void __NVIC_SystemReset(void)
{
10002f8c:	b580      	push	{r7, lr}
10002f8e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
10002f90:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10002f94:	4b03      	ldr	r3, [pc, #12]	; (10002fa4 <__NVIC_SystemReset+0x18>)
10002f96:	4a04      	ldr	r2, [pc, #16]	; (10002fa8 <__NVIC_SystemReset+0x1c>)
10002f98:	60da      	str	r2, [r3, #12]
10002f9a:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
10002f9e:	46c0      	nop			; (mov r8, r8)
  }
10002fa0:	e7fd      	b.n	10002f9e <__NVIC_SystemReset+0x12>
10002fa2:	46c0      	nop			; (mov r8, r8)
10002fa4:	e000ed00 	.word	0xe000ed00
10002fa8:	05fa0004 	.word	0x05fa0004

10002fac <main>:
void handleNewObject();
void sortObject();
void test(int onOrOff);

int main(void)
{
10002fac:	b580      	push	{r7, lr}
10002fae:	b092      	sub	sp, #72	; 0x48
10002fb0:	af00      	add	r7, sp, #0
	init();
10002fb2:	f7fe f91d 	bl	100011f0 <init>
	LEDStripes(OFF);
10002fb6:	2000      	movs	r0, #0
10002fb8:	f7fe f9a6 	bl	10001308 <LEDStripes>
	productionLine(0, FORWARD);
10002fbc:	2000      	movs	r0, #0
10002fbe:	2100      	movs	r1, #0
10002fc0:	f7fe f9e4 	bl	1000138c <productionLine>
	slider(0, SLIDERFORWARD);
10002fc4:	2000      	movs	r0, #0
10002fc6:	2100      	movs	r1, #0
10002fc8:	f7fe fae0 	bl	1000158c <slider>
	test(OFF);
10002fcc:	2000      	movs	r0, #0
10002fce:	f000 f97f 	bl	100032d0 <test>

	while (1U)
	{
		laser(ON);
10002fd2:	2001      	movs	r0, #1
10002fd4:	f7fe f982 	bl	100012dc <laser>
		// New object handling
		if (lightBarrier2() == OFF && handleObjectMovingAway == 0)
10002fd8:	f7fe fa24 	bl	10001424 <lightBarrier2>
10002fdc:	1e03      	subs	r3, r0, #0
10002fde:	d109      	bne.n	10002ff4 <main+0x48>
10002fe0:	4b4c      	ldr	r3, [pc, #304]	; (10003114 <main+0x168>)
10002fe2:	681b      	ldr	r3, [r3, #0]
10002fe4:	2b00      	cmp	r3, #0
10002fe6:	d105      	bne.n	10002ff4 <main+0x48>
		{
			handleNewObject();
10002fe8:	f000 f8ae 	bl	10003148 <handleNewObject>
			rs232_print("Scanning");
10002fec:	4b4a      	ldr	r3, [pc, #296]	; (10003118 <main+0x16c>)
10002fee:	1c18      	adds	r0, r3, #0
10002ff0:	f7ff fd92 	bl	10002b18 <rs232_print>
		}

		// Object sorting if necessary
		if (lightBarrier1() == OFF && numObjects > 0 && sortObjectMovingAway == 0)
10002ff4:	f7fe f9ea 	bl	100013cc <lightBarrier1>
10002ff8:	1e03      	subs	r3, r0, #0
10002ffa:	d10d      	bne.n	10003018 <main+0x6c>
10002ffc:	4b47      	ldr	r3, [pc, #284]	; (1000311c <main+0x170>)
10002ffe:	681b      	ldr	r3, [r3, #0]
10003000:	2b00      	cmp	r3, #0
10003002:	dd09      	ble.n	10003018 <main+0x6c>
10003004:	4b46      	ldr	r3, [pc, #280]	; (10003120 <main+0x174>)
10003006:	681b      	ldr	r3, [r3, #0]
10003008:	2b00      	cmp	r3, #0
1000300a:	d105      	bne.n	10003018 <main+0x6c>
		{
			sortObject();
1000300c:	f000 f90a 	bl	10003224 <sortObject>
			rs232_print("Sorting");
10003010:	4b44      	ldr	r3, [pc, #272]	; (10003124 <main+0x178>)
10003012:	1c18      	adds	r0, r3, #0
10003014:	f7ff fd80 	bl	10002b18 <rs232_print>
		}

		// Reset flags
		if (lightBarrier2() == ON)
10003018:	f7fe fa04 	bl	10001424 <lightBarrier2>
1000301c:	1e03      	subs	r3, r0, #0
1000301e:	2b01      	cmp	r3, #1
10003020:	d102      	bne.n	10003028 <main+0x7c>
		{
			handleObjectMovingAway = 0;
10003022:	4b3c      	ldr	r3, [pc, #240]	; (10003114 <main+0x168>)
10003024:	2200      	movs	r2, #0
10003026:	601a      	str	r2, [r3, #0]
		}
		if (lightBarrier1() == ON)
10003028:	f7fe f9d0 	bl	100013cc <lightBarrier1>
1000302c:	1e03      	subs	r3, r0, #0
1000302e:	2b01      	cmp	r3, #1
10003030:	d102      	bne.n	10003038 <main+0x8c>
		{
			sortObjectMovingAway = 0;
10003032:	4b3b      	ldr	r3, [pc, #236]	; (10003120 <main+0x174>)
10003034:	2200      	movs	r2, #0
10003036:	601a      	str	r2, [r3, #0]
		}

		// Reset the slider if the button is pressed
		if (readButton1() == ON)
10003038:	f7fe fa78 	bl	1000152c <readButton1>
1000303c:	1e03      	subs	r3, r0, #0
1000303e:	2b01      	cmp	r3, #1
10003040:	d10d      	bne.n	1000305e <main+0xb2>
		{
			// slider to max backward position
			slider(50000, SLIDERBACKWARD);
10003042:	4b39      	ldr	r3, [pc, #228]	; (10003128 <main+0x17c>)
10003044:	1c18      	adds	r0, r3, #0
10003046:	2101      	movs	r1, #1
10003048:	f7fe faa0 	bl	1000158c <slider>
			while (readInductivSensor1() == 0)
1000304c:	46c0      	nop			; (mov r8, r8)
1000304e:	f7fe fa89 	bl	10001564 <readInductivSensor1>
10003052:	1e03      	subs	r3, r0, #0
10003054:	d0fb      	beq.n	1000304e <main+0xa2>
				;
			// slider stops
			slider(0, SLIDERFORWARD);
10003056:	2000      	movs	r0, #0
10003058:	2100      	movs	r1, #0
1000305a:	f7fe fa97 	bl	1000158c <slider>
		}

		// reset system, if button 2 is pressed
		if (readButton2() == ON)
1000305e:	f7fe fa73 	bl	10001548 <readButton2>
10003062:	1e03      	subs	r3, r0, #0
10003064:	2b01      	cmp	r3, #1
10003066:	d107      	bne.n	10003078 <main+0xcc>
		{
			// wait till the button is released
			while (readButton2() == ON)
10003068:	46c0      	nop			; (mov r8, r8)
1000306a:	f7fe fa6d 	bl	10001548 <readButton2>
1000306e:	1e03      	subs	r3, r0, #0
10003070:	2b01      	cmp	r3, #1
10003072:	d0fa      	beq.n	1000306a <main+0xbe>
				;
			// reset the system
			NVIC_SystemReset();
10003074:	f7ff ff8a 	bl	10002f8c <__NVIC_SystemReset>
		// check if uart data begins with "speed"
		// example input: "speed15000\n\r"
		// example input: "speed0\n\r"
		// example input: "speed1000\n\r"
		// example input: "speed50000\n\r"
		if (strncmp(uartReceivedata, "speed", 5) == 0 && uartEnterReceive != 0)
10003078:	4a2c      	ldr	r2, [pc, #176]	; (1000312c <main+0x180>)
1000307a:	4b2d      	ldr	r3, [pc, #180]	; (10003130 <main+0x184>)
1000307c:	1c10      	adds	r0, r2, #0
1000307e:	1c19      	adds	r1, r3, #0
10003080:	2205      	movs	r2, #5
10003082:	f000 faa3 	bl	100035cc <strncmp>
10003086:	1e03      	subs	r3, r0, #0
10003088:	d13d      	bne.n	10003106 <main+0x15a>
1000308a:	4b2a      	ldr	r3, [pc, #168]	; (10003134 <main+0x188>)
1000308c:	781b      	ldrb	r3, [r3, #0]
1000308e:	2b00      	cmp	r3, #0
10003090:	d039      	beq.n	10003106 <main+0x15a>
		{
		    char *ptr;
		    long nextProductionLineSpeed = strtol(uartReceivedata + 5, &ptr, 10); // Convert starting from index 5
10003092:	4a29      	ldr	r2, [pc, #164]	; (10003138 <main+0x18c>)
10003094:	2340      	movs	r3, #64	; 0x40
10003096:	18fb      	adds	r3, r7, r3
10003098:	1c10      	adds	r0, r2, #0
1000309a:	1c19      	adds	r1, r3, #0
1000309c:	220a      	movs	r2, #10
1000309e:	f000 fb39 	bl	10003714 <strtol>
100030a2:	1c03      	adds	r3, r0, #0
100030a4:	647b      	str	r3, [r7, #68]	; 0x44

		    // Validate conversion success and range. Ensure the remainder points to a newline, carriage return, or string terminator.
		    if (ptr != uartReceivedata + 5 && (*ptr == '\n' || *ptr == '\r' || *ptr == '\0') && nextProductionLineSpeed >= 0 && nextProductionLineSpeed <= 50000)
100030a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
100030a8:	4b23      	ldr	r3, [pc, #140]	; (10003138 <main+0x18c>)
100030aa:	429a      	cmp	r2, r3
100030ac:	d022      	beq.n	100030f4 <main+0x148>
100030ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
100030b0:	781b      	ldrb	r3, [r3, #0]
100030b2:	2b0a      	cmp	r3, #10
100030b4:	d007      	beq.n	100030c6 <main+0x11a>
100030b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
100030b8:	781b      	ldrb	r3, [r3, #0]
100030ba:	2b0d      	cmp	r3, #13
100030bc:	d003      	beq.n	100030c6 <main+0x11a>
100030be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
100030c0:	781b      	ldrb	r3, [r3, #0]
100030c2:	2b00      	cmp	r3, #0
100030c4:	d116      	bne.n	100030f4 <main+0x148>
100030c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
100030c8:	2b00      	cmp	r3, #0
100030ca:	db13      	blt.n	100030f4 <main+0x148>
100030cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
100030ce:	4a16      	ldr	r2, [pc, #88]	; (10003128 <main+0x17c>)
100030d0:	4293      	cmp	r3, r2
100030d2:	dc0f      	bgt.n	100030f4 <main+0x148>
		    {
		        productionLineSpeed = (int)nextProductionLineSpeed; // Assuming productionLineSpeed is an int
100030d4:	4b19      	ldr	r3, [pc, #100]	; (1000313c <main+0x190>)
100030d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
100030d8:	601a      	str	r2, [r3, #0]
		        // Assuming a function exists to convert int to string for printing
		        char feedback[64];
		        sprintf(feedback, "Speed changed to: %ld", nextProductionLineSpeed);
100030da:	1c39      	adds	r1, r7, #0
100030dc:	4a18      	ldr	r2, [pc, #96]	; (10003140 <main+0x194>)
100030de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
100030e0:	1c08      	adds	r0, r1, #0
100030e2:	1c11      	adds	r1, r2, #0
100030e4:	1c1a      	adds	r2, r3, #0
100030e6:	f000 fa4f 	bl	10003588 <siprintf>
		        rs232_print(feedback);
100030ea:	1c3b      	adds	r3, r7, #0
100030ec:	1c18      	adds	r0, r3, #0
100030ee:	f7ff fd13 	bl	10002b18 <rs232_print>
		    char *ptr;
		    long nextProductionLineSpeed = strtol(uartReceivedata + 5, &ptr, 10); // Convert starting from index 5

		    // Validate conversion success and range. Ensure the remainder points to a newline, carriage return, or string terminator.
		    if (ptr != uartReceivedata + 5 && (*ptr == '\n' || *ptr == '\r' || *ptr == '\0') && nextProductionLineSpeed >= 0 && nextProductionLineSpeed <= 50000)
		    {
100030f2:	e003      	b.n	100030fc <main+0x150>
		        rs232_print(feedback);
		    }
		    else
		    {
		        // Feedback for invalid input
		        rs232_print("Invalid speed. Please enter a value between 0 and 50000.");
100030f4:	4b13      	ldr	r3, [pc, #76]	; (10003144 <main+0x198>)
100030f6:	1c18      	adds	r0, r3, #0
100030f8:	f7ff fd0e 	bl	10002b18 <rs232_print>
		    }

		    uartEnterReceive = 0;
100030fc:	4b0d      	ldr	r3, [pc, #52]	; (10003134 <main+0x188>)
100030fe:	2200      	movs	r2, #0
10003100:	701a      	strb	r2, [r3, #0]
		    uart_clear_receivedata();
10003102:	f7ff fee9 	bl	10002ed8 <uart_clear_receivedata>
		}

		productionLine(productionLineSpeed, FORWARD);
10003106:	4b0d      	ldr	r3, [pc, #52]	; (1000313c <main+0x190>)
10003108:	681b      	ldr	r3, [r3, #0]
1000310a:	1c18      	adds	r0, r3, #0
1000310c:	2100      	movs	r1, #0
1000310e:	f7fe f93d 	bl	1000138c <productionLine>
	}
10003112:	e75e      	b.n	10002fd2 <main+0x26>
10003114:	200005a0 	.word	0x200005a0
10003118:	10003efc 	.word	0x10003efc
1000311c:	2000059c 	.word	0x2000059c
10003120:	200005a4 	.word	0x200005a4
10003124:	10003f08 	.word	0x10003f08
10003128:	0000c350 	.word	0x0000c350
1000312c:	200005b0 	.word	0x200005b0
10003130:	10003f10 	.word	0x10003f10
10003134:	2000059b 	.word	0x2000059b
10003138:	200005b5 	.word	0x200005b5
1000313c:	20000520 	.word	0x20000520
10003140:	10003f18 	.word	0x10003f18
10003144:	10003f30 	.word	0x10003f30

10003148 <handleNewObject>:

	return 0; // Added return statement for formality, though it will never be reached in this loop
}

void handleNewObject()
{
10003148:	b580      	push	{r7, lr}
1000314a:	af00      	add	r7, sp, #0
	handleObjectMovingAway = 1;
1000314c:	4b2d      	ldr	r3, [pc, #180]	; (10003204 <handleNewObject+0xbc>)
1000314e:	2201      	movs	r2, #1
10003150:	601a      	str	r2, [r3, #0]

	productionLine(0, FORWARD);
10003152:	2000      	movs	r0, #0
10003154:	2100      	movs	r1, #0
10003156:	f7fe f919 	bl	1000138c <productionLine>

	LEDStripes(ON);
1000315a:	2001      	movs	r0, #1
1000315c:	f7fe f8d4 	bl	10001308 <LEDStripes>
	laser(OFF);
10003160:	2000      	movs	r0, #0
10003162:	f7fe f8bb 	bl	100012dc <laser>

	pneumatics1(OUT);
10003166:	2001      	movs	r0, #1
10003168:	f7fe f9b4 	bl	100014d4 <pneumatics1>

	// Get classification
	uart_print("Sort out or don't?\n\r");
1000316c:	4b26      	ldr	r3, [pc, #152]	; (10003208 <handleNewObject+0xc0>)
1000316e:	1c18      	adds	r0, r3, #0
10003170:	f7ff fe70 	bl	10002e54 <uart_print>

	// uart_wait_of_enter();
	while (uartEnterReceive == 0)
10003174:	e00c      	b.n	10003190 <handleNewObject+0x48>
	{
		if (readButton2() == ON)
10003176:	f7fe f9e7 	bl	10001548 <readButton2>
1000317a:	1e03      	subs	r3, r0, #0
1000317c:	2b01      	cmp	r3, #1
1000317e:	d107      	bne.n	10003190 <handleNewObject+0x48>
		{
			// wait till the button is released
			while (readButton2() == ON)
10003180:	46c0      	nop			; (mov r8, r8)
10003182:	f7fe f9e1 	bl	10001548 <readButton2>
10003186:	1e03      	subs	r3, r0, #0
10003188:	2b01      	cmp	r3, #1
1000318a:	d0fa      	beq.n	10003182 <handleNewObject+0x3a>
				;
			// reset the system
			NVIC_SystemReset();
1000318c:	f7ff fefe 	bl	10002f8c <__NVIC_SystemReset>

	// Get classification
	uart_print("Sort out or don't?\n\r");

	// uart_wait_of_enter();
	while (uartEnterReceive == 0)
10003190:	4b1e      	ldr	r3, [pc, #120]	; (1000320c <handleNewObject+0xc4>)
10003192:	781b      	ldrb	r3, [r3, #0]
10003194:	2b00      	cmp	r3, #0
10003196:	d0ee      	beq.n	10003176 <handleNewObject+0x2e>
				;
			// reset the system
			NVIC_SystemReset();
		}
	}
	uartEnterReceive = 0;
10003198:	4b1c      	ldr	r3, [pc, #112]	; (1000320c <handleNewObject+0xc4>)
1000319a:	2200      	movs	r2, #0
1000319c:	701a      	strb	r2, [r3, #0]

	rs232_print(uartReceivedata);
1000319e:	4b1c      	ldr	r3, [pc, #112]	; (10003210 <handleNewObject+0xc8>)
100031a0:	1c18      	adds	r0, r3, #0
100031a2:	f7ff fcb9 	bl	10002b18 <rs232_print>

	pneumatics1(IN);
100031a6:	2000      	movs	r0, #0
100031a8:	f7fe f994 	bl	100014d4 <pneumatics1>

	// Save if apple is good or bad in the nextObjects array (append to the end of the array)
	if (uartReceivedata[0] == 'n')
100031ac:	4b18      	ldr	r3, [pc, #96]	; (10003210 <handleNewObject+0xc8>)
100031ae:	781b      	ldrb	r3, [r3, #0]
100031b0:	2b6e      	cmp	r3, #110	; 0x6e
100031b2:	d104      	bne.n	100031be <handleNewObject+0x76>
	{
		// do nothing
		rs232_print("Do nothing.");
100031b4:	4b17      	ldr	r3, [pc, #92]	; (10003214 <handleNewObject+0xcc>)
100031b6:	1c18      	adds	r0, r3, #0
100031b8:	f7ff fcae 	bl	10002b18 <rs232_print>
100031bc:	e012      	b.n	100031e4 <handleNewObject+0x9c>
	}
	else if (numObjects < MAX_OBJECTS)
100031be:	4b16      	ldr	r3, [pc, #88]	; (10003218 <handleNewObject+0xd0>)
100031c0:	681b      	ldr	r3, [r3, #0]
100031c2:	2b63      	cmp	r3, #99	; 0x63
100031c4:	dc0e      	bgt.n	100031e4 <handleNewObject+0x9c>
	{
		nextObjects[numObjects++] = (uartReceivedata[0] == 'd' ? DONTSORTOUT : SORTOUT); // Fixed logic for good/bad apple
100031c6:	4b14      	ldr	r3, [pc, #80]	; (10003218 <handleNewObject+0xd0>)
100031c8:	681b      	ldr	r3, [r3, #0]
100031ca:	1c59      	adds	r1, r3, #1
100031cc:	4a12      	ldr	r2, [pc, #72]	; (10003218 <handleNewObject+0xd0>)
100031ce:	6011      	str	r1, [r2, #0]
100031d0:	4a0f      	ldr	r2, [pc, #60]	; (10003210 <handleNewObject+0xc8>)
100031d2:	7812      	ldrb	r2, [r2, #0]
100031d4:	3a64      	subs	r2, #100	; 0x64
100031d6:	1e51      	subs	r1, r2, #1
100031d8:	418a      	sbcs	r2, r1
100031da:	b2d2      	uxtb	r2, r2
100031dc:	1c11      	adds	r1, r2, #0
100031de:	4a0f      	ldr	r2, [pc, #60]	; (1000321c <handleNewObject+0xd4>)
100031e0:	009b      	lsls	r3, r3, #2
100031e2:	5099      	str	r1, [r3, r2]
	}
	uart_clear_receivedata();
100031e4:	f7ff fe78 	bl	10002ed8 <uart_clear_receivedata>

	laser(ON);
100031e8:	2001      	movs	r0, #1
100031ea:	f7fe f877 	bl	100012dc <laser>
	LEDStripes(OFF);
100031ee:	2000      	movs	r0, #0
100031f0:	f7fe f88a 	bl	10001308 <LEDStripes>
	productionLine(productionLineSpeed, FORWARD);
100031f4:	4b0a      	ldr	r3, [pc, #40]	; (10003220 <handleNewObject+0xd8>)
100031f6:	681b      	ldr	r3, [r3, #0]
100031f8:	1c18      	adds	r0, r3, #0
100031fa:	2100      	movs	r1, #0
100031fc:	f7fe f8c6 	bl	1000138c <productionLine>
}
10003200:	46bd      	mov	sp, r7
10003202:	bd80      	pop	{r7, pc}
10003204:	200005a0 	.word	0x200005a0
10003208:	10003f6c 	.word	0x10003f6c
1000320c:	2000059b 	.word	0x2000059b
10003210:	200005b0 	.word	0x200005b0
10003214:	10003f84 	.word	0x10003f84
10003218:	2000059c 	.word	0x2000059c
1000321c:	200007b0 	.word	0x200007b0
10003220:	20000520 	.word	0x20000520

10003224 <sortObject>:

void sortObject()
{
10003224:	b580      	push	{r7, lr}
10003226:	b082      	sub	sp, #8
10003228:	af00      	add	r7, sp, #0
	sortObjectMovingAway = 1;
1000322a:	4b24      	ldr	r3, [pc, #144]	; (100032bc <sortObject+0x98>)
1000322c:	2201      	movs	r2, #1
1000322e:	601a      	str	r2, [r3, #0]

	productionLine(0, FORWARD);
10003230:	2000      	movs	r0, #0
10003232:	2100      	movs	r1, #0
10003234:	f7fe f8aa 	bl	1000138c <productionLine>
	if (nextObjects[0] == SORTOUT)
10003238:	4b21      	ldr	r3, [pc, #132]	; (100032c0 <sortObject+0x9c>)
1000323a:	681b      	ldr	r3, [r3, #0]
1000323c:	2b01      	cmp	r3, #1
1000323e:	d117      	bne.n	10003270 <sortObject+0x4c>
	{
		slider(50000, SLIDERFORWARD);
10003240:	4b20      	ldr	r3, [pc, #128]	; (100032c4 <sortObject+0xa0>)
10003242:	1c18      	adds	r0, r3, #0
10003244:	2100      	movs	r1, #0
10003246:	f7fe f9a1 	bl	1000158c <slider>
		while (readInductivSensor2() == 0)
1000324a:	46c0      	nop			; (mov r8, r8)
1000324c:	f7fe f994 	bl	10001578 <readInductivSensor2>
10003250:	1e03      	subs	r3, r0, #0
10003252:	d0fb      	beq.n	1000324c <sortObject+0x28>
			;
		slider(50000, SLIDERBACKWARD);
10003254:	4b1b      	ldr	r3, [pc, #108]	; (100032c4 <sortObject+0xa0>)
10003256:	1c18      	adds	r0, r3, #0
10003258:	2101      	movs	r1, #1
1000325a:	f7fe f997 	bl	1000158c <slider>
		while (readInductivSensor1() == 0)
1000325e:	46c0      	nop			; (mov r8, r8)
10003260:	f7fe f980 	bl	10001564 <readInductivSensor1>
10003264:	1e03      	subs	r3, r0, #0
10003266:	d0fb      	beq.n	10003260 <sortObject+0x3c>
			;
		// slider stops
		slider(0, SLIDERFORWARD);
10003268:	2000      	movs	r0, #0
1000326a:	2100      	movs	r1, #0
1000326c:	f7fe f98e 	bl	1000158c <slider>
	}
	// Shift the nextObjects array elements left, deleting the first element
	for (int i = 1; i < numObjects; i++)
10003270:	2301      	movs	r3, #1
10003272:	607b      	str	r3, [r7, #4]
10003274:	e00b      	b.n	1000328e <sortObject+0x6a>
	{
		nextObjects[i - 1] = nextObjects[i];
10003276:	687b      	ldr	r3, [r7, #4]
10003278:	1e5a      	subs	r2, r3, #1
1000327a:	4b11      	ldr	r3, [pc, #68]	; (100032c0 <sortObject+0x9c>)
1000327c:	6879      	ldr	r1, [r7, #4]
1000327e:	0089      	lsls	r1, r1, #2
10003280:	58c9      	ldr	r1, [r1, r3]
10003282:	4b0f      	ldr	r3, [pc, #60]	; (100032c0 <sortObject+0x9c>)
10003284:	0092      	lsls	r2, r2, #2
10003286:	50d1      	str	r1, [r2, r3]
			;
		// slider stops
		slider(0, SLIDERFORWARD);
	}
	// Shift the nextObjects array elements left, deleting the first element
	for (int i = 1; i < numObjects; i++)
10003288:	687b      	ldr	r3, [r7, #4]
1000328a:	3301      	adds	r3, #1
1000328c:	607b      	str	r3, [r7, #4]
1000328e:	4b0e      	ldr	r3, [pc, #56]	; (100032c8 <sortObject+0xa4>)
10003290:	681b      	ldr	r3, [r3, #0]
10003292:	687a      	ldr	r2, [r7, #4]
10003294:	429a      	cmp	r2, r3
10003296:	dbee      	blt.n	10003276 <sortObject+0x52>
	{
		nextObjects[i - 1] = nextObjects[i];
	}
	if (numObjects > 0)
10003298:	4b0b      	ldr	r3, [pc, #44]	; (100032c8 <sortObject+0xa4>)
1000329a:	681b      	ldr	r3, [r3, #0]
1000329c:	2b00      	cmp	r3, #0
1000329e:	dd04      	ble.n	100032aa <sortObject+0x86>
		numObjects--; // Decrease the objects count after sorting one out
100032a0:	4b09      	ldr	r3, [pc, #36]	; (100032c8 <sortObject+0xa4>)
100032a2:	681b      	ldr	r3, [r3, #0]
100032a4:	1e5a      	subs	r2, r3, #1
100032a6:	4b08      	ldr	r3, [pc, #32]	; (100032c8 <sortObject+0xa4>)
100032a8:	601a      	str	r2, [r3, #0]
	productionLine(productionLineSpeed, FORWARD);
100032aa:	4b08      	ldr	r3, [pc, #32]	; (100032cc <sortObject+0xa8>)
100032ac:	681b      	ldr	r3, [r3, #0]
100032ae:	1c18      	adds	r0, r3, #0
100032b0:	2100      	movs	r1, #0
100032b2:	f7fe f86b 	bl	1000138c <productionLine>
}
100032b6:	46bd      	mov	sp, r7
100032b8:	b002      	add	sp, #8
100032ba:	bd80      	pop	{r7, pc}
100032bc:	200005a4 	.word	0x200005a4
100032c0:	200007b0 	.word	0x200007b0
100032c4:	0000c350 	.word	0x0000c350
100032c8:	2000059c 	.word	0x2000059c
100032cc:	20000520 	.word	0x20000520

100032d0 <test>:

void test(int onOrOff)
{
100032d0:	b580      	push	{r7, lr}
100032d2:	b082      	sub	sp, #8
100032d4:	af00      	add	r7, sp, #0
100032d6:	6078      	str	r0, [r7, #4]
	if (!onOrOff)
100032d8:	687b      	ldr	r3, [r7, #4]
100032da:	2b00      	cmp	r3, #0
100032dc:	d110      	bne.n	10003300 <test+0x30>
	{
		// shut everything down
		laser(OFF);
100032de:	2000      	movs	r0, #0
100032e0:	f7fd fffc 	bl	100012dc <laser>
		LEDStripes(OFF);
100032e4:	2000      	movs	r0, #0
100032e6:	f7fe f80f 	bl	10001308 <LEDStripes>
		redLED(OFF);
100032ea:	2000      	movs	r0, #0
100032ec:	f7fe f822 	bl	10001334 <redLED>
		greenLED(OFF);
100032f0:	2000      	movs	r0, #0
100032f2:	f7fe f835 	bl	10001360 <greenLED>
		productionLine(0, FORWARD);
100032f6:	2000      	movs	r0, #0
100032f8:	2100      	movs	r1, #0
100032fa:	f7fe f847 	bl	1000138c <productionLine>
		return;
100032fe:	e07f      	b.n	10003400 <test+0x130>
	}

	// light test: manual check
	laser(ON);
10003300:	2001      	movs	r0, #1
10003302:	f7fd ffeb 	bl	100012dc <laser>
	LEDStripes(ON);
10003306:	2001      	movs	r0, #1
10003308:	f7fd fffe 	bl	10001308 <LEDStripes>
	redLED(ON);
1000330c:	2001      	movs	r0, #1
1000330e:	f7fe f811 	bl	10001334 <redLED>
	greenLED(ON);
10003312:	2001      	movs	r0, #1
10003314:	f7fe f824 	bl	10001360 <greenLED>
	delay_ms(5000);
10003318:	4b3b      	ldr	r3, [pc, #236]	; (10003408 <test+0x138>)
1000331a:	1c18      	adds	r0, r3, #0
1000331c:	f7ff fad4 	bl	100028c8 <delay_ms>
	LEDStripes(OFF);
10003320:	2000      	movs	r0, #0
10003322:	f7fd fff1 	bl	10001308 <LEDStripes>
	redLED(OFF);
10003326:	2000      	movs	r0, #0
10003328:	f7fe f804 	bl	10001334 <redLED>
	greenLED(OFF);
1000332c:	2000      	movs	r0, #0
1000332e:	f7fe f817 	bl	10001360 <greenLED>
	delay_ms(2000);
10003332:	23fa      	movs	r3, #250	; 0xfa
10003334:	00db      	lsls	r3, r3, #3
10003336:	1c18      	adds	r0, r3, #0
10003338:	f7ff fac6 	bl	100028c8 <delay_ms>

	// check lightbarriers: automatic check
	if (lightBarrier1())
1000333c:	f7fe f846 	bl	100013cc <lightBarrier1>
10003340:	1e03      	subs	r3, r0, #0
10003342:	d003      	beq.n	1000334c <test+0x7c>
	{
		greenLED(ON);
10003344:	2001      	movs	r0, #1
10003346:	f7fe f80b 	bl	10001360 <greenLED>
1000334a:	e002      	b.n	10003352 <test+0x82>
	}
	else
	{
		redLED(ON);
1000334c:	2001      	movs	r0, #1
1000334e:	f7fd fff1 	bl	10001334 <redLED>
	}
	delay_ms(1000);
10003352:	23fa      	movs	r3, #250	; 0xfa
10003354:	009b      	lsls	r3, r3, #2
10003356:	1c18      	adds	r0, r3, #0
10003358:	f7ff fab6 	bl	100028c8 <delay_ms>
	redLED(OFF);
1000335c:	2000      	movs	r0, #0
1000335e:	f7fd ffe9 	bl	10001334 <redLED>
	greenLED(OFF);
10003362:	2000      	movs	r0, #0
10003364:	f7fd fffc 	bl	10001360 <greenLED>
	delay_ms(500);
10003368:	23fa      	movs	r3, #250	; 0xfa
1000336a:	005b      	lsls	r3, r3, #1
1000336c:	1c18      	adds	r0, r3, #0
1000336e:	f7ff faab 	bl	100028c8 <delay_ms>
	if (lightBarrier2())
10003372:	f7fe f857 	bl	10001424 <lightBarrier2>
10003376:	1e03      	subs	r3, r0, #0
10003378:	d003      	beq.n	10003382 <test+0xb2>
	{
		greenLED(ON);
1000337a:	2001      	movs	r0, #1
1000337c:	f7fd fff0 	bl	10001360 <greenLED>
10003380:	e002      	b.n	10003388 <test+0xb8>
	}
	else
	{
		redLED(ON);
10003382:	2001      	movs	r0, #1
10003384:	f7fd ffd6 	bl	10001334 <redLED>
	}
	delay_ms(1000);
10003388:	23fa      	movs	r3, #250	; 0xfa
1000338a:	009b      	lsls	r3, r3, #2
1000338c:	1c18      	adds	r0, r3, #0
1000338e:	f7ff fa9b 	bl	100028c8 <delay_ms>
	redLED(OFF);
10003392:	2000      	movs	r0, #0
10003394:	f7fd ffce 	bl	10001334 <redLED>
	greenLED(OFF);
10003398:	2000      	movs	r0, #0
1000339a:	f7fd ffe1 	bl	10001360 <greenLED>
	delay_ms(500);
1000339e:	23fa      	movs	r3, #250	; 0xfa
100033a0:	005b      	lsls	r3, r3, #1
100033a2:	1c18      	adds	r0, r3, #0
100033a4:	f7ff fa90 	bl	100028c8 <delay_ms>
	if (lightBarrier3())
100033a8:	f7fe f868 	bl	1000147c <lightBarrier3>
100033ac:	1e03      	subs	r3, r0, #0
100033ae:	d003      	beq.n	100033b8 <test+0xe8>
	{
		greenLED(ON);
100033b0:	2001      	movs	r0, #1
100033b2:	f7fd ffd5 	bl	10001360 <greenLED>
100033b6:	e002      	b.n	100033be <test+0xee>
	}
	else
	{
		redLED(ON);
100033b8:	2001      	movs	r0, #1
100033ba:	f7fd ffbb 	bl	10001334 <redLED>
	}
	delay_ms(1000);
100033be:	23fa      	movs	r3, #250	; 0xfa
100033c0:	009b      	lsls	r3, r3, #2
100033c2:	1c18      	adds	r0, r3, #0
100033c4:	f7ff fa80 	bl	100028c8 <delay_ms>
	redLED(OFF);
100033c8:	2000      	movs	r0, #0
100033ca:	f7fd ffb3 	bl	10001334 <redLED>
	greenLED(OFF);
100033ce:	2000      	movs	r0, #0
100033d0:	f7fd ffc6 	bl	10001360 <greenLED>
	 delay_ms(1000);
	 productionLine(0, FORWARD);
	 */

	// check pneumatics1
	pneumatics1(OUT);
100033d4:	2001      	movs	r0, #1
100033d6:	f7fe f87d 	bl	100014d4 <pneumatics1>
	delay_ms(1000);
100033da:	23fa      	movs	r3, #250	; 0xfa
100033dc:	009b      	lsls	r3, r3, #2
100033de:	1c18      	adds	r0, r3, #0
100033e0:	f7ff fa72 	bl	100028c8 <delay_ms>
	pneumatics1(IN);
100033e4:	2000      	movs	r0, #0
100033e6:	f7fe f875 	bl	100014d4 <pneumatics1>
	pneumatics2(OUT);
100033ea:	2001      	movs	r0, #1
100033ec:	f7fe f888 	bl	10001500 <pneumatics2>
	delay_ms(1000);
100033f0:	23fa      	movs	r3, #250	; 0xfa
100033f2:	009b      	lsls	r3, r3, #2
100033f4:	1c18      	adds	r0, r3, #0
100033f6:	f7ff fa67 	bl	100028c8 <delay_ms>
	pneumatics2(IN);
100033fa:	2000      	movs	r0, #0
100033fc:	f7fe f880 	bl	10001500 <pneumatics2>
}
10003400:	46bd      	mov	sp, r7
10003402:	b002      	add	sp, #8
10003404:	bd80      	pop	{r7, pc}
10003406:	46c0      	nop			; (mov r8, r8)
10003408:	00001388 	.word	0x00001388

1000340c <__aeabi_uidiv>:
1000340c:	2200      	movs	r2, #0
1000340e:	0843      	lsrs	r3, r0, #1
10003410:	428b      	cmp	r3, r1
10003412:	d374      	bcc.n	100034fe <__aeabi_uidiv+0xf2>
10003414:	0903      	lsrs	r3, r0, #4
10003416:	428b      	cmp	r3, r1
10003418:	d35f      	bcc.n	100034da <__aeabi_uidiv+0xce>
1000341a:	0a03      	lsrs	r3, r0, #8
1000341c:	428b      	cmp	r3, r1
1000341e:	d344      	bcc.n	100034aa <__aeabi_uidiv+0x9e>
10003420:	0b03      	lsrs	r3, r0, #12
10003422:	428b      	cmp	r3, r1
10003424:	d328      	bcc.n	10003478 <__aeabi_uidiv+0x6c>
10003426:	0c03      	lsrs	r3, r0, #16
10003428:	428b      	cmp	r3, r1
1000342a:	d30d      	bcc.n	10003448 <__aeabi_uidiv+0x3c>
1000342c:	22ff      	movs	r2, #255	; 0xff
1000342e:	0209      	lsls	r1, r1, #8
10003430:	ba12      	rev	r2, r2
10003432:	0c03      	lsrs	r3, r0, #16
10003434:	428b      	cmp	r3, r1
10003436:	d302      	bcc.n	1000343e <__aeabi_uidiv+0x32>
10003438:	1212      	asrs	r2, r2, #8
1000343a:	0209      	lsls	r1, r1, #8
1000343c:	d065      	beq.n	1000350a <__aeabi_uidiv+0xfe>
1000343e:	0b03      	lsrs	r3, r0, #12
10003440:	428b      	cmp	r3, r1
10003442:	d319      	bcc.n	10003478 <__aeabi_uidiv+0x6c>
10003444:	e000      	b.n	10003448 <__aeabi_uidiv+0x3c>
10003446:	0a09      	lsrs	r1, r1, #8
10003448:	0bc3      	lsrs	r3, r0, #15
1000344a:	428b      	cmp	r3, r1
1000344c:	d301      	bcc.n	10003452 <__aeabi_uidiv+0x46>
1000344e:	03cb      	lsls	r3, r1, #15
10003450:	1ac0      	subs	r0, r0, r3
10003452:	4152      	adcs	r2, r2
10003454:	0b83      	lsrs	r3, r0, #14
10003456:	428b      	cmp	r3, r1
10003458:	d301      	bcc.n	1000345e <__aeabi_uidiv+0x52>
1000345a:	038b      	lsls	r3, r1, #14
1000345c:	1ac0      	subs	r0, r0, r3
1000345e:	4152      	adcs	r2, r2
10003460:	0b43      	lsrs	r3, r0, #13
10003462:	428b      	cmp	r3, r1
10003464:	d301      	bcc.n	1000346a <__aeabi_uidiv+0x5e>
10003466:	034b      	lsls	r3, r1, #13
10003468:	1ac0      	subs	r0, r0, r3
1000346a:	4152      	adcs	r2, r2
1000346c:	0b03      	lsrs	r3, r0, #12
1000346e:	428b      	cmp	r3, r1
10003470:	d301      	bcc.n	10003476 <__aeabi_uidiv+0x6a>
10003472:	030b      	lsls	r3, r1, #12
10003474:	1ac0      	subs	r0, r0, r3
10003476:	4152      	adcs	r2, r2
10003478:	0ac3      	lsrs	r3, r0, #11
1000347a:	428b      	cmp	r3, r1
1000347c:	d301      	bcc.n	10003482 <__aeabi_uidiv+0x76>
1000347e:	02cb      	lsls	r3, r1, #11
10003480:	1ac0      	subs	r0, r0, r3
10003482:	4152      	adcs	r2, r2
10003484:	0a83      	lsrs	r3, r0, #10
10003486:	428b      	cmp	r3, r1
10003488:	d301      	bcc.n	1000348e <__aeabi_uidiv+0x82>
1000348a:	028b      	lsls	r3, r1, #10
1000348c:	1ac0      	subs	r0, r0, r3
1000348e:	4152      	adcs	r2, r2
10003490:	0a43      	lsrs	r3, r0, #9
10003492:	428b      	cmp	r3, r1
10003494:	d301      	bcc.n	1000349a <__aeabi_uidiv+0x8e>
10003496:	024b      	lsls	r3, r1, #9
10003498:	1ac0      	subs	r0, r0, r3
1000349a:	4152      	adcs	r2, r2
1000349c:	0a03      	lsrs	r3, r0, #8
1000349e:	428b      	cmp	r3, r1
100034a0:	d301      	bcc.n	100034a6 <__aeabi_uidiv+0x9a>
100034a2:	020b      	lsls	r3, r1, #8
100034a4:	1ac0      	subs	r0, r0, r3
100034a6:	4152      	adcs	r2, r2
100034a8:	d2cd      	bcs.n	10003446 <__aeabi_uidiv+0x3a>
100034aa:	09c3      	lsrs	r3, r0, #7
100034ac:	428b      	cmp	r3, r1
100034ae:	d301      	bcc.n	100034b4 <__aeabi_uidiv+0xa8>
100034b0:	01cb      	lsls	r3, r1, #7
100034b2:	1ac0      	subs	r0, r0, r3
100034b4:	4152      	adcs	r2, r2
100034b6:	0983      	lsrs	r3, r0, #6
100034b8:	428b      	cmp	r3, r1
100034ba:	d301      	bcc.n	100034c0 <__aeabi_uidiv+0xb4>
100034bc:	018b      	lsls	r3, r1, #6
100034be:	1ac0      	subs	r0, r0, r3
100034c0:	4152      	adcs	r2, r2
100034c2:	0943      	lsrs	r3, r0, #5
100034c4:	428b      	cmp	r3, r1
100034c6:	d301      	bcc.n	100034cc <__aeabi_uidiv+0xc0>
100034c8:	014b      	lsls	r3, r1, #5
100034ca:	1ac0      	subs	r0, r0, r3
100034cc:	4152      	adcs	r2, r2
100034ce:	0903      	lsrs	r3, r0, #4
100034d0:	428b      	cmp	r3, r1
100034d2:	d301      	bcc.n	100034d8 <__aeabi_uidiv+0xcc>
100034d4:	010b      	lsls	r3, r1, #4
100034d6:	1ac0      	subs	r0, r0, r3
100034d8:	4152      	adcs	r2, r2
100034da:	08c3      	lsrs	r3, r0, #3
100034dc:	428b      	cmp	r3, r1
100034de:	d301      	bcc.n	100034e4 <__aeabi_uidiv+0xd8>
100034e0:	00cb      	lsls	r3, r1, #3
100034e2:	1ac0      	subs	r0, r0, r3
100034e4:	4152      	adcs	r2, r2
100034e6:	0883      	lsrs	r3, r0, #2
100034e8:	428b      	cmp	r3, r1
100034ea:	d301      	bcc.n	100034f0 <__aeabi_uidiv+0xe4>
100034ec:	008b      	lsls	r3, r1, #2
100034ee:	1ac0      	subs	r0, r0, r3
100034f0:	4152      	adcs	r2, r2
100034f2:	0843      	lsrs	r3, r0, #1
100034f4:	428b      	cmp	r3, r1
100034f6:	d301      	bcc.n	100034fc <__aeabi_uidiv+0xf0>
100034f8:	004b      	lsls	r3, r1, #1
100034fa:	1ac0      	subs	r0, r0, r3
100034fc:	4152      	adcs	r2, r2
100034fe:	1a41      	subs	r1, r0, r1
10003500:	d200      	bcs.n	10003504 <__aeabi_uidiv+0xf8>
10003502:	4601      	mov	r1, r0
10003504:	4152      	adcs	r2, r2
10003506:	4610      	mov	r0, r2
10003508:	4770      	bx	lr
1000350a:	e7ff      	b.n	1000350c <__aeabi_uidiv+0x100>
1000350c:	b501      	push	{r0, lr}
1000350e:	2000      	movs	r0, #0
10003510:	f000 f80c 	bl	1000352c <__aeabi_idiv0>
10003514:	bd02      	pop	{r1, pc}
10003516:	46c0      	nop			; (mov r8, r8)

10003518 <__aeabi_uidivmod>:
10003518:	2900      	cmp	r1, #0
1000351a:	d0f7      	beq.n	1000350c <__aeabi_uidiv+0x100>
1000351c:	b503      	push	{r0, r1, lr}
1000351e:	f7ff ff75 	bl	1000340c <__aeabi_uidiv>
10003522:	bc0e      	pop	{r1, r2, r3}
10003524:	4342      	muls	r2, r0
10003526:	1a89      	subs	r1, r1, r2
10003528:	4718      	bx	r3
1000352a:	46c0      	nop			; (mov r8, r8)

1000352c <__aeabi_idiv0>:
1000352c:	4770      	bx	lr
1000352e:	46c0      	nop			; (mov r8, r8)

10003530 <__errno>:
10003530:	4b01      	ldr	r3, [pc, #4]	; (10003538 <__errno+0x8>)
10003532:	6818      	ldr	r0, [r3, #0]
10003534:	4770      	bx	lr
10003536:	46c0      	nop			; (mov r8, r8)
10003538:	20000584 	.word	0x20000584

1000353c <__libc_init_array>:
1000353c:	4b0e      	ldr	r3, [pc, #56]	; (10003578 <__libc_init_array+0x3c>)
1000353e:	b570      	push	{r4, r5, r6, lr}
10003540:	2500      	movs	r5, #0
10003542:	1c1e      	adds	r6, r3, #0
10003544:	4c0d      	ldr	r4, [pc, #52]	; (1000357c <__libc_init_array+0x40>)
10003546:	1ae4      	subs	r4, r4, r3
10003548:	10a4      	asrs	r4, r4, #2
1000354a:	42a5      	cmp	r5, r4
1000354c:	d004      	beq.n	10003558 <__libc_init_array+0x1c>
1000354e:	00ab      	lsls	r3, r5, #2
10003550:	58f3      	ldr	r3, [r6, r3]
10003552:	4798      	blx	r3
10003554:	3501      	adds	r5, #1
10003556:	e7f8      	b.n	1000354a <__libc_init_array+0xe>
10003558:	f7fd fe46 	bl	100011e8 <_init>
1000355c:	4b08      	ldr	r3, [pc, #32]	; (10003580 <__libc_init_array+0x44>)
1000355e:	2500      	movs	r5, #0
10003560:	1c1e      	adds	r6, r3, #0
10003562:	4c08      	ldr	r4, [pc, #32]	; (10003584 <__libc_init_array+0x48>)
10003564:	1ae4      	subs	r4, r4, r3
10003566:	10a4      	asrs	r4, r4, #2
10003568:	42a5      	cmp	r5, r4
1000356a:	d004      	beq.n	10003576 <__libc_init_array+0x3a>
1000356c:	00ab      	lsls	r3, r5, #2
1000356e:	58f3      	ldr	r3, [r6, r3]
10003570:	4798      	blx	r3
10003572:	3501      	adds	r5, #1
10003574:	e7f8      	b.n	10003568 <__libc_init_array+0x2c>
10003576:	bd70      	pop	{r4, r5, r6, pc}
10003578:	2000058c 	.word	0x2000058c
1000357c:	2000058c 	.word	0x2000058c
10003580:	2000058c 	.word	0x2000058c
10003584:	2000058c 	.word	0x2000058c

10003588 <siprintf>:
10003588:	b40e      	push	{r1, r2, r3}
1000358a:	b510      	push	{r4, lr}
1000358c:	b09d      	sub	sp, #116	; 0x74
1000358e:	a902      	add	r1, sp, #8
10003590:	9002      	str	r0, [sp, #8]
10003592:	6108      	str	r0, [r1, #16]
10003594:	480b      	ldr	r0, [pc, #44]	; (100035c4 <siprintf+0x3c>)
10003596:	2482      	movs	r4, #130	; 0x82
10003598:	6088      	str	r0, [r1, #8]
1000359a:	6148      	str	r0, [r1, #20]
1000359c:	2001      	movs	r0, #1
1000359e:	4240      	negs	r0, r0
100035a0:	ab1f      	add	r3, sp, #124	; 0x7c
100035a2:	81c8      	strh	r0, [r1, #14]
100035a4:	4808      	ldr	r0, [pc, #32]	; (100035c8 <siprintf+0x40>)
100035a6:	cb04      	ldmia	r3!, {r2}
100035a8:	00a4      	lsls	r4, r4, #2
100035aa:	6800      	ldr	r0, [r0, #0]
100035ac:	9301      	str	r3, [sp, #4]
100035ae:	818c      	strh	r4, [r1, #12]
100035b0:	f000 f91e 	bl	100037f0 <_svfiprintf_r>
100035b4:	2300      	movs	r3, #0
100035b6:	9a02      	ldr	r2, [sp, #8]
100035b8:	7013      	strb	r3, [r2, #0]
100035ba:	b01d      	add	sp, #116	; 0x74
100035bc:	bc10      	pop	{r4}
100035be:	bc08      	pop	{r3}
100035c0:	b003      	add	sp, #12
100035c2:	4718      	bx	r3
100035c4:	7fffffff 	.word	0x7fffffff
100035c8:	20000584 	.word	0x20000584

100035cc <strncmp>:
100035cc:	2300      	movs	r3, #0
100035ce:	b530      	push	{r4, r5, lr}
100035d0:	429a      	cmp	r2, r3
100035d2:	d00d      	beq.n	100035f0 <strncmp+0x24>
100035d4:	3a01      	subs	r2, #1
100035d6:	5cc4      	ldrb	r4, [r0, r3]
100035d8:	5ccd      	ldrb	r5, [r1, r3]
100035da:	42ac      	cmp	r4, r5
100035dc:	d102      	bne.n	100035e4 <strncmp+0x18>
100035de:	4293      	cmp	r3, r2
100035e0:	d102      	bne.n	100035e8 <strncmp+0x1c>
100035e2:	1c25      	adds	r5, r4, #0
100035e4:	1b63      	subs	r3, r4, r5
100035e6:	e003      	b.n	100035f0 <strncmp+0x24>
100035e8:	3301      	adds	r3, #1
100035ea:	2c00      	cmp	r4, #0
100035ec:	d1f3      	bne.n	100035d6 <strncmp+0xa>
100035ee:	e7f8      	b.n	100035e2 <strncmp+0x16>
100035f0:	1c18      	adds	r0, r3, #0
100035f2:	bd30      	pop	{r4, r5, pc}

100035f4 <_strtol_r>:
100035f4:	b5f0      	push	{r4, r5, r6, r7, lr}
100035f6:	1c1e      	adds	r6, r3, #0
100035f8:	4b44      	ldr	r3, [pc, #272]	; (1000370c <_strtol_r+0x118>)
100035fa:	b087      	sub	sp, #28
100035fc:	681b      	ldr	r3, [r3, #0]
100035fe:	9005      	str	r0, [sp, #20]
10003600:	9302      	str	r3, [sp, #8]
10003602:	1c0b      	adds	r3, r1, #0
10003604:	9103      	str	r1, [sp, #12]
10003606:	9201      	str	r2, [sp, #4]
10003608:	781c      	ldrb	r4, [r3, #0]
1000360a:	9a02      	ldr	r2, [sp, #8]
1000360c:	1c5d      	adds	r5, r3, #1
1000360e:	1912      	adds	r2, r2, r4
10003610:	7850      	ldrb	r0, [r2, #1]
10003612:	2208      	movs	r2, #8
10003614:	4010      	ands	r0, r2
10003616:	d001      	beq.n	1000361c <_strtol_r+0x28>
10003618:	1c2b      	adds	r3, r5, #0
1000361a:	e7f5      	b.n	10003608 <_strtol_r+0x14>
1000361c:	2c2d      	cmp	r4, #45	; 0x2d
1000361e:	d104      	bne.n	1000362a <_strtol_r+0x36>
10003620:	1c9d      	adds	r5, r3, #2
10003622:	785c      	ldrb	r4, [r3, #1]
10003624:	2301      	movs	r3, #1
10003626:	9300      	str	r3, [sp, #0]
10003628:	e004      	b.n	10003634 <_strtol_r+0x40>
1000362a:	9000      	str	r0, [sp, #0]
1000362c:	2c2b      	cmp	r4, #43	; 0x2b
1000362e:	d101      	bne.n	10003634 <_strtol_r+0x40>
10003630:	785c      	ldrb	r4, [r3, #1]
10003632:	1c9d      	adds	r5, r3, #2
10003634:	2e00      	cmp	r6, #0
10003636:	d002      	beq.n	1000363e <_strtol_r+0x4a>
10003638:	2e10      	cmp	r6, #16
1000363a:	d10a      	bne.n	10003652 <_strtol_r+0x5e>
1000363c:	e060      	b.n	10003700 <_strtol_r+0x10c>
1000363e:	2c30      	cmp	r4, #48	; 0x30
10003640:	d15c      	bne.n	100036fc <_strtol_r+0x108>
10003642:	2220      	movs	r2, #32
10003644:	782b      	ldrb	r3, [r5, #0]
10003646:	4393      	bics	r3, r2
10003648:	2b58      	cmp	r3, #88	; 0x58
1000364a:	d152      	bne.n	100036f2 <_strtol_r+0xfe>
1000364c:	2610      	movs	r6, #16
1000364e:	786c      	ldrb	r4, [r5, #1]
10003650:	3502      	adds	r5, #2
10003652:	9f00      	ldr	r7, [sp, #0]
10003654:	1c31      	adds	r1, r6, #0
10003656:	1e7b      	subs	r3, r7, #1
10003658:	419f      	sbcs	r7, r3
1000365a:	4b2d      	ldr	r3, [pc, #180]	; (10003710 <_strtol_r+0x11c>)
1000365c:	18ff      	adds	r7, r7, r3
1000365e:	1c38      	adds	r0, r7, #0
10003660:	f7ff ff5a 	bl	10003518 <__aeabi_uidivmod>
10003664:	1c38      	adds	r0, r7, #0
10003666:	9104      	str	r1, [sp, #16]
10003668:	1c31      	adds	r1, r6, #0
1000366a:	f7ff fecf 	bl	1000340c <__aeabi_uidiv>
1000366e:	2200      	movs	r2, #0
10003670:	1c07      	adds	r7, r0, #0
10003672:	1c13      	adds	r3, r2, #0
10003674:	9902      	ldr	r1, [sp, #8]
10003676:	1909      	adds	r1, r1, r4
10003678:	7849      	ldrb	r1, [r1, #1]
1000367a:	0748      	lsls	r0, r1, #29
1000367c:	d501      	bpl.n	10003682 <_strtol_r+0x8e>
1000367e:	3c30      	subs	r4, #48	; 0x30
10003680:	e007      	b.n	10003692 <_strtol_r+0x9e>
10003682:	2003      	movs	r0, #3
10003684:	4008      	ands	r0, r1
10003686:	d017      	beq.n	100036b8 <_strtol_r+0xc4>
10003688:	2137      	movs	r1, #55	; 0x37
1000368a:	2801      	cmp	r0, #1
1000368c:	d000      	beq.n	10003690 <_strtol_r+0x9c>
1000368e:	3120      	adds	r1, #32
10003690:	1a64      	subs	r4, r4, r1
10003692:	42b4      	cmp	r4, r6
10003694:	da10      	bge.n	100036b8 <_strtol_r+0xc4>
10003696:	1c51      	adds	r1, r2, #1
10003698:	d00b      	beq.n	100036b2 <_strtol_r+0xbe>
1000369a:	42bb      	cmp	r3, r7
1000369c:	d807      	bhi.n	100036ae <_strtol_r+0xba>
1000369e:	d102      	bne.n	100036a6 <_strtol_r+0xb2>
100036a0:	9a04      	ldr	r2, [sp, #16]
100036a2:	4294      	cmp	r4, r2
100036a4:	dc03      	bgt.n	100036ae <_strtol_r+0xba>
100036a6:	4373      	muls	r3, r6
100036a8:	2201      	movs	r2, #1
100036aa:	18e3      	adds	r3, r4, r3
100036ac:	e001      	b.n	100036b2 <_strtol_r+0xbe>
100036ae:	2201      	movs	r2, #1
100036b0:	4252      	negs	r2, r2
100036b2:	782c      	ldrb	r4, [r5, #0]
100036b4:	3501      	adds	r5, #1
100036b6:	e7dd      	b.n	10003674 <_strtol_r+0x80>
100036b8:	1c18      	adds	r0, r3, #0
100036ba:	1c51      	adds	r1, r2, #1
100036bc:	d10b      	bne.n	100036d6 <_strtol_r+0xe2>
100036be:	9800      	ldr	r0, [sp, #0]
100036c0:	9a05      	ldr	r2, [sp, #20]
100036c2:	1e43      	subs	r3, r0, #1
100036c4:	4198      	sbcs	r0, r3
100036c6:	4b12      	ldr	r3, [pc, #72]	; (10003710 <_strtol_r+0x11c>)
100036c8:	18c0      	adds	r0, r0, r3
100036ca:	2322      	movs	r3, #34	; 0x22
100036cc:	6013      	str	r3, [r2, #0]
100036ce:	9b01      	ldr	r3, [sp, #4]
100036d0:	2b00      	cmp	r3, #0
100036d2:	d10a      	bne.n	100036ea <_strtol_r+0xf6>
100036d4:	e017      	b.n	10003706 <_strtol_r+0x112>
100036d6:	9900      	ldr	r1, [sp, #0]
100036d8:	2900      	cmp	r1, #0
100036da:	d000      	beq.n	100036de <_strtol_r+0xea>
100036dc:	4258      	negs	r0, r3
100036de:	9b01      	ldr	r3, [sp, #4]
100036e0:	2b00      	cmp	r3, #0
100036e2:	d010      	beq.n	10003706 <_strtol_r+0x112>
100036e4:	9b03      	ldr	r3, [sp, #12]
100036e6:	2a00      	cmp	r2, #0
100036e8:	d000      	beq.n	100036ec <_strtol_r+0xf8>
100036ea:	1e6b      	subs	r3, r5, #1
100036ec:	9a01      	ldr	r2, [sp, #4]
100036ee:	6013      	str	r3, [r2, #0]
100036f0:	e009      	b.n	10003706 <_strtol_r+0x112>
100036f2:	2430      	movs	r4, #48	; 0x30
100036f4:	2e00      	cmp	r6, #0
100036f6:	d1ac      	bne.n	10003652 <_strtol_r+0x5e>
100036f8:	2608      	movs	r6, #8
100036fa:	e7aa      	b.n	10003652 <_strtol_r+0x5e>
100036fc:	260a      	movs	r6, #10
100036fe:	e7a8      	b.n	10003652 <_strtol_r+0x5e>
10003700:	2c30      	cmp	r4, #48	; 0x30
10003702:	d1a6      	bne.n	10003652 <_strtol_r+0x5e>
10003704:	e79d      	b.n	10003642 <_strtol_r+0x4e>
10003706:	b007      	add	sp, #28
10003708:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000370a:	46c0      	nop			; (mov r8, r8)
1000370c:	20000588 	.word	0x20000588
10003710:	7fffffff 	.word	0x7fffffff

10003714 <strtol>:
10003714:	b538      	push	{r3, r4, r5, lr}
10003716:	1c05      	adds	r5, r0, #0
10003718:	1c0c      	adds	r4, r1, #0
1000371a:	1c13      	adds	r3, r2, #0
1000371c:	4a03      	ldr	r2, [pc, #12]	; (1000372c <strtol+0x18>)
1000371e:	1c29      	adds	r1, r5, #0
10003720:	6810      	ldr	r0, [r2, #0]
10003722:	1c22      	adds	r2, r4, #0
10003724:	f7ff ff66 	bl	100035f4 <_strtol_r>
10003728:	bd38      	pop	{r3, r4, r5, pc}
1000372a:	46c0      	nop			; (mov r8, r8)
1000372c:	20000584 	.word	0x20000584

10003730 <__ssputs_r>:
10003730:	b5f0      	push	{r4, r5, r6, r7, lr}
10003732:	688e      	ldr	r6, [r1, #8]
10003734:	b085      	sub	sp, #20
10003736:	1c07      	adds	r7, r0, #0
10003738:	1c0c      	adds	r4, r1, #0
1000373a:	9203      	str	r2, [sp, #12]
1000373c:	9301      	str	r3, [sp, #4]
1000373e:	42b3      	cmp	r3, r6
10003740:	d345      	bcc.n	100037ce <__ssputs_r+0x9e>
10003742:	2390      	movs	r3, #144	; 0x90
10003744:	898a      	ldrh	r2, [r1, #12]
10003746:	00db      	lsls	r3, r3, #3
10003748:	421a      	tst	r2, r3
1000374a:	d03d      	beq.n	100037c8 <__ssputs_r+0x98>
1000374c:	2503      	movs	r5, #3
1000374e:	6909      	ldr	r1, [r1, #16]
10003750:	6823      	ldr	r3, [r4, #0]
10003752:	9801      	ldr	r0, [sp, #4]
10003754:	1a5b      	subs	r3, r3, r1
10003756:	9302      	str	r3, [sp, #8]
10003758:	6963      	ldr	r3, [r4, #20]
1000375a:	435d      	muls	r5, r3
1000375c:	0feb      	lsrs	r3, r5, #31
1000375e:	195d      	adds	r5, r3, r5
10003760:	9b02      	ldr	r3, [sp, #8]
10003762:	106d      	asrs	r5, r5, #1
10003764:	3301      	adds	r3, #1
10003766:	181b      	adds	r3, r3, r0
10003768:	429d      	cmp	r5, r3
1000376a:	d200      	bcs.n	1000376e <__ssputs_r+0x3e>
1000376c:	1c1d      	adds	r5, r3, #0
1000376e:	1c38      	adds	r0, r7, #0
10003770:	0553      	lsls	r3, r2, #21
10003772:	d50f      	bpl.n	10003794 <__ssputs_r+0x64>
10003774:	1c29      	adds	r1, r5, #0
10003776:	f000 fb25 	bl	10003dc4 <_malloc_r>
1000377a:	1e06      	subs	r6, r0, #0
1000377c:	d013      	beq.n	100037a6 <__ssputs_r+0x76>
1000377e:	9a02      	ldr	r2, [sp, #8]
10003780:	6921      	ldr	r1, [r4, #16]
10003782:	f000 fabc 	bl	10003cfe <memcpy>
10003786:	89a2      	ldrh	r2, [r4, #12]
10003788:	4b18      	ldr	r3, [pc, #96]	; (100037ec <__ssputs_r+0xbc>)
1000378a:	4013      	ands	r3, r2
1000378c:	2280      	movs	r2, #128	; 0x80
1000378e:	4313      	orrs	r3, r2
10003790:	81a3      	strh	r3, [r4, #12]
10003792:	e011      	b.n	100037b8 <__ssputs_r+0x88>
10003794:	1c2a      	adds	r2, r5, #0
10003796:	f000 fb6d 	bl	10003e74 <_realloc_r>
1000379a:	1e06      	subs	r6, r0, #0
1000379c:	d10c      	bne.n	100037b8 <__ssputs_r+0x88>
1000379e:	1c38      	adds	r0, r7, #0
100037a0:	6921      	ldr	r1, [r4, #16]
100037a2:	f000 fac9 	bl	10003d38 <_free_r>
100037a6:	230c      	movs	r3, #12
100037a8:	2240      	movs	r2, #64	; 0x40
100037aa:	2001      	movs	r0, #1
100037ac:	603b      	str	r3, [r7, #0]
100037ae:	89a3      	ldrh	r3, [r4, #12]
100037b0:	4240      	negs	r0, r0
100037b2:	4313      	orrs	r3, r2
100037b4:	81a3      	strh	r3, [r4, #12]
100037b6:	e017      	b.n	100037e8 <__ssputs_r+0xb8>
100037b8:	9b02      	ldr	r3, [sp, #8]
100037ba:	6126      	str	r6, [r4, #16]
100037bc:	18f6      	adds	r6, r6, r3
100037be:	6026      	str	r6, [r4, #0]
100037c0:	6165      	str	r5, [r4, #20]
100037c2:	9e01      	ldr	r6, [sp, #4]
100037c4:	1aed      	subs	r5, r5, r3
100037c6:	60a5      	str	r5, [r4, #8]
100037c8:	9b01      	ldr	r3, [sp, #4]
100037ca:	42b3      	cmp	r3, r6
100037cc:	d200      	bcs.n	100037d0 <__ssputs_r+0xa0>
100037ce:	9e01      	ldr	r6, [sp, #4]
100037d0:	1c32      	adds	r2, r6, #0
100037d2:	6820      	ldr	r0, [r4, #0]
100037d4:	9903      	ldr	r1, [sp, #12]
100037d6:	f000 fa9b 	bl	10003d10 <memmove>
100037da:	2000      	movs	r0, #0
100037dc:	68a3      	ldr	r3, [r4, #8]
100037de:	1b9b      	subs	r3, r3, r6
100037e0:	60a3      	str	r3, [r4, #8]
100037e2:	6823      	ldr	r3, [r4, #0]
100037e4:	199e      	adds	r6, r3, r6
100037e6:	6026      	str	r6, [r4, #0]
100037e8:	b005      	add	sp, #20
100037ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
100037ec:	fffffb7f 	.word	0xfffffb7f

100037f0 <_svfiprintf_r>:
100037f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100037f2:	b09f      	sub	sp, #124	; 0x7c
100037f4:	9002      	str	r0, [sp, #8]
100037f6:	9305      	str	r3, [sp, #20]
100037f8:	898b      	ldrh	r3, [r1, #12]
100037fa:	1c0e      	adds	r6, r1, #0
100037fc:	1c17      	adds	r7, r2, #0
100037fe:	061b      	lsls	r3, r3, #24
10003800:	d510      	bpl.n	10003824 <_svfiprintf_r+0x34>
10003802:	690b      	ldr	r3, [r1, #16]
10003804:	2b00      	cmp	r3, #0
10003806:	d10d      	bne.n	10003824 <_svfiprintf_r+0x34>
10003808:	2140      	movs	r1, #64	; 0x40
1000380a:	f000 fadb 	bl	10003dc4 <_malloc_r>
1000380e:	6030      	str	r0, [r6, #0]
10003810:	6130      	str	r0, [r6, #16]
10003812:	2800      	cmp	r0, #0
10003814:	d104      	bne.n	10003820 <_svfiprintf_r+0x30>
10003816:	230c      	movs	r3, #12
10003818:	9a02      	ldr	r2, [sp, #8]
1000381a:	3801      	subs	r0, #1
1000381c:	6013      	str	r3, [r2, #0]
1000381e:	e0d0      	b.n	100039c2 <_svfiprintf_r+0x1d2>
10003820:	2340      	movs	r3, #64	; 0x40
10003822:	6173      	str	r3, [r6, #20]
10003824:	2300      	movs	r3, #0
10003826:	ad06      	add	r5, sp, #24
10003828:	616b      	str	r3, [r5, #20]
1000382a:	3320      	adds	r3, #32
1000382c:	766b      	strb	r3, [r5, #25]
1000382e:	3310      	adds	r3, #16
10003830:	76ab      	strb	r3, [r5, #26]
10003832:	1c3c      	adds	r4, r7, #0
10003834:	7823      	ldrb	r3, [r4, #0]
10003836:	2b00      	cmp	r3, #0
10003838:	d103      	bne.n	10003842 <_svfiprintf_r+0x52>
1000383a:	1be3      	subs	r3, r4, r7
1000383c:	9304      	str	r3, [sp, #16]
1000383e:	d012      	beq.n	10003866 <_svfiprintf_r+0x76>
10003840:	e003      	b.n	1000384a <_svfiprintf_r+0x5a>
10003842:	2b25      	cmp	r3, #37	; 0x25
10003844:	d0f9      	beq.n	1000383a <_svfiprintf_r+0x4a>
10003846:	3401      	adds	r4, #1
10003848:	e7f4      	b.n	10003834 <_svfiprintf_r+0x44>
1000384a:	9b04      	ldr	r3, [sp, #16]
1000384c:	9802      	ldr	r0, [sp, #8]
1000384e:	1c31      	adds	r1, r6, #0
10003850:	1c3a      	adds	r2, r7, #0
10003852:	f7ff ff6d 	bl	10003730 <__ssputs_r>
10003856:	1c43      	adds	r3, r0, #1
10003858:	d100      	bne.n	1000385c <_svfiprintf_r+0x6c>
1000385a:	e0ac      	b.n	100039b6 <_svfiprintf_r+0x1c6>
1000385c:	696a      	ldr	r2, [r5, #20]
1000385e:	9b04      	ldr	r3, [sp, #16]
10003860:	4694      	mov	ip, r2
10003862:	4463      	add	r3, ip
10003864:	616b      	str	r3, [r5, #20]
10003866:	7823      	ldrb	r3, [r4, #0]
10003868:	2b00      	cmp	r3, #0
1000386a:	d100      	bne.n	1000386e <_svfiprintf_r+0x7e>
1000386c:	e0a3      	b.n	100039b6 <_svfiprintf_r+0x1c6>
1000386e:	2201      	movs	r2, #1
10003870:	2300      	movs	r3, #0
10003872:	4252      	negs	r2, r2
10003874:	606a      	str	r2, [r5, #4]
10003876:	a902      	add	r1, sp, #8
10003878:	3254      	adds	r2, #84	; 0x54
1000387a:	1852      	adds	r2, r2, r1
1000387c:	3401      	adds	r4, #1
1000387e:	602b      	str	r3, [r5, #0]
10003880:	60eb      	str	r3, [r5, #12]
10003882:	60ab      	str	r3, [r5, #8]
10003884:	7013      	strb	r3, [r2, #0]
10003886:	65ab      	str	r3, [r5, #88]	; 0x58
10003888:	4f4f      	ldr	r7, [pc, #316]	; (100039c8 <_svfiprintf_r+0x1d8>)
1000388a:	7821      	ldrb	r1, [r4, #0]
1000388c:	1c38      	adds	r0, r7, #0
1000388e:	2205      	movs	r2, #5
10003890:	f000 fa2a 	bl	10003ce8 <memchr>
10003894:	2800      	cmp	r0, #0
10003896:	d008      	beq.n	100038aa <_svfiprintf_r+0xba>
10003898:	1bc0      	subs	r0, r0, r7
1000389a:	2701      	movs	r7, #1
1000389c:	4087      	lsls	r7, r0
1000389e:	1c38      	adds	r0, r7, #0
100038a0:	682b      	ldr	r3, [r5, #0]
100038a2:	3401      	adds	r4, #1
100038a4:	4318      	orrs	r0, r3
100038a6:	6028      	str	r0, [r5, #0]
100038a8:	e7ee      	b.n	10003888 <_svfiprintf_r+0x98>
100038aa:	682b      	ldr	r3, [r5, #0]
100038ac:	06da      	lsls	r2, r3, #27
100038ae:	d504      	bpl.n	100038ba <_svfiprintf_r+0xca>
100038b0:	2253      	movs	r2, #83	; 0x53
100038b2:	2120      	movs	r1, #32
100038b4:	a802      	add	r0, sp, #8
100038b6:	1812      	adds	r2, r2, r0
100038b8:	7011      	strb	r1, [r2, #0]
100038ba:	071a      	lsls	r2, r3, #28
100038bc:	d504      	bpl.n	100038c8 <_svfiprintf_r+0xd8>
100038be:	2253      	movs	r2, #83	; 0x53
100038c0:	212b      	movs	r1, #43	; 0x2b
100038c2:	a802      	add	r0, sp, #8
100038c4:	1812      	adds	r2, r2, r0
100038c6:	7011      	strb	r1, [r2, #0]
100038c8:	7822      	ldrb	r2, [r4, #0]
100038ca:	2a2a      	cmp	r2, #42	; 0x2a
100038cc:	d001      	beq.n	100038d2 <_svfiprintf_r+0xe2>
100038ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
100038d0:	e00e      	b.n	100038f0 <_svfiprintf_r+0x100>
100038d2:	9a05      	ldr	r2, [sp, #20]
100038d4:	1d11      	adds	r1, r2, #4
100038d6:	6812      	ldr	r2, [r2, #0]
100038d8:	9105      	str	r1, [sp, #20]
100038da:	2a00      	cmp	r2, #0
100038dc:	db01      	blt.n	100038e2 <_svfiprintf_r+0xf2>
100038de:	9209      	str	r2, [sp, #36]	; 0x24
100038e0:	e004      	b.n	100038ec <_svfiprintf_r+0xfc>
100038e2:	4252      	negs	r2, r2
100038e4:	60ea      	str	r2, [r5, #12]
100038e6:	2202      	movs	r2, #2
100038e8:	4313      	orrs	r3, r2
100038ea:	602b      	str	r3, [r5, #0]
100038ec:	3401      	adds	r4, #1
100038ee:	e009      	b.n	10003904 <_svfiprintf_r+0x114>
100038f0:	7822      	ldrb	r2, [r4, #0]
100038f2:	3a30      	subs	r2, #48	; 0x30
100038f4:	2a09      	cmp	r2, #9
100038f6:	d804      	bhi.n	10003902 <_svfiprintf_r+0x112>
100038f8:	210a      	movs	r1, #10
100038fa:	434b      	muls	r3, r1
100038fc:	3401      	adds	r4, #1
100038fe:	189b      	adds	r3, r3, r2
10003900:	e7f6      	b.n	100038f0 <_svfiprintf_r+0x100>
10003902:	9309      	str	r3, [sp, #36]	; 0x24
10003904:	7823      	ldrb	r3, [r4, #0]
10003906:	2b2e      	cmp	r3, #46	; 0x2e
10003908:	d118      	bne.n	1000393c <_svfiprintf_r+0x14c>
1000390a:	7863      	ldrb	r3, [r4, #1]
1000390c:	2b2a      	cmp	r3, #42	; 0x2a
1000390e:	d109      	bne.n	10003924 <_svfiprintf_r+0x134>
10003910:	9b05      	ldr	r3, [sp, #20]
10003912:	3402      	adds	r4, #2
10003914:	1d1a      	adds	r2, r3, #4
10003916:	681b      	ldr	r3, [r3, #0]
10003918:	9205      	str	r2, [sp, #20]
1000391a:	2b00      	cmp	r3, #0
1000391c:	da0d      	bge.n	1000393a <_svfiprintf_r+0x14a>
1000391e:	2301      	movs	r3, #1
10003920:	425b      	negs	r3, r3
10003922:	e00a      	b.n	1000393a <_svfiprintf_r+0x14a>
10003924:	2300      	movs	r3, #0
10003926:	3401      	adds	r4, #1
10003928:	7822      	ldrb	r2, [r4, #0]
1000392a:	3a30      	subs	r2, #48	; 0x30
1000392c:	2a09      	cmp	r2, #9
1000392e:	d804      	bhi.n	1000393a <_svfiprintf_r+0x14a>
10003930:	210a      	movs	r1, #10
10003932:	434b      	muls	r3, r1
10003934:	3401      	adds	r4, #1
10003936:	189b      	adds	r3, r3, r2
10003938:	e7f6      	b.n	10003928 <_svfiprintf_r+0x138>
1000393a:	9307      	str	r3, [sp, #28]
1000393c:	4f23      	ldr	r7, [pc, #140]	; (100039cc <_svfiprintf_r+0x1dc>)
1000393e:	7821      	ldrb	r1, [r4, #0]
10003940:	1c38      	adds	r0, r7, #0
10003942:	2203      	movs	r2, #3
10003944:	f000 f9d0 	bl	10003ce8 <memchr>
10003948:	2800      	cmp	r0, #0
1000394a:	d007      	beq.n	1000395c <_svfiprintf_r+0x16c>
1000394c:	1bc0      	subs	r0, r0, r7
1000394e:	2740      	movs	r7, #64	; 0x40
10003950:	4087      	lsls	r7, r0
10003952:	1c38      	adds	r0, r7, #0
10003954:	682b      	ldr	r3, [r5, #0]
10003956:	3401      	adds	r4, #1
10003958:	4318      	orrs	r0, r3
1000395a:	6028      	str	r0, [r5, #0]
1000395c:	7821      	ldrb	r1, [r4, #0]
1000395e:	481c      	ldr	r0, [pc, #112]	; (100039d0 <_svfiprintf_r+0x1e0>)
10003960:	2206      	movs	r2, #6
10003962:	1c67      	adds	r7, r4, #1
10003964:	7629      	strb	r1, [r5, #24]
10003966:	f000 f9bf 	bl	10003ce8 <memchr>
1000396a:	2800      	cmp	r0, #0
1000396c:	d012      	beq.n	10003994 <_svfiprintf_r+0x1a4>
1000396e:	4b19      	ldr	r3, [pc, #100]	; (100039d4 <_svfiprintf_r+0x1e4>)
10003970:	2b00      	cmp	r3, #0
10003972:	d106      	bne.n	10003982 <_svfiprintf_r+0x192>
10003974:	2207      	movs	r2, #7
10003976:	9b05      	ldr	r3, [sp, #20]
10003978:	3307      	adds	r3, #7
1000397a:	4393      	bics	r3, r2
1000397c:	3308      	adds	r3, #8
1000397e:	9305      	str	r3, [sp, #20]
10003980:	e014      	b.n	100039ac <_svfiprintf_r+0x1bc>
10003982:	ab05      	add	r3, sp, #20
10003984:	9300      	str	r3, [sp, #0]
10003986:	9802      	ldr	r0, [sp, #8]
10003988:	1c29      	adds	r1, r5, #0
1000398a:	1c32      	adds	r2, r6, #0
1000398c:	4b12      	ldr	r3, [pc, #72]	; (100039d8 <_svfiprintf_r+0x1e8>)
1000398e:	e000      	b.n	10003992 <_svfiprintf_r+0x1a2>
10003990:	bf00      	nop
10003992:	e007      	b.n	100039a4 <_svfiprintf_r+0x1b4>
10003994:	ab05      	add	r3, sp, #20
10003996:	9300      	str	r3, [sp, #0]
10003998:	9802      	ldr	r0, [sp, #8]
1000399a:	1c29      	adds	r1, r5, #0
1000399c:	1c32      	adds	r2, r6, #0
1000399e:	4b0e      	ldr	r3, [pc, #56]	; (100039d8 <_svfiprintf_r+0x1e8>)
100039a0:	f000 f88a 	bl	10003ab8 <_printf_i>
100039a4:	9003      	str	r0, [sp, #12]
100039a6:	9b03      	ldr	r3, [sp, #12]
100039a8:	3301      	adds	r3, #1
100039aa:	d004      	beq.n	100039b6 <_svfiprintf_r+0x1c6>
100039ac:	696b      	ldr	r3, [r5, #20]
100039ae:	9a03      	ldr	r2, [sp, #12]
100039b0:	189b      	adds	r3, r3, r2
100039b2:	616b      	str	r3, [r5, #20]
100039b4:	e73d      	b.n	10003832 <_svfiprintf_r+0x42>
100039b6:	89b3      	ldrh	r3, [r6, #12]
100039b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
100039ba:	065b      	lsls	r3, r3, #25
100039bc:	d501      	bpl.n	100039c2 <_svfiprintf_r+0x1d2>
100039be:	2001      	movs	r0, #1
100039c0:	4240      	negs	r0, r0
100039c2:	b01f      	add	sp, #124	; 0x7c
100039c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100039c6:	46c0      	nop			; (mov r8, r8)
100039c8:	10004093 	.word	0x10004093
100039cc:	10004099 	.word	0x10004099
100039d0:	1000409d 	.word	0x1000409d
100039d4:	00000000 	.word	0x00000000
100039d8:	10003731 	.word	0x10003731

100039dc <_printf_common>:
100039dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100039de:	1c17      	adds	r7, r2, #0
100039e0:	9301      	str	r3, [sp, #4]
100039e2:	690a      	ldr	r2, [r1, #16]
100039e4:	688b      	ldr	r3, [r1, #8]
100039e6:	9000      	str	r0, [sp, #0]
100039e8:	1c0c      	adds	r4, r1, #0
100039ea:	4293      	cmp	r3, r2
100039ec:	da00      	bge.n	100039f0 <_printf_common+0x14>
100039ee:	1c13      	adds	r3, r2, #0
100039f0:	1c22      	adds	r2, r4, #0
100039f2:	603b      	str	r3, [r7, #0]
100039f4:	3243      	adds	r2, #67	; 0x43
100039f6:	7812      	ldrb	r2, [r2, #0]
100039f8:	2a00      	cmp	r2, #0
100039fa:	d001      	beq.n	10003a00 <_printf_common+0x24>
100039fc:	3301      	adds	r3, #1
100039fe:	603b      	str	r3, [r7, #0]
10003a00:	6823      	ldr	r3, [r4, #0]
10003a02:	069b      	lsls	r3, r3, #26
10003a04:	d502      	bpl.n	10003a0c <_printf_common+0x30>
10003a06:	683b      	ldr	r3, [r7, #0]
10003a08:	3302      	adds	r3, #2
10003a0a:	603b      	str	r3, [r7, #0]
10003a0c:	2506      	movs	r5, #6
10003a0e:	6823      	ldr	r3, [r4, #0]
10003a10:	401d      	ands	r5, r3
10003a12:	d01e      	beq.n	10003a52 <_printf_common+0x76>
10003a14:	1c23      	adds	r3, r4, #0
10003a16:	3343      	adds	r3, #67	; 0x43
10003a18:	781b      	ldrb	r3, [r3, #0]
10003a1a:	1e5a      	subs	r2, r3, #1
10003a1c:	4193      	sbcs	r3, r2
10003a1e:	6822      	ldr	r2, [r4, #0]
10003a20:	0692      	lsls	r2, r2, #26
10003a22:	d51c      	bpl.n	10003a5e <_printf_common+0x82>
10003a24:	2030      	movs	r0, #48	; 0x30
10003a26:	18e1      	adds	r1, r4, r3
10003a28:	3140      	adds	r1, #64	; 0x40
10003a2a:	70c8      	strb	r0, [r1, #3]
10003a2c:	1c21      	adds	r1, r4, #0
10003a2e:	1c5a      	adds	r2, r3, #1
10003a30:	3145      	adds	r1, #69	; 0x45
10003a32:	7809      	ldrb	r1, [r1, #0]
10003a34:	18a2      	adds	r2, r4, r2
10003a36:	3240      	adds	r2, #64	; 0x40
10003a38:	3302      	adds	r3, #2
10003a3a:	70d1      	strb	r1, [r2, #3]
10003a3c:	e00f      	b.n	10003a5e <_printf_common+0x82>
10003a3e:	1c22      	adds	r2, r4, #0
10003a40:	2301      	movs	r3, #1
10003a42:	9800      	ldr	r0, [sp, #0]
10003a44:	9901      	ldr	r1, [sp, #4]
10003a46:	3219      	adds	r2, #25
10003a48:	9e08      	ldr	r6, [sp, #32]
10003a4a:	47b0      	blx	r6
10003a4c:	1c43      	adds	r3, r0, #1
10003a4e:	d00e      	beq.n	10003a6e <_printf_common+0x92>
10003a50:	3501      	adds	r5, #1
10003a52:	68e3      	ldr	r3, [r4, #12]
10003a54:	683a      	ldr	r2, [r7, #0]
10003a56:	1a9b      	subs	r3, r3, r2
10003a58:	429d      	cmp	r5, r3
10003a5a:	dbf0      	blt.n	10003a3e <_printf_common+0x62>
10003a5c:	e7da      	b.n	10003a14 <_printf_common+0x38>
10003a5e:	1c22      	adds	r2, r4, #0
10003a60:	9800      	ldr	r0, [sp, #0]
10003a62:	9901      	ldr	r1, [sp, #4]
10003a64:	3243      	adds	r2, #67	; 0x43
10003a66:	9d08      	ldr	r5, [sp, #32]
10003a68:	47a8      	blx	r5
10003a6a:	1c43      	adds	r3, r0, #1
10003a6c:	d102      	bne.n	10003a74 <_printf_common+0x98>
10003a6e:	2001      	movs	r0, #1
10003a70:	4240      	negs	r0, r0
10003a72:	e020      	b.n	10003ab6 <_printf_common+0xda>
10003a74:	2306      	movs	r3, #6
10003a76:	6820      	ldr	r0, [r4, #0]
10003a78:	68e1      	ldr	r1, [r4, #12]
10003a7a:	683a      	ldr	r2, [r7, #0]
10003a7c:	4003      	ands	r3, r0
10003a7e:	2500      	movs	r5, #0
10003a80:	2b04      	cmp	r3, #4
10003a82:	d103      	bne.n	10003a8c <_printf_common+0xb0>
10003a84:	1a8d      	subs	r5, r1, r2
10003a86:	43eb      	mvns	r3, r5
10003a88:	17db      	asrs	r3, r3, #31
10003a8a:	401d      	ands	r5, r3
10003a8c:	68a3      	ldr	r3, [r4, #8]
10003a8e:	6922      	ldr	r2, [r4, #16]
10003a90:	4293      	cmp	r3, r2
10003a92:	dd01      	ble.n	10003a98 <_printf_common+0xbc>
10003a94:	1a9b      	subs	r3, r3, r2
10003a96:	18ed      	adds	r5, r5, r3
10003a98:	2700      	movs	r7, #0
10003a9a:	42af      	cmp	r7, r5
10003a9c:	da0a      	bge.n	10003ab4 <_printf_common+0xd8>
10003a9e:	1c22      	adds	r2, r4, #0
10003aa0:	2301      	movs	r3, #1
10003aa2:	9800      	ldr	r0, [sp, #0]
10003aa4:	9901      	ldr	r1, [sp, #4]
10003aa6:	321a      	adds	r2, #26
10003aa8:	9e08      	ldr	r6, [sp, #32]
10003aaa:	47b0      	blx	r6
10003aac:	1c43      	adds	r3, r0, #1
10003aae:	d0de      	beq.n	10003a6e <_printf_common+0x92>
10003ab0:	3701      	adds	r7, #1
10003ab2:	e7f2      	b.n	10003a9a <_printf_common+0xbe>
10003ab4:	2000      	movs	r0, #0
10003ab6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10003ab8 <_printf_i>:
10003ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
10003aba:	b08b      	sub	sp, #44	; 0x2c
10003abc:	9206      	str	r2, [sp, #24]
10003abe:	1c0a      	adds	r2, r1, #0
10003ac0:	3243      	adds	r2, #67	; 0x43
10003ac2:	9307      	str	r3, [sp, #28]
10003ac4:	9005      	str	r0, [sp, #20]
10003ac6:	9204      	str	r2, [sp, #16]
10003ac8:	7e0a      	ldrb	r2, [r1, #24]
10003aca:	1c0c      	adds	r4, r1, #0
10003acc:	9b10      	ldr	r3, [sp, #64]	; 0x40
10003ace:	2a6e      	cmp	r2, #110	; 0x6e
10003ad0:	d100      	bne.n	10003ad4 <_printf_i+0x1c>
10003ad2:	e0a8      	b.n	10003c26 <_printf_i+0x16e>
10003ad4:	d811      	bhi.n	10003afa <_printf_i+0x42>
10003ad6:	2a63      	cmp	r2, #99	; 0x63
10003ad8:	d022      	beq.n	10003b20 <_printf_i+0x68>
10003ada:	d809      	bhi.n	10003af0 <_printf_i+0x38>
10003adc:	2a00      	cmp	r2, #0
10003ade:	d100      	bne.n	10003ae2 <_printf_i+0x2a>
10003ae0:	e0b2      	b.n	10003c48 <_printf_i+0x190>
10003ae2:	2a58      	cmp	r2, #88	; 0x58
10003ae4:	d000      	beq.n	10003ae8 <_printf_i+0x30>
10003ae6:	e0c2      	b.n	10003c6e <_printf_i+0x1b6>
10003ae8:	3145      	adds	r1, #69	; 0x45
10003aea:	700a      	strb	r2, [r1, #0]
10003aec:	4a7c      	ldr	r2, [pc, #496]	; (10003ce0 <_printf_i+0x228>)
10003aee:	e04f      	b.n	10003b90 <_printf_i+0xd8>
10003af0:	2a64      	cmp	r2, #100	; 0x64
10003af2:	d01d      	beq.n	10003b30 <_printf_i+0x78>
10003af4:	2a69      	cmp	r2, #105	; 0x69
10003af6:	d01b      	beq.n	10003b30 <_printf_i+0x78>
10003af8:	e0b9      	b.n	10003c6e <_printf_i+0x1b6>
10003afa:	2a73      	cmp	r2, #115	; 0x73
10003afc:	d100      	bne.n	10003b00 <_printf_i+0x48>
10003afe:	e0a7      	b.n	10003c50 <_printf_i+0x198>
10003b00:	d809      	bhi.n	10003b16 <_printf_i+0x5e>
10003b02:	2a6f      	cmp	r2, #111	; 0x6f
10003b04:	d029      	beq.n	10003b5a <_printf_i+0xa2>
10003b06:	2a70      	cmp	r2, #112	; 0x70
10003b08:	d000      	beq.n	10003b0c <_printf_i+0x54>
10003b0a:	e0b0      	b.n	10003c6e <_printf_i+0x1b6>
10003b0c:	2220      	movs	r2, #32
10003b0e:	6809      	ldr	r1, [r1, #0]
10003b10:	430a      	orrs	r2, r1
10003b12:	6022      	str	r2, [r4, #0]
10003b14:	e037      	b.n	10003b86 <_printf_i+0xce>
10003b16:	2a75      	cmp	r2, #117	; 0x75
10003b18:	d01f      	beq.n	10003b5a <_printf_i+0xa2>
10003b1a:	2a78      	cmp	r2, #120	; 0x78
10003b1c:	d033      	beq.n	10003b86 <_printf_i+0xce>
10003b1e:	e0a6      	b.n	10003c6e <_printf_i+0x1b6>
10003b20:	1c0d      	adds	r5, r1, #0
10003b22:	681a      	ldr	r2, [r3, #0]
10003b24:	3542      	adds	r5, #66	; 0x42
10003b26:	1d11      	adds	r1, r2, #4
10003b28:	6019      	str	r1, [r3, #0]
10003b2a:	6813      	ldr	r3, [r2, #0]
10003b2c:	702b      	strb	r3, [r5, #0]
10003b2e:	e0a1      	b.n	10003c74 <_printf_i+0x1bc>
10003b30:	6821      	ldr	r1, [r4, #0]
10003b32:	681a      	ldr	r2, [r3, #0]
10003b34:	0608      	lsls	r0, r1, #24
10003b36:	d503      	bpl.n	10003b40 <_printf_i+0x88>
10003b38:	1d11      	adds	r1, r2, #4
10003b3a:	6019      	str	r1, [r3, #0]
10003b3c:	6816      	ldr	r6, [r2, #0]
10003b3e:	e005      	b.n	10003b4c <_printf_i+0x94>
10003b40:	0649      	lsls	r1, r1, #25
10003b42:	d5f9      	bpl.n	10003b38 <_printf_i+0x80>
10003b44:	1d11      	adds	r1, r2, #4
10003b46:	6019      	str	r1, [r3, #0]
10003b48:	2300      	movs	r3, #0
10003b4a:	5ed6      	ldrsh	r6, [r2, r3]
10003b4c:	2e00      	cmp	r6, #0
10003b4e:	da3b      	bge.n	10003bc8 <_printf_i+0x110>
10003b50:	232d      	movs	r3, #45	; 0x2d
10003b52:	9a04      	ldr	r2, [sp, #16]
10003b54:	4276      	negs	r6, r6
10003b56:	7013      	strb	r3, [r2, #0]
10003b58:	e036      	b.n	10003bc8 <_printf_i+0x110>
10003b5a:	6821      	ldr	r1, [r4, #0]
10003b5c:	681a      	ldr	r2, [r3, #0]
10003b5e:	0608      	lsls	r0, r1, #24
10003b60:	d503      	bpl.n	10003b6a <_printf_i+0xb2>
10003b62:	1d11      	adds	r1, r2, #4
10003b64:	6019      	str	r1, [r3, #0]
10003b66:	6816      	ldr	r6, [r2, #0]
10003b68:	e005      	b.n	10003b76 <_printf_i+0xbe>
10003b6a:	0649      	lsls	r1, r1, #25
10003b6c:	d5f9      	bpl.n	10003b62 <_printf_i+0xaa>
10003b6e:	1d11      	adds	r1, r2, #4
10003b70:	6019      	str	r1, [r3, #0]
10003b72:	6816      	ldr	r6, [r2, #0]
10003b74:	b2b6      	uxth	r6, r6
10003b76:	4b5a      	ldr	r3, [pc, #360]	; (10003ce0 <_printf_i+0x228>)
10003b78:	7e22      	ldrb	r2, [r4, #24]
10003b7a:	9303      	str	r3, [sp, #12]
10003b7c:	270a      	movs	r7, #10
10003b7e:	2a6f      	cmp	r2, #111	; 0x6f
10003b80:	d11d      	bne.n	10003bbe <_printf_i+0x106>
10003b82:	2708      	movs	r7, #8
10003b84:	e01b      	b.n	10003bbe <_printf_i+0x106>
10003b86:	1c22      	adds	r2, r4, #0
10003b88:	2178      	movs	r1, #120	; 0x78
10003b8a:	3245      	adds	r2, #69	; 0x45
10003b8c:	7011      	strb	r1, [r2, #0]
10003b8e:	4a55      	ldr	r2, [pc, #340]	; (10003ce4 <_printf_i+0x22c>)
10003b90:	6819      	ldr	r1, [r3, #0]
10003b92:	9203      	str	r2, [sp, #12]
10003b94:	1d08      	adds	r0, r1, #4
10003b96:	6822      	ldr	r2, [r4, #0]
10003b98:	6018      	str	r0, [r3, #0]
10003b9a:	680e      	ldr	r6, [r1, #0]
10003b9c:	0610      	lsls	r0, r2, #24
10003b9e:	d402      	bmi.n	10003ba6 <_printf_i+0xee>
10003ba0:	0650      	lsls	r0, r2, #25
10003ba2:	d500      	bpl.n	10003ba6 <_printf_i+0xee>
10003ba4:	b2b6      	uxth	r6, r6
10003ba6:	07d3      	lsls	r3, r2, #31
10003ba8:	d502      	bpl.n	10003bb0 <_printf_i+0xf8>
10003baa:	2320      	movs	r3, #32
10003bac:	431a      	orrs	r2, r3
10003bae:	6022      	str	r2, [r4, #0]
10003bb0:	2710      	movs	r7, #16
10003bb2:	2e00      	cmp	r6, #0
10003bb4:	d103      	bne.n	10003bbe <_printf_i+0x106>
10003bb6:	2320      	movs	r3, #32
10003bb8:	6822      	ldr	r2, [r4, #0]
10003bba:	439a      	bics	r2, r3
10003bbc:	6022      	str	r2, [r4, #0]
10003bbe:	1c23      	adds	r3, r4, #0
10003bc0:	2200      	movs	r2, #0
10003bc2:	3343      	adds	r3, #67	; 0x43
10003bc4:	701a      	strb	r2, [r3, #0]
10003bc6:	e002      	b.n	10003bce <_printf_i+0x116>
10003bc8:	270a      	movs	r7, #10
10003bca:	4b45      	ldr	r3, [pc, #276]	; (10003ce0 <_printf_i+0x228>)
10003bcc:	9303      	str	r3, [sp, #12]
10003bce:	6863      	ldr	r3, [r4, #4]
10003bd0:	60a3      	str	r3, [r4, #8]
10003bd2:	2b00      	cmp	r3, #0
10003bd4:	db03      	blt.n	10003bde <_printf_i+0x126>
10003bd6:	2204      	movs	r2, #4
10003bd8:	6821      	ldr	r1, [r4, #0]
10003bda:	4391      	bics	r1, r2
10003bdc:	6021      	str	r1, [r4, #0]
10003bde:	2e00      	cmp	r6, #0
10003be0:	d102      	bne.n	10003be8 <_printf_i+0x130>
10003be2:	9d04      	ldr	r5, [sp, #16]
10003be4:	2b00      	cmp	r3, #0
10003be6:	d00e      	beq.n	10003c06 <_printf_i+0x14e>
10003be8:	9d04      	ldr	r5, [sp, #16]
10003bea:	1c30      	adds	r0, r6, #0
10003bec:	1c39      	adds	r1, r7, #0
10003bee:	f7ff fc93 	bl	10003518 <__aeabi_uidivmod>
10003bf2:	9b03      	ldr	r3, [sp, #12]
10003bf4:	3d01      	subs	r5, #1
10003bf6:	5c5b      	ldrb	r3, [r3, r1]
10003bf8:	1c30      	adds	r0, r6, #0
10003bfa:	702b      	strb	r3, [r5, #0]
10003bfc:	1c39      	adds	r1, r7, #0
10003bfe:	f7ff fc05 	bl	1000340c <__aeabi_uidiv>
10003c02:	1e06      	subs	r6, r0, #0
10003c04:	d1f1      	bne.n	10003bea <_printf_i+0x132>
10003c06:	2f08      	cmp	r7, #8
10003c08:	d109      	bne.n	10003c1e <_printf_i+0x166>
10003c0a:	6823      	ldr	r3, [r4, #0]
10003c0c:	07db      	lsls	r3, r3, #31
10003c0e:	d506      	bpl.n	10003c1e <_printf_i+0x166>
10003c10:	6863      	ldr	r3, [r4, #4]
10003c12:	6922      	ldr	r2, [r4, #16]
10003c14:	4293      	cmp	r3, r2
10003c16:	dc02      	bgt.n	10003c1e <_printf_i+0x166>
10003c18:	2330      	movs	r3, #48	; 0x30
10003c1a:	3d01      	subs	r5, #1
10003c1c:	702b      	strb	r3, [r5, #0]
10003c1e:	9b04      	ldr	r3, [sp, #16]
10003c20:	1b5b      	subs	r3, r3, r5
10003c22:	6123      	str	r3, [r4, #16]
10003c24:	e02b      	b.n	10003c7e <_printf_i+0x1c6>
10003c26:	6809      	ldr	r1, [r1, #0]
10003c28:	681a      	ldr	r2, [r3, #0]
10003c2a:	0608      	lsls	r0, r1, #24
10003c2c:	d407      	bmi.n	10003c3e <_printf_i+0x186>
10003c2e:	0649      	lsls	r1, r1, #25
10003c30:	d505      	bpl.n	10003c3e <_printf_i+0x186>
10003c32:	1d11      	adds	r1, r2, #4
10003c34:	6019      	str	r1, [r3, #0]
10003c36:	6813      	ldr	r3, [r2, #0]
10003c38:	8aa2      	ldrh	r2, [r4, #20]
10003c3a:	801a      	strh	r2, [r3, #0]
10003c3c:	e004      	b.n	10003c48 <_printf_i+0x190>
10003c3e:	1d11      	adds	r1, r2, #4
10003c40:	6019      	str	r1, [r3, #0]
10003c42:	6813      	ldr	r3, [r2, #0]
10003c44:	6962      	ldr	r2, [r4, #20]
10003c46:	601a      	str	r2, [r3, #0]
10003c48:	2300      	movs	r3, #0
10003c4a:	9d04      	ldr	r5, [sp, #16]
10003c4c:	6123      	str	r3, [r4, #16]
10003c4e:	e016      	b.n	10003c7e <_printf_i+0x1c6>
10003c50:	681a      	ldr	r2, [r3, #0]
10003c52:	1d11      	adds	r1, r2, #4
10003c54:	6019      	str	r1, [r3, #0]
10003c56:	6815      	ldr	r5, [r2, #0]
10003c58:	2100      	movs	r1, #0
10003c5a:	1c28      	adds	r0, r5, #0
10003c5c:	6862      	ldr	r2, [r4, #4]
10003c5e:	f000 f843 	bl	10003ce8 <memchr>
10003c62:	2800      	cmp	r0, #0
10003c64:	d001      	beq.n	10003c6a <_printf_i+0x1b2>
10003c66:	1b40      	subs	r0, r0, r5
10003c68:	6060      	str	r0, [r4, #4]
10003c6a:	6863      	ldr	r3, [r4, #4]
10003c6c:	e003      	b.n	10003c76 <_printf_i+0x1be>
10003c6e:	1c25      	adds	r5, r4, #0
10003c70:	3542      	adds	r5, #66	; 0x42
10003c72:	702a      	strb	r2, [r5, #0]
10003c74:	2301      	movs	r3, #1
10003c76:	6123      	str	r3, [r4, #16]
10003c78:	2300      	movs	r3, #0
10003c7a:	9a04      	ldr	r2, [sp, #16]
10003c7c:	7013      	strb	r3, [r2, #0]
10003c7e:	9b07      	ldr	r3, [sp, #28]
10003c80:	9805      	ldr	r0, [sp, #20]
10003c82:	9300      	str	r3, [sp, #0]
10003c84:	1c21      	adds	r1, r4, #0
10003c86:	9b06      	ldr	r3, [sp, #24]
10003c88:	aa09      	add	r2, sp, #36	; 0x24
10003c8a:	f7ff fea7 	bl	100039dc <_printf_common>
10003c8e:	1c43      	adds	r3, r0, #1
10003c90:	d102      	bne.n	10003c98 <_printf_i+0x1e0>
10003c92:	2001      	movs	r0, #1
10003c94:	4240      	negs	r0, r0
10003c96:	e021      	b.n	10003cdc <_printf_i+0x224>
10003c98:	1c2a      	adds	r2, r5, #0
10003c9a:	6923      	ldr	r3, [r4, #16]
10003c9c:	9805      	ldr	r0, [sp, #20]
10003c9e:	9906      	ldr	r1, [sp, #24]
10003ca0:	9d07      	ldr	r5, [sp, #28]
10003ca2:	47a8      	blx	r5
10003ca4:	1c43      	adds	r3, r0, #1
10003ca6:	d0f4      	beq.n	10003c92 <_printf_i+0x1da>
10003ca8:	6823      	ldr	r3, [r4, #0]
10003caa:	079b      	lsls	r3, r3, #30
10003cac:	d405      	bmi.n	10003cba <_printf_i+0x202>
10003cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003cb0:	68e0      	ldr	r0, [r4, #12]
10003cb2:	4298      	cmp	r0, r3
10003cb4:	da12      	bge.n	10003cdc <_printf_i+0x224>
10003cb6:	1c18      	adds	r0, r3, #0
10003cb8:	e010      	b.n	10003cdc <_printf_i+0x224>
10003cba:	2500      	movs	r5, #0
10003cbc:	68e3      	ldr	r3, [r4, #12]
10003cbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
10003cc0:	1a9b      	subs	r3, r3, r2
10003cc2:	429d      	cmp	r5, r3
10003cc4:	daf3      	bge.n	10003cae <_printf_i+0x1f6>
10003cc6:	1c22      	adds	r2, r4, #0
10003cc8:	2301      	movs	r3, #1
10003cca:	9805      	ldr	r0, [sp, #20]
10003ccc:	9906      	ldr	r1, [sp, #24]
10003cce:	3219      	adds	r2, #25
10003cd0:	9e07      	ldr	r6, [sp, #28]
10003cd2:	47b0      	blx	r6
10003cd4:	1c43      	adds	r3, r0, #1
10003cd6:	d0dc      	beq.n	10003c92 <_printf_i+0x1da>
10003cd8:	3501      	adds	r5, #1
10003cda:	e7ef      	b.n	10003cbc <_printf_i+0x204>
10003cdc:	b00b      	add	sp, #44	; 0x2c
10003cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003ce0:	100040a4 	.word	0x100040a4
10003ce4:	100040b5 	.word	0x100040b5

10003ce8 <memchr>:
10003ce8:	b2c9      	uxtb	r1, r1
10003cea:	1882      	adds	r2, r0, r2
10003cec:	4290      	cmp	r0, r2
10003cee:	d004      	beq.n	10003cfa <memchr+0x12>
10003cf0:	7803      	ldrb	r3, [r0, #0]
10003cf2:	428b      	cmp	r3, r1
10003cf4:	d002      	beq.n	10003cfc <memchr+0x14>
10003cf6:	3001      	adds	r0, #1
10003cf8:	e7f8      	b.n	10003cec <memchr+0x4>
10003cfa:	2000      	movs	r0, #0
10003cfc:	4770      	bx	lr

10003cfe <memcpy>:
10003cfe:	2300      	movs	r3, #0
10003d00:	b510      	push	{r4, lr}
10003d02:	4293      	cmp	r3, r2
10003d04:	d003      	beq.n	10003d0e <memcpy+0x10>
10003d06:	5ccc      	ldrb	r4, [r1, r3]
10003d08:	54c4      	strb	r4, [r0, r3]
10003d0a:	3301      	adds	r3, #1
10003d0c:	e7f9      	b.n	10003d02 <memcpy+0x4>
10003d0e:	bd10      	pop	{r4, pc}

10003d10 <memmove>:
10003d10:	b510      	push	{r4, lr}
10003d12:	4281      	cmp	r1, r0
10003d14:	d208      	bcs.n	10003d28 <memmove+0x18>
10003d16:	188b      	adds	r3, r1, r2
10003d18:	4298      	cmp	r0, r3
10003d1a:	d205      	bcs.n	10003d28 <memmove+0x18>
10003d1c:	1a9b      	subs	r3, r3, r2
10003d1e:	3a01      	subs	r2, #1
10003d20:	d309      	bcc.n	10003d36 <memmove+0x26>
10003d22:	5c99      	ldrb	r1, [r3, r2]
10003d24:	5481      	strb	r1, [r0, r2]
10003d26:	e7fa      	b.n	10003d1e <memmove+0xe>
10003d28:	2300      	movs	r3, #0
10003d2a:	4293      	cmp	r3, r2
10003d2c:	d003      	beq.n	10003d36 <memmove+0x26>
10003d2e:	5ccc      	ldrb	r4, [r1, r3]
10003d30:	54c4      	strb	r4, [r0, r3]
10003d32:	3301      	adds	r3, #1
10003d34:	e7f9      	b.n	10003d2a <memmove+0x1a>
10003d36:	bd10      	pop	{r4, pc}

10003d38 <_free_r>:
10003d38:	b530      	push	{r4, r5, lr}
10003d3a:	2900      	cmp	r1, #0
10003d3c:	d03e      	beq.n	10003dbc <_free_r+0x84>
10003d3e:	3904      	subs	r1, #4
10003d40:	680b      	ldr	r3, [r1, #0]
10003d42:	2b00      	cmp	r3, #0
10003d44:	da00      	bge.n	10003d48 <_free_r+0x10>
10003d46:	18c9      	adds	r1, r1, r3
10003d48:	4a1d      	ldr	r2, [pc, #116]	; (10003dc0 <_free_r+0x88>)
10003d4a:	6813      	ldr	r3, [r2, #0]
10003d4c:	1c14      	adds	r4, r2, #0
10003d4e:	2b00      	cmp	r3, #0
10003d50:	d102      	bne.n	10003d58 <_free_r+0x20>
10003d52:	604b      	str	r3, [r1, #4]
10003d54:	6011      	str	r1, [r2, #0]
10003d56:	e031      	b.n	10003dbc <_free_r+0x84>
10003d58:	4299      	cmp	r1, r3
10003d5a:	d20d      	bcs.n	10003d78 <_free_r+0x40>
10003d5c:	6808      	ldr	r0, [r1, #0]
10003d5e:	180a      	adds	r2, r1, r0
10003d60:	429a      	cmp	r2, r3
10003d62:	d103      	bne.n	10003d6c <_free_r+0x34>
10003d64:	6813      	ldr	r3, [r2, #0]
10003d66:	18c3      	adds	r3, r0, r3
10003d68:	600b      	str	r3, [r1, #0]
10003d6a:	6853      	ldr	r3, [r2, #4]
10003d6c:	604b      	str	r3, [r1, #4]
10003d6e:	6021      	str	r1, [r4, #0]
10003d70:	e024      	b.n	10003dbc <_free_r+0x84>
10003d72:	428a      	cmp	r2, r1
10003d74:	d803      	bhi.n	10003d7e <_free_r+0x46>
10003d76:	1c13      	adds	r3, r2, #0
10003d78:	685a      	ldr	r2, [r3, #4]
10003d7a:	2a00      	cmp	r2, #0
10003d7c:	d1f9      	bne.n	10003d72 <_free_r+0x3a>
10003d7e:	681d      	ldr	r5, [r3, #0]
10003d80:	195c      	adds	r4, r3, r5
10003d82:	428c      	cmp	r4, r1
10003d84:	d10b      	bne.n	10003d9e <_free_r+0x66>
10003d86:	6809      	ldr	r1, [r1, #0]
10003d88:	1869      	adds	r1, r5, r1
10003d8a:	1858      	adds	r0, r3, r1
10003d8c:	6019      	str	r1, [r3, #0]
10003d8e:	4290      	cmp	r0, r2
10003d90:	d114      	bne.n	10003dbc <_free_r+0x84>
10003d92:	6810      	ldr	r0, [r2, #0]
10003d94:	6852      	ldr	r2, [r2, #4]
10003d96:	1809      	adds	r1, r1, r0
10003d98:	6019      	str	r1, [r3, #0]
10003d9a:	605a      	str	r2, [r3, #4]
10003d9c:	e00e      	b.n	10003dbc <_free_r+0x84>
10003d9e:	428c      	cmp	r4, r1
10003da0:	d902      	bls.n	10003da8 <_free_r+0x70>
10003da2:	230c      	movs	r3, #12
10003da4:	6003      	str	r3, [r0, #0]
10003da6:	e009      	b.n	10003dbc <_free_r+0x84>
10003da8:	6808      	ldr	r0, [r1, #0]
10003daa:	180c      	adds	r4, r1, r0
10003dac:	4294      	cmp	r4, r2
10003dae:	d103      	bne.n	10003db8 <_free_r+0x80>
10003db0:	6814      	ldr	r4, [r2, #0]
10003db2:	6852      	ldr	r2, [r2, #4]
10003db4:	1900      	adds	r0, r0, r4
10003db6:	6008      	str	r0, [r1, #0]
10003db8:	604a      	str	r2, [r1, #4]
10003dba:	6059      	str	r1, [r3, #4]
10003dbc:	bd30      	pop	{r4, r5, pc}
10003dbe:	46c0      	nop			; (mov r8, r8)
10003dc0:	200005ac 	.word	0x200005ac

10003dc4 <_malloc_r>:
10003dc4:	2303      	movs	r3, #3
10003dc6:	b570      	push	{r4, r5, r6, lr}
10003dc8:	1ccc      	adds	r4, r1, #3
10003dca:	439c      	bics	r4, r3
10003dcc:	3408      	adds	r4, #8
10003dce:	1c05      	adds	r5, r0, #0
10003dd0:	2c0c      	cmp	r4, #12
10003dd2:	d201      	bcs.n	10003dd8 <_malloc_r+0x14>
10003dd4:	240c      	movs	r4, #12
10003dd6:	e005      	b.n	10003de4 <_malloc_r+0x20>
10003dd8:	2c00      	cmp	r4, #0
10003dda:	da03      	bge.n	10003de4 <_malloc_r+0x20>
10003ddc:	230c      	movs	r3, #12
10003dde:	2000      	movs	r0, #0
10003de0:	602b      	str	r3, [r5, #0]
10003de2:	e042      	b.n	10003e6a <_malloc_r+0xa6>
10003de4:	428c      	cmp	r4, r1
10003de6:	d3f9      	bcc.n	10003ddc <_malloc_r+0x18>
10003de8:	4a20      	ldr	r2, [pc, #128]	; (10003e6c <_malloc_r+0xa8>)
10003dea:	6813      	ldr	r3, [r2, #0]
10003dec:	1c10      	adds	r0, r2, #0
10003dee:	1c19      	adds	r1, r3, #0
10003df0:	2900      	cmp	r1, #0
10003df2:	d013      	beq.n	10003e1c <_malloc_r+0x58>
10003df4:	680a      	ldr	r2, [r1, #0]
10003df6:	1b12      	subs	r2, r2, r4
10003df8:	d40d      	bmi.n	10003e16 <_malloc_r+0x52>
10003dfa:	2a0b      	cmp	r2, #11
10003dfc:	d902      	bls.n	10003e04 <_malloc_r+0x40>
10003dfe:	600a      	str	r2, [r1, #0]
10003e00:	188b      	adds	r3, r1, r2
10003e02:	e01f      	b.n	10003e44 <_malloc_r+0x80>
10003e04:	428b      	cmp	r3, r1
10003e06:	d102      	bne.n	10003e0e <_malloc_r+0x4a>
10003e08:	685a      	ldr	r2, [r3, #4]
10003e0a:	6002      	str	r2, [r0, #0]
10003e0c:	e01b      	b.n	10003e46 <_malloc_r+0x82>
10003e0e:	684a      	ldr	r2, [r1, #4]
10003e10:	605a      	str	r2, [r3, #4]
10003e12:	1c0b      	adds	r3, r1, #0
10003e14:	e017      	b.n	10003e46 <_malloc_r+0x82>
10003e16:	1c0b      	adds	r3, r1, #0
10003e18:	6849      	ldr	r1, [r1, #4]
10003e1a:	e7e9      	b.n	10003df0 <_malloc_r+0x2c>
10003e1c:	4e14      	ldr	r6, [pc, #80]	; (10003e70 <_malloc_r+0xac>)
10003e1e:	6833      	ldr	r3, [r6, #0]
10003e20:	2b00      	cmp	r3, #0
10003e22:	d103      	bne.n	10003e2c <_malloc_r+0x68>
10003e24:	1c28      	adds	r0, r5, #0
10003e26:	f000 f84b 	bl	10003ec0 <_sbrk_r>
10003e2a:	6030      	str	r0, [r6, #0]
10003e2c:	1c28      	adds	r0, r5, #0
10003e2e:	1c21      	adds	r1, r4, #0
10003e30:	f000 f846 	bl	10003ec0 <_sbrk_r>
10003e34:	1c03      	adds	r3, r0, #0
10003e36:	1c42      	adds	r2, r0, #1
10003e38:	d0d0      	beq.n	10003ddc <_malloc_r+0x18>
10003e3a:	2203      	movs	r2, #3
10003e3c:	1cc6      	adds	r6, r0, #3
10003e3e:	4396      	bics	r6, r2
10003e40:	4286      	cmp	r6, r0
10003e42:	d10a      	bne.n	10003e5a <_malloc_r+0x96>
10003e44:	601c      	str	r4, [r3, #0]
10003e46:	1c18      	adds	r0, r3, #0
10003e48:	2107      	movs	r1, #7
10003e4a:	300b      	adds	r0, #11
10003e4c:	1d1a      	adds	r2, r3, #4
10003e4e:	4388      	bics	r0, r1
10003e50:	1a82      	subs	r2, r0, r2
10003e52:	d00a      	beq.n	10003e6a <_malloc_r+0xa6>
10003e54:	4251      	negs	r1, r2
10003e56:	5099      	str	r1, [r3, r2]
10003e58:	e007      	b.n	10003e6a <_malloc_r+0xa6>
10003e5a:	1a31      	subs	r1, r6, r0
10003e5c:	1c28      	adds	r0, r5, #0
10003e5e:	f000 f82f 	bl	10003ec0 <_sbrk_r>
10003e62:	1c43      	adds	r3, r0, #1
10003e64:	d0ba      	beq.n	10003ddc <_malloc_r+0x18>
10003e66:	1c33      	adds	r3, r6, #0
10003e68:	e7ec      	b.n	10003e44 <_malloc_r+0x80>
10003e6a:	bd70      	pop	{r4, r5, r6, pc}
10003e6c:	200005ac 	.word	0x200005ac
10003e70:	200005a8 	.word	0x200005a8

10003e74 <_realloc_r>:
10003e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003e76:	1c06      	adds	r6, r0, #0
10003e78:	1c0c      	adds	r4, r1, #0
10003e7a:	1c15      	adds	r5, r2, #0
10003e7c:	2900      	cmp	r1, #0
10003e7e:	d104      	bne.n	10003e8a <_realloc_r+0x16>
10003e80:	1c11      	adds	r1, r2, #0
10003e82:	f7ff ff9f 	bl	10003dc4 <_malloc_r>
10003e86:	1c04      	adds	r4, r0, #0
10003e88:	e018      	b.n	10003ebc <_realloc_r+0x48>
10003e8a:	2a00      	cmp	r2, #0
10003e8c:	d103      	bne.n	10003e96 <_realloc_r+0x22>
10003e8e:	f7ff ff53 	bl	10003d38 <_free_r>
10003e92:	1c2c      	adds	r4, r5, #0
10003e94:	e012      	b.n	10003ebc <_realloc_r+0x48>
10003e96:	f000 f825 	bl	10003ee4 <_malloc_usable_size_r>
10003e9a:	42a8      	cmp	r0, r5
10003e9c:	d20e      	bcs.n	10003ebc <_realloc_r+0x48>
10003e9e:	1c30      	adds	r0, r6, #0
10003ea0:	1c29      	adds	r1, r5, #0
10003ea2:	f7ff ff8f 	bl	10003dc4 <_malloc_r>
10003ea6:	1e07      	subs	r7, r0, #0
10003ea8:	d007      	beq.n	10003eba <_realloc_r+0x46>
10003eaa:	1c21      	adds	r1, r4, #0
10003eac:	1c2a      	adds	r2, r5, #0
10003eae:	f7ff ff26 	bl	10003cfe <memcpy>
10003eb2:	1c30      	adds	r0, r6, #0
10003eb4:	1c21      	adds	r1, r4, #0
10003eb6:	f7ff ff3f 	bl	10003d38 <_free_r>
10003eba:	1c3c      	adds	r4, r7, #0
10003ebc:	1c20      	adds	r0, r4, #0
10003ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10003ec0 <_sbrk_r>:
10003ec0:	b538      	push	{r3, r4, r5, lr}
10003ec2:	2300      	movs	r3, #0
10003ec4:	4c06      	ldr	r4, [pc, #24]	; (10003ee0 <_sbrk_r+0x20>)
10003ec6:	1c05      	adds	r5, r0, #0
10003ec8:	1c08      	adds	r0, r1, #0
10003eca:	6023      	str	r3, [r4, #0]
10003ecc:	f7fd f958 	bl	10001180 <_sbrk>
10003ed0:	1c43      	adds	r3, r0, #1
10003ed2:	d103      	bne.n	10003edc <_sbrk_r+0x1c>
10003ed4:	6823      	ldr	r3, [r4, #0]
10003ed6:	2b00      	cmp	r3, #0
10003ed8:	d000      	beq.n	10003edc <_sbrk_r+0x1c>
10003eda:	602b      	str	r3, [r5, #0]
10003edc:	bd38      	pop	{r3, r4, r5, pc}
10003ede:	46c0      	nop			; (mov r8, r8)
10003ee0:	20000940 	.word	0x20000940

10003ee4 <_malloc_usable_size_r>:
10003ee4:	1f0b      	subs	r3, r1, #4
10003ee6:	681a      	ldr	r2, [r3, #0]
10003ee8:	1f10      	subs	r0, r2, #4
10003eea:	2a00      	cmp	r2, #0
10003eec:	da04      	bge.n	10003ef8 <_malloc_usable_size_r+0x14>
10003eee:	1889      	adds	r1, r1, r2
10003ef0:	3904      	subs	r1, #4
10003ef2:	680b      	ldr	r3, [r1, #0]
10003ef4:	18d0      	adds	r0, r2, r3
10003ef6:	3804      	subs	r0, #4
10003ef8:	4770      	bx	lr
10003efa:	0000      	movs	r0, r0
10003efc:	6e616353 	.word	0x6e616353
10003f00:	676e696e 	.word	0x676e696e
10003f04:	00000000 	.word	0x00000000
10003f08:	74726f53 	.word	0x74726f53
10003f0c:	00676e69 	.word	0x00676e69
10003f10:	65657073 	.word	0x65657073
10003f14:	00000064 	.word	0x00000064
10003f18:	65657053 	.word	0x65657053
10003f1c:	68632064 	.word	0x68632064
10003f20:	65676e61 	.word	0x65676e61
10003f24:	6f742064 	.word	0x6f742064
10003f28:	6c25203a 	.word	0x6c25203a
10003f2c:	00000064 	.word	0x00000064
10003f30:	61766e49 	.word	0x61766e49
10003f34:	2064696c 	.word	0x2064696c
10003f38:	65657073 	.word	0x65657073
10003f3c:	50202e64 	.word	0x50202e64
10003f40:	7361656c 	.word	0x7361656c
10003f44:	6e652065 	.word	0x6e652065
10003f48:	20726574 	.word	0x20726574
10003f4c:	61762061 	.word	0x61762061
10003f50:	2065756c 	.word	0x2065756c
10003f54:	77746562 	.word	0x77746562
10003f58:	206e6565 	.word	0x206e6565
10003f5c:	6e612030 	.word	0x6e612030
10003f60:	30352064 	.word	0x30352064
10003f64:	2e303030 	.word	0x2e303030
10003f68:	00000000 	.word	0x00000000
10003f6c:	74726f53 	.word	0x74726f53
10003f70:	74756f20 	.word	0x74756f20
10003f74:	20726f20 	.word	0x20726f20
10003f78:	276e6f64 	.word	0x276e6f64
10003f7c:	0d0a3f74 	.word	0x0d0a3f74
10003f80:	00000000 	.word	0x00000000
10003f84:	6e206f44 	.word	0x6e206f44
10003f88:	6968746f 	.word	0x6968746f
10003f8c:	002e676e 	.word	0x002e676e
10003f90:	0043      	.short	0x0043

10003f92 <_ctype_>:
10003f92:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
10003fa2:	2020 2020 2020 2020 2020 2020 2020 2020                     
10003fb2:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
10003fc2:	0410 0404 0404 0404 0404 1004 1010 1010     ................
10003fd2:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
10003fe2:	0101 0101 0101 0101 0101 0101 1010 1010     ................
10003ff2:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
10004002:	0202 0202 0202 0202 0202 0202 1010 1010     ................
10004012:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
10004092:	2300 302d 202b 6800 4c6c 6500 6766 4645     .#-0+ .hlL.efgEF
100040a2:	0047 3130 3332 3534 3736 3938 4241 4443     G.0123456789ABCD
100040b2:	4645 3000 3231 3433 3635 3837 6139 6362     EF.0123456789abc
100040c2:	6564 0066 0000                              def...

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veneer>:
    
    .align 1
    
    .globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <CCU40_3_Veneer+0x20>)
    MOV PC,R0
2000000e:	4687      	mov	pc, r0
	...

2000002c <SVC_Veneer>:
    .long 0
    
/* ======================================================================== */
    .globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <CCU40_3_Veneer+0x24>)
    MOV PC,R0
2000002e:	4687      	mov	pc, r0
	...

20000038 <PendSV_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <CCU40_3_Veneer+0x28>)
    MOV PC,R0
2000003a:	4687      	mov	pc, r0

2000003c <SysTick_Veneer>:
/* ======================================================================== */
    .globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <CCU40_3_Veneer+0x2c>)
    MOV PC,R0
2000003e:	4687      	mov	pc, r0

20000040 <SCU_0_Veneer>:
/* ======================================================================== */
    .globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <CCU40_3_Veneer+0x30>)
    MOV PC,R0
20000042:	4687      	mov	pc, r0

20000044 <SCU_1_Veneer>:
/* ======================================================================== */
    .globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <CCU40_3_Veneer+0x34>)
    MOV PC,R0
20000046:	4687      	mov	pc, r0

20000048 <SCU_2_Veneer>:
/* ======================================================================== */
    .globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <CCU40_3_Veneer+0x38>)
    MOV PC,R0
2000004a:	4687      	mov	pc, r0

2000004c <SCU_3_Veneer>:
/* ======================================================================== */
    .globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <CCU40_3_Veneer+0x3c>)
    MOV PC,R0
2000004e:	4687      	mov	pc, r0

20000050 <SCU_4_Veneer>:
/* ======================================================================== */
    .globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <CCU40_3_Veneer+0x40>)
    MOV PC,R0
20000052:	4687      	mov	pc, r0

20000054 <SCU_5_Veneer>:
/* ======================================================================== */
    .globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <CCU40_3_Veneer+0x44>)
    MOV PC,R0
20000056:	4687      	mov	pc, r0

20000058 <SCU_6_Veneer>:
/* ======================================================================== */
    .globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <CCU40_3_Veneer+0x48>)
    MOV PC,R0
2000005a:	4687      	mov	pc, r0
	...

20000064 <USIC0_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
20000064:	4821      	ldr	r0, [pc, #132]	; (200000ec <CCU40_3_Veneer+0x4c>)
    MOV PC,R0
20000066:	4687      	mov	pc, r0

20000068 <USIC0_1_Veneer>:
/* ======================================================================== */
    .globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
20000068:	4821      	ldr	r0, [pc, #132]	; (200000f0 <CCU40_3_Veneer+0x50>)
    MOV PC,R0
2000006a:	4687      	mov	pc, r0

2000006c <USIC0_2_Veneer>:
/* ======================================================================== */
    .globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
2000006c:	4821      	ldr	r0, [pc, #132]	; (200000f4 <CCU40_3_Veneer+0x54>)
    MOV PC,R0
2000006e:	4687      	mov	pc, r0

20000070 <USIC0_3_Veneer>:
/* ======================================================================== */
    .globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
20000070:	4821      	ldr	r0, [pc, #132]	; (200000f8 <CCU40_3_Veneer+0x58>)
    MOV PC,R0
20000072:	4687      	mov	pc, r0

20000074 <USIC0_4_Veneer>:
/* ======================================================================== */
    .globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000074:	4821      	ldr	r0, [pc, #132]	; (200000fc <CCU40_3_Veneer+0x5c>)
    MOV PC,R0
20000076:	4687      	mov	pc, r0

20000078 <USIC0_5_Veneer>:
/* ======================================================================== */
    .globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000078:	4821      	ldr	r0, [pc, #132]	; (20000100 <CCU40_3_Veneer+0x60>)
    MOV PC,R0
2000007a:	4687      	mov	pc, r0

2000007c <VADC0_C0_0_Veneer>:
/* ======================================================================== */
    .globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
2000007c:	4821      	ldr	r0, [pc, #132]	; (20000104 <CCU40_3_Veneer+0x64>)
    MOV PC,R0
2000007e:	4687      	mov	pc, r0

20000080 <VADC0_C0_1_Veneer>:
/* ======================================================================== */
    .globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000080:	4821      	ldr	r0, [pc, #132]	; (20000108 <CCU40_3_Veneer+0x68>)
    MOV PC,R0
20000082:	4687      	mov	pc, r0
	...

20000094 <CCU40_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000094:	481d      	ldr	r0, [pc, #116]	; (2000010c <CCU40_3_Veneer+0x6c>)
    MOV PC,R0
20000096:	4687      	mov	pc, r0

20000098 <CCU40_1_Veneer>:
/* ======================================================================== */
    .globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000098:	481d      	ldr	r0, [pc, #116]	; (20000110 <CCU40_3_Veneer+0x70>)
    MOV PC,R0
2000009a:	4687      	mov	pc, r0

2000009c <CCU40_2_Veneer>:
/* ======================================================================== */
    .globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
2000009c:	481d      	ldr	r0, [pc, #116]	; (20000114 <CCU40_3_Veneer+0x74>)
    MOV PC,R0
2000009e:	4687      	mov	pc, r0

200000a0 <CCU40_3_Veneer>:
/* ======================================================================== */
    .globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
200000a0:	481d      	ldr	r0, [pc, #116]	; (20000118 <CCU40_3_Veneer+0x78>)
    MOV PC,R0
200000a2:	4687      	mov	pc, r0
	...
    
    .align 1
    
    .globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
200000c0:	10001099 	.word	0x10001099
    .long 0
    
/* ======================================================================== */
    .globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
200000c4:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
200000c8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
200000cc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
200000d0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
200000d4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
200000d8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
200000dc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
200000e0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
200000e4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
200000e8:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
200000ec:	10002b41 	.word	0x10002b41
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
200000f0:	10002e7d 	.word	0x10002e7d
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
200000f4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
200000f8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
200000fc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000100:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
20000104:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000108:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
2000010c:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000110:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
20000114:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
20000118:	10001099 	.word	0x10001099
