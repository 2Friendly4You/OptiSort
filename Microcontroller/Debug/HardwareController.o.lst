   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "HardwareController.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.init,"ax",%progbits
  18              	 .align 2
  19              	 .global init
  20              	 .code 16
  21              	 .thumb_func
  23              	init:
  24              	.LFB36:
  25              	 .file 1 "../HardwareController.c"
   1:../HardwareController.c **** #include "XMC1100-LibHaas.h"
   2:../HardwareController.c **** #include "HardwareController.h"
   3:../HardwareController.c **** 
   4:../HardwareController.c **** void init() {
  26              	 .loc 1 4 0
  27              	 .cfi_startproc
  28 0000 80B5     	 push {r7,lr}
  29              	.LCFI0:
  30              	 .cfi_def_cfa_offset 8
  31              	 .cfi_offset 7,-8
  32              	 .cfi_offset 14,-4
  33 0002 00AF     	 add r7,sp,#0
  34              	.LCFI1:
  35              	 .cfi_def_cfa_register 7
   5:../HardwareController.c **** 	uart_init();
  36              	 .loc 1 5 0
  37 0004 FFF7FEFF 	 bl uart_init
   6:../HardwareController.c **** 	uart_interrupt_enable();
  38              	 .loc 1 6 0
  39 0008 FFF7FEFF 	 bl uart_interrupt_enable
   7:../HardwareController.c **** 	uart_select_channel(UARTCHANNEL_0);
  40              	 .loc 1 7 0
  41 000c 0320     	 mov r0,#3
  42 000e FFF7FEFF 	 bl uart_select_channel
   8:../HardwareController.c **** 
   9:../HardwareController.c **** 	rs232_init();
  43              	 .loc 1 9 0
  44 0012 FFF7FEFF 	 bl rs232_init
  10:../HardwareController.c **** 	rs232_interrupt_enable();
  45              	 .loc 1 10 0
  46 0016 FFF7FEFF 	 bl rs232_interrupt_enable
  11:../HardwareController.c **** 
  12:../HardwareController.c **** 	bit_init(redLEDport, redLEDpin, OUTP);
  47              	 .loc 1 12 0
  48 001a 0120     	 mov r0,#1
  49 001c 0221     	 mov r1,#2
  50 001e 0122     	 mov r2,#1
  51 0020 FFF7FEFF 	 bl bit_init
  13:../HardwareController.c **** 	bit_init(greenLEDport, greenLEDpin, OUTP);
  52              	 .loc 1 13 0
  53 0024 0120     	 mov r0,#1
  54 0026 0321     	 mov r1,#3
  55 0028 0122     	 mov r2,#1
  56 002a FFF7FEFF 	 bl bit_init
  14:../HardwareController.c **** 	bit_init(LEDstripesport, LEDstripespin, OUTP);
  57              	 .loc 1 14 0
  58 002e 0020     	 mov r0,#0
  59 0030 0421     	 mov r1,#4
  60 0032 0122     	 mov r2,#1
  61 0034 FFF7FEFF 	 bl bit_init
  15:../HardwareController.c **** 	bit_init(laserport, laserpin, OUTP);
  62              	 .loc 1 15 0
  63 0038 0020     	 mov r0,#0
  64 003a 0021     	 mov r1,#0
  65 003c 0122     	 mov r2,#1
  66 003e FFF7FEFF 	 bl bit_init
  16:../HardwareController.c **** 	bit_init(lightbarrier1port, lightbarrier1pin, INP);
  67              	 .loc 1 16 0
  68 0042 0220     	 mov r0,#2
  69 0044 0321     	 mov r1,#3
  70 0046 0022     	 mov r2,#0
  71 0048 FFF7FEFF 	 bl bit_init
  17:../HardwareController.c **** 	bit_init(lightbarrier2port, lightbarrier2pin, INP);
  72              	 .loc 1 17 0
  73 004c 0220     	 mov r0,#2
  74 004e 0221     	 mov r1,#2
  75 0050 0022     	 mov r2,#0
  76 0052 FFF7FEFF 	 bl bit_init
  18:../HardwareController.c **** 	bit_init(lightbarrier3port, lightbarrier3pin, INP);
  77              	 .loc 1 18 0
  78 0056 0220     	 mov r0,#2
  79 0058 0121     	 mov r1,#1
  80 005a 0022     	 mov r2,#0
  81 005c FFF7FEFF 	 bl bit_init
  19:../HardwareController.c **** 	bit_init(pneumatics1port, pneumatics1pin, OUTP);
  82              	 .loc 1 19 0
  83 0060 0020     	 mov r0,#0
  84 0062 0121     	 mov r1,#1
  85 0064 0122     	 mov r2,#1
  86 0066 FFF7FEFF 	 bl bit_init
  20:../HardwareController.c **** 	bit_init(pneumatics2port, pneumatics2pin, OUTP);
  87              	 .loc 1 20 0
  88 006a 0020     	 mov r0,#0
  89 006c 0221     	 mov r1,#2
  90 006e 0122     	 mov r2,#1
  91 0070 FFF7FEFF 	 bl bit_init
  21:../HardwareController.c **** 	bit_init_mode(button1port, button1pin, INP, PULLDOWN);
  92              	 .loc 1 21 0
  93 0074 0120     	 mov r0,#1
  94 0076 0521     	 mov r1,#5
  95 0078 0022     	 mov r2,#0
  96 007a 0223     	 mov r3,#2
  97 007c FFF7FEFF 	 bl bit_init_mode
  22:../HardwareController.c **** 	bit_init_mode(button2port, button2pin, INP, PULLDOWN);
  98              	 .loc 1 22 0
  99 0080 0120     	 mov r0,#1
 100 0082 0421     	 mov r1,#4
 101 0084 0022     	 mov r2,#0
 102 0086 0223     	 mov r3,#2
 103 0088 FFF7FEFF 	 bl bit_init_mode
  23:../HardwareController.c **** 	bit_init(inductivSensor1Port, inductivSensor1Pin, INP);
 104              	 .loc 1 23 0
 105 008c 0020     	 mov r0,#0
 106 008e 0A21     	 mov r1,#10
 107 0090 0022     	 mov r2,#0
 108 0092 FFF7FEFF 	 bl bit_init
  24:../HardwareController.c **** 	bit_init(inductivSensor2Port, inductivSensor2Pin, INP);
 109              	 .loc 1 24 0
 110 0096 0020     	 mov r0,#0
 111 0098 0B21     	 mov r1,#11
 112 009a 0022     	 mov r2,#0
 113 009c FFF7FEFF 	 bl bit_init
  25:../HardwareController.c **** 	bit_init(dir1port, dir1pin, OUTP);
 114              	 .loc 1 25 0
 115 00a0 0020     	 mov r0,#0
 116 00a2 0721     	 mov r1,#7
 117 00a4 0122     	 mov r2,#1
 118 00a6 FFF7FEFF 	 bl bit_init
  26:../HardwareController.c **** 	bit_init(productionLineDirectionPort, productionLineDirectionPin, OUTP);
 119              	 .loc 1 26 0
 120 00aa 0020     	 mov r0,#0
 121 00ac 0921     	 mov r1,#9
 122 00ae 0122     	 mov r2,#1
 123 00b0 FFF7FEFF 	 bl bit_init
  27:../HardwareController.c **** 
  28:../HardwareController.c **** 	pwm1_init();
 124              	 .loc 1 28 0
 125 00b4 FFF7FEFF 	 bl pwm1_init
  29:../HardwareController.c **** 	pwm1_start();
 126              	 .loc 1 29 0
 127 00b8 FFF7FEFF 	 bl pwm1_start
  30:../HardwareController.c **** 	pwm3_init();
 128              	 .loc 1 30 0
 129 00bc FFF7FEFF 	 bl pwm3_init
  31:../HardwareController.c **** 	pwm3_start();
 130              	 .loc 1 31 0
 131 00c0 FFF7FEFF 	 bl pwm3_start
  32:../HardwareController.c **** 
  33:../HardwareController.c **** 	productionLine(0, FORWARD);
 132              	 .loc 1 33 0
 133 00c4 0020     	 mov r0,#0
 134 00c6 0021     	 mov r1,#0
 135 00c8 FFF7FEFF 	 bl productionLine
  34:../HardwareController.c **** 	slider(0, SLIDERFORWARD);
 136              	 .loc 1 34 0
 137 00cc 0020     	 mov r0,#0
 138 00ce 0021     	 mov r1,#0
 139 00d0 FFF7FEFF 	 bl slider
  35:../HardwareController.c **** 
  36:../HardwareController.c **** 	bit_write(P0, laserport, OFF);
 140              	 .loc 1 36 0
 141 00d4 0020     	 mov r0,#0
 142 00d6 0021     	 mov r1,#0
 143 00d8 0022     	 mov r2,#0
 144 00da FFF7FEFF 	 bl bit_write
  37:../HardwareController.c **** 	bit_write(LEDstripesport, LEDstripespin, OFF);
 145              	 .loc 1 37 0
 146 00de 0020     	 mov r0,#0
 147 00e0 0421     	 mov r1,#4
 148 00e2 0022     	 mov r2,#0
 149 00e4 FFF7FEFF 	 bl bit_write
  38:../HardwareController.c **** }
 150              	 .loc 1 38 0
 151 00e8 BD46     	 mov sp,r7
 152              	 
 153 00ea 80BD     	 pop {r7,pc}
 154              	 .cfi_endproc
 155              	.LFE36:
 157              	 .section .text.laser,"ax",%progbits
 158              	 .align 2
 159              	 .global laser
 160              	 .code 16
 161              	 .thumb_func
 163              	laser:
 164              	.LFB37:
  39:../HardwareController.c **** 
  40:../HardwareController.c **** void laser(int onOrOff) {
 165              	 .loc 1 40 0
 166              	 .cfi_startproc
 167 0000 80B5     	 push {r7,lr}
 168              	.LCFI2:
 169              	 .cfi_def_cfa_offset 8
 170              	 .cfi_offset 7,-8
 171              	 .cfi_offset 14,-4
 172 0002 82B0     	 sub sp,sp,#8
 173              	.LCFI3:
 174              	 .cfi_def_cfa_offset 16
 175 0004 00AF     	 add r7,sp,#0
 176              	.LCFI4:
 177              	 .cfi_def_cfa_register 7
 178 0006 7860     	 str r0,[r7,#4]
  41:../HardwareController.c **** 	onOrOff ?
  42:../HardwareController.c **** 			bit_write(laserport, laserpin, ON) :
 179              	 .loc 1 42 0
 180 0008 7B68     	 ldr r3,[r7,#4]
 181 000a 002B     	 cmp r3,#0
 182 000c 05D0     	 beq .L3
 183              	 .loc 1 42 0 is_stmt 0 discriminator 1
 184 000e 0020     	 mov r0,#0
 185 0010 0021     	 mov r1,#0
 186 0012 0122     	 mov r2,#1
 187 0014 FFF7FEFF 	 bl bit_write
 188 0018 04E0     	 b .L2
 189              	.L3:
  43:../HardwareController.c **** 			bit_write(laserport, laserpin, OFF);
 190              	 .loc 1 43 0 is_stmt 1
 191 001a 0020     	 mov r0,#0
 192 001c 0021     	 mov r1,#0
 193 001e 0022     	 mov r2,#0
 194 0020 FFF7FEFF 	 bl bit_write
 195              	.L2:
  44:../HardwareController.c **** }
 196              	 .loc 1 44 0
 197 0024 BD46     	 mov sp,r7
 198 0026 02B0     	 add sp,sp,#8
 199              	 
 200 0028 80BD     	 pop {r7,pc}
 201              	 .cfi_endproc
 202              	.LFE37:
 204 002a C046     	 .section .text.LEDStripes,"ax",%progbits
 205              	 .align 2
 206              	 .global LEDStripes
 207              	 .code 16
 208              	 .thumb_func
 210              	LEDStripes:
 211              	.LFB38:
  45:../HardwareController.c **** 
  46:../HardwareController.c **** void LEDStripes(int onOrOff) {
 212              	 .loc 1 46 0
 213              	 .cfi_startproc
 214 0000 80B5     	 push {r7,lr}
 215              	.LCFI5:
 216              	 .cfi_def_cfa_offset 8
 217              	 .cfi_offset 7,-8
 218              	 .cfi_offset 14,-4
 219 0002 82B0     	 sub sp,sp,#8
 220              	.LCFI6:
 221              	 .cfi_def_cfa_offset 16
 222 0004 00AF     	 add r7,sp,#0
 223              	.LCFI7:
 224              	 .cfi_def_cfa_register 7
 225 0006 7860     	 str r0,[r7,#4]
  47:../HardwareController.c **** 	onOrOff ?
  48:../HardwareController.c **** 			bit_write(LEDstripesport, LEDstripespin, OFF) :
 226              	 .loc 1 48 0
 227 0008 7B68     	 ldr r3,[r7,#4]
 228 000a 002B     	 cmp r3,#0
 229 000c 05D0     	 beq .L6
 230              	 .loc 1 48 0 is_stmt 0 discriminator 1
 231 000e 0020     	 mov r0,#0
 232 0010 0421     	 mov r1,#4
 233 0012 0022     	 mov r2,#0
 234 0014 FFF7FEFF 	 bl bit_write
 235 0018 04E0     	 b .L5
 236              	.L6:
  49:../HardwareController.c **** 			bit_write(LEDstripesport, LEDstripespin, ON);
 237              	 .loc 1 49 0 is_stmt 1
 238 001a 0020     	 mov r0,#0
 239 001c 0421     	 mov r1,#4
 240 001e 0122     	 mov r2,#1
 241 0020 FFF7FEFF 	 bl bit_write
 242              	.L5:
  50:../HardwareController.c **** }
 243              	 .loc 1 50 0
 244 0024 BD46     	 mov sp,r7
 245 0026 02B0     	 add sp,sp,#8
 246              	 
 247 0028 80BD     	 pop {r7,pc}
 248              	 .cfi_endproc
 249              	.LFE38:
 251 002a C046     	 .section .text.redLED,"ax",%progbits
 252              	 .align 2
 253              	 .global redLED
 254              	 .code 16
 255              	 .thumb_func
 257              	redLED:
 258              	.LFB39:
  51:../HardwareController.c **** 
  52:../HardwareController.c **** void redLED(int onOrOff) {
 259              	 .loc 1 52 0
 260              	 .cfi_startproc
 261 0000 80B5     	 push {r7,lr}
 262              	.LCFI8:
 263              	 .cfi_def_cfa_offset 8
 264              	 .cfi_offset 7,-8
 265              	 .cfi_offset 14,-4
 266 0002 82B0     	 sub sp,sp,#8
 267              	.LCFI9:
 268              	 .cfi_def_cfa_offset 16
 269 0004 00AF     	 add r7,sp,#0
 270              	.LCFI10:
 271              	 .cfi_def_cfa_register 7
 272 0006 7860     	 str r0,[r7,#4]
  53:../HardwareController.c **** 	onOrOff ?
  54:../HardwareController.c **** 			bit_write(redLEDport, redLEDpin, OFF) :
 273              	 .loc 1 54 0
 274 0008 7B68     	 ldr r3,[r7,#4]
 275 000a 002B     	 cmp r3,#0
 276 000c 05D0     	 beq .L9
 277              	 .loc 1 54 0 is_stmt 0 discriminator 1
 278 000e 0120     	 mov r0,#1
 279 0010 0221     	 mov r1,#2
 280 0012 0022     	 mov r2,#0
 281 0014 FFF7FEFF 	 bl bit_write
 282 0018 04E0     	 b .L8
 283              	.L9:
  55:../HardwareController.c **** 			bit_write(redLEDport, redLEDpin, ON);
 284              	 .loc 1 55 0 is_stmt 1
 285 001a 0120     	 mov r0,#1
 286 001c 0221     	 mov r1,#2
 287 001e 0122     	 mov r2,#1
 288 0020 FFF7FEFF 	 bl bit_write
 289              	.L8:
  56:../HardwareController.c **** }
 290              	 .loc 1 56 0
 291 0024 BD46     	 mov sp,r7
 292 0026 02B0     	 add sp,sp,#8
 293              	 
 294 0028 80BD     	 pop {r7,pc}
 295              	 .cfi_endproc
 296              	.LFE39:
 298 002a C046     	 .section .text.greenLED,"ax",%progbits
 299              	 .align 2
 300              	 .global greenLED
 301              	 .code 16
 302              	 .thumb_func
 304              	greenLED:
 305              	.LFB40:
  57:../HardwareController.c **** 
  58:../HardwareController.c **** void greenLED(int onOrOff) {
 306              	 .loc 1 58 0
 307              	 .cfi_startproc
 308 0000 80B5     	 push {r7,lr}
 309              	.LCFI11:
 310              	 .cfi_def_cfa_offset 8
 311              	 .cfi_offset 7,-8
 312              	 .cfi_offset 14,-4
 313 0002 82B0     	 sub sp,sp,#8
 314              	.LCFI12:
 315              	 .cfi_def_cfa_offset 16
 316 0004 00AF     	 add r7,sp,#0
 317              	.LCFI13:
 318              	 .cfi_def_cfa_register 7
 319 0006 7860     	 str r0,[r7,#4]
  59:../HardwareController.c **** 	onOrOff ?
  60:../HardwareController.c **** 			bit_write(greenLEDport, greenLEDpin, OFF) :
 320              	 .loc 1 60 0
 321 0008 7B68     	 ldr r3,[r7,#4]
 322 000a 002B     	 cmp r3,#0
 323 000c 05D0     	 beq .L12
 324              	 .loc 1 60 0 is_stmt 0 discriminator 1
 325 000e 0120     	 mov r0,#1
 326 0010 0321     	 mov r1,#3
 327 0012 0022     	 mov r2,#0
 328 0014 FFF7FEFF 	 bl bit_write
 329 0018 04E0     	 b .L11
 330              	.L12:
  61:../HardwareController.c **** 			bit_write(greenLEDport, greenLEDpin, ON);
 331              	 .loc 1 61 0 is_stmt 1
 332 001a 0120     	 mov r0,#1
 333 001c 0321     	 mov r1,#3
 334 001e 0122     	 mov r2,#1
 335 0020 FFF7FEFF 	 bl bit_write
 336              	.L11:
  62:../HardwareController.c **** }
 337              	 .loc 1 62 0
 338 0024 BD46     	 mov sp,r7
 339 0026 02B0     	 add sp,sp,#8
 340              	 
 341 0028 80BD     	 pop {r7,pc}
 342              	 .cfi_endproc
 343              	.LFE40:
 345 002a C046     	 .section .text.productionLine,"ax",%progbits
 346              	 .align 2
 347              	 .global productionLine
 348              	 .code 16
 349              	 .thumb_func
 351              	productionLine:
 352              	.LFB41:
  63:../HardwareController.c **** 
  64:../HardwareController.c **** /*
  65:../HardwareController.c **** void productionLine(int onOrOff, int direction) {
  66:../HardwareController.c **** 	onOrOff ?
  67:../HardwareController.c **** 			bit_write(relay1port, relay1pin, OFF) :
  68:../HardwareController.c **** 			bit_write(relay1port, relay1pin, ON);
  69:../HardwareController.c **** 	direction ?
  70:../HardwareController.c **** 			bit_write(relay2port, relay2pin, ON) :
  71:../HardwareController.c **** 			bit_write(relay2port, relay2pin, OFF);
  72:../HardwareController.c **** }
  73:../HardwareController.c **** */
  74:../HardwareController.c **** 
  75:../HardwareController.c **** void productionLine(int velocity, int direction) {
 353              	 .loc 1 75 0
 354              	 .cfi_startproc
 355 0000 80B5     	 push {r7,lr}
 356              	.LCFI14:
 357              	 .cfi_def_cfa_offset 8
 358              	 .cfi_offset 7,-8
 359              	 .cfi_offset 14,-4
 360 0002 82B0     	 sub sp,sp,#8
 361              	.LCFI15:
 362              	 .cfi_def_cfa_offset 16
 363 0004 00AF     	 add r7,sp,#0
 364              	.LCFI16:
 365              	 .cfi_def_cfa_register 7
 366 0006 7860     	 str r0,[r7,#4]
 367 0008 3960     	 str r1,[r7]
  76:../HardwareController.c **** 	direction ?
  77:../HardwareController.c **** 			bit_write(productionLineDirectionPort, productionLineDirectionPin, BACKWARD) :
 368              	 .loc 1 77 0
 369 000a 3B68     	 ldr r3,[r7]
 370 000c 002B     	 cmp r3,#0
 371 000e 05D0     	 beq .L15
 372              	 .loc 1 77 0 is_stmt 0 discriminator 1
 373 0010 0020     	 mov r0,#0
 374 0012 0921     	 mov r1,#9
 375 0014 0122     	 mov r2,#1
 376 0016 FFF7FEFF 	 bl bit_write
 377 001a 04E0     	 b .L16
 378              	.L15:
  78:../HardwareController.c **** 			bit_write(dir1port, dir1pin, FORWARD);
 379              	 .loc 1 78 0 is_stmt 1
 380 001c 0020     	 mov r0,#0
 381 001e 0721     	 mov r1,#7
 382 0020 0022     	 mov r2,#0
 383 0022 FFF7FEFF 	 bl bit_write
 384              	.L16:
  79:../HardwareController.c **** 	// inverse velocity by 50000
  80:../HardwareController.c **** 	pwm3_duty_cycle(50000 - velocity);
 385              	 .loc 1 80 0
 386 0026 7B68     	 ldr r3,[r7,#4]
 387 0028 9BB2     	 uxth r3,r3
 388 002a 044A     	 ldr r2,.L17
 389 002c D31A     	 sub r3,r2,r3
 390 002e 9BB2     	 uxth r3,r3
 391 0030 181C     	 mov r0,r3
 392 0032 FFF7FEFF 	 bl pwm3_duty_cycle
  81:../HardwareController.c **** }
 393              	 .loc 1 81 0
 394 0036 BD46     	 mov sp,r7
 395 0038 02B0     	 add sp,sp,#8
 396              	 
 397 003a 80BD     	 pop {r7,pc}
 398              	.L18:
 399              	 .align 2
 400              	.L17:
 401 003c 50C3FFFF 	 .word -15536
 402              	 .cfi_endproc
 403              	.LFE41:
 405              	 .section .text.lightBarrier1,"ax",%progbits
 406              	 .align 2
 407              	 .global lightBarrier1
 408              	 .code 16
 409              	 .thumb_func
 411              	lightBarrier1:
 412              	.LFB42:
  82:../HardwareController.c **** 
  83:../HardwareController.c **** 
  84:../HardwareController.c **** int lightBarrier1(void) {
 413              	 .loc 1 84 0
 414              	 .cfi_startproc
 415 0000 80B5     	 push {r7,lr}
 416              	.LCFI17:
 417              	 .cfi_def_cfa_offset 8
 418              	 .cfi_offset 7,-8
 419              	 .cfi_offset 14,-4
 420 0002 82B0     	 sub sp,sp,#8
 421              	.LCFI18:
 422              	 .cfi_def_cfa_offset 16
 423 0004 00AF     	 add r7,sp,#0
 424              	.LCFI19:
 425              	 .cfi_def_cfa_register 7
  85:../HardwareController.c **** 	int temp1 = bit_read(lightbarrier1port, lightbarrier1pin);
 426              	 .loc 1 85 0
 427 0006 0220     	 mov r0,#2
 428 0008 0321     	 mov r1,#3
 429 000a FFF7FEFF 	 bl bit_read
 430 000e 031C     	 mov r3,r0
 431 0010 7B60     	 str r3,[r7,#4]
  86:../HardwareController.c **** 	delay_ms(LED_TOLERANCE_MILLIS);
 432              	 .loc 1 86 0
 433 0012 0520     	 mov r0,#5
 434 0014 FFF7FEFF 	 bl delay_ms
  87:../HardwareController.c **** 	int temp2 = bit_read(lightbarrier1port, lightbarrier1pin);
 435              	 .loc 1 87 0
 436 0018 0220     	 mov r0,#2
 437 001a 0321     	 mov r1,#3
 438 001c FFF7FEFF 	 bl bit_read
 439 0020 031C     	 mov r3,r0
 440 0022 3B60     	 str r3,[r7]
  88:../HardwareController.c **** 
  89:../HardwareController.c **** 	// implements tolerance
  90:../HardwareController.c **** 
  91:../HardwareController.c **** 	while (temp1 != temp2) {
 441              	 .loc 1 91 0
 442 0024 0AE0     	 b .L20
 443              	.L21:
  92:../HardwareController.c **** 		temp1 = temp2;
 444              	 .loc 1 92 0
 445 0026 3B68     	 ldr r3,[r7]
 446 0028 7B60     	 str r3,[r7,#4]
  93:../HardwareController.c **** 		delay_ms(LED_TOLERANCE_MILLIS);
 447              	 .loc 1 93 0
 448 002a 0520     	 mov r0,#5
 449 002c FFF7FEFF 	 bl delay_ms
  94:../HardwareController.c **** 		temp2 = bit_read(lightbarrier1port, lightbarrier1pin);
 450              	 .loc 1 94 0
 451 0030 0220     	 mov r0,#2
 452 0032 0321     	 mov r1,#3
 453 0034 FFF7FEFF 	 bl bit_read
 454 0038 031C     	 mov r3,r0
 455 003a 3B60     	 str r3,[r7]
 456              	.L20:
  91:../HardwareController.c **** 		temp1 = temp2;
 457              	 .loc 1 91 0
 458 003c 7A68     	 ldr r2,[r7,#4]
 459 003e 3B68     	 ldr r3,[r7]
 460 0040 9A42     	 cmp r2,r3
 461 0042 F0D1     	 bne .L21
  95:../HardwareController.c **** 	}
  96:../HardwareController.c **** 
  97:../HardwareController.c **** 	if (temp1 == 0) {
 462              	 .loc 1 97 0
 463 0044 7B68     	 ldr r3,[r7,#4]
 464 0046 002B     	 cmp r3,#0
 465 0048 01D1     	 bne .L22
  98:../HardwareController.c **** 		return ON;
 466              	 .loc 1 98 0
 467 004a 0123     	 mov r3,#1
 468 004c 00E0     	 b .L23
 469              	.L22:
  99:../HardwareController.c **** 	} else {
 100:../HardwareController.c **** 		return OFF;
 470              	 .loc 1 100 0
 471 004e 0023     	 mov r3,#0
 472              	.L23:
 101:../HardwareController.c **** 	}
 102:../HardwareController.c **** }
 473              	 .loc 1 102 0
 474 0050 181C     	 mov r0,r3
 475 0052 BD46     	 mov sp,r7
 476 0054 02B0     	 add sp,sp,#8
 477              	 
 478 0056 80BD     	 pop {r7,pc}
 479              	 .cfi_endproc
 480              	.LFE42:
 482              	 .section .text.lightBarrier2,"ax",%progbits
 483              	 .align 2
 484              	 .global lightBarrier2
 485              	 .code 16
 486              	 .thumb_func
 488              	lightBarrier2:
 489              	.LFB43:
 103:../HardwareController.c **** 
 104:../HardwareController.c **** int lightBarrier2(void) {
 490              	 .loc 1 104 0
 491              	 .cfi_startproc
 492 0000 80B5     	 push {r7,lr}
 493              	.LCFI20:
 494              	 .cfi_def_cfa_offset 8
 495              	 .cfi_offset 7,-8
 496              	 .cfi_offset 14,-4
 497 0002 82B0     	 sub sp,sp,#8
 498              	.LCFI21:
 499              	 .cfi_def_cfa_offset 16
 500 0004 00AF     	 add r7,sp,#0
 501              	.LCFI22:
 502              	 .cfi_def_cfa_register 7
 105:../HardwareController.c **** 	int temp1 = bit_read(lightbarrier2port, lightbarrier2pin);
 503              	 .loc 1 105 0
 504 0006 0220     	 mov r0,#2
 505 0008 0221     	 mov r1,#2
 506 000a FFF7FEFF 	 bl bit_read
 507 000e 031C     	 mov r3,r0
 508 0010 7B60     	 str r3,[r7,#4]
 106:../HardwareController.c **** 	delay_ms(LED_TOLERANCE_MILLIS);
 509              	 .loc 1 106 0
 510 0012 0520     	 mov r0,#5
 511 0014 FFF7FEFF 	 bl delay_ms
 107:../HardwareController.c **** 	int temp2 = bit_read(lightbarrier2port, lightbarrier2pin);
 512              	 .loc 1 107 0
 513 0018 0220     	 mov r0,#2
 514 001a 0221     	 mov r1,#2
 515 001c FFF7FEFF 	 bl bit_read
 516 0020 031C     	 mov r3,r0
 517 0022 3B60     	 str r3,[r7]
 108:../HardwareController.c **** 
 109:../HardwareController.c **** 	// implements tolerance
 110:../HardwareController.c **** 
 111:../HardwareController.c **** 	while (temp1 != temp2) {
 518              	 .loc 1 111 0
 519 0024 0AE0     	 b .L25
 520              	.L26:
 112:../HardwareController.c **** 		temp1 = temp2;
 521              	 .loc 1 112 0
 522 0026 3B68     	 ldr r3,[r7]
 523 0028 7B60     	 str r3,[r7,#4]
 113:../HardwareController.c **** 		delay_ms(LED_TOLERANCE_MILLIS);
 524              	 .loc 1 113 0
 525 002a 0520     	 mov r0,#5
 526 002c FFF7FEFF 	 bl delay_ms
 114:../HardwareController.c **** 		temp2 = bit_read(lightbarrier2port, lightbarrier2pin);
 527              	 .loc 1 114 0
 528 0030 0220     	 mov r0,#2
 529 0032 0221     	 mov r1,#2
 530 0034 FFF7FEFF 	 bl bit_read
 531 0038 031C     	 mov r3,r0
 532 003a 3B60     	 str r3,[r7]
 533              	.L25:
 111:../HardwareController.c **** 		temp1 = temp2;
 534              	 .loc 1 111 0
 535 003c 7A68     	 ldr r2,[r7,#4]
 536 003e 3B68     	 ldr r3,[r7]
 537 0040 9A42     	 cmp r2,r3
 538 0042 F0D1     	 bne .L26
 115:../HardwareController.c **** 	}
 116:../HardwareController.c **** 
 117:../HardwareController.c **** 	if (temp1 == 0) {
 539              	 .loc 1 117 0
 540 0044 7B68     	 ldr r3,[r7,#4]
 541 0046 002B     	 cmp r3,#0
 542 0048 01D1     	 bne .L27
 118:../HardwareController.c **** 		return ON;
 543              	 .loc 1 118 0
 544 004a 0123     	 mov r3,#1
 545 004c 00E0     	 b .L28
 546              	.L27:
 119:../HardwareController.c **** 	} else {
 120:../HardwareController.c **** 		return OFF;
 547              	 .loc 1 120 0
 548 004e 0023     	 mov r3,#0
 549              	.L28:
 121:../HardwareController.c **** 	}
 122:../HardwareController.c **** }
 550              	 .loc 1 122 0
 551 0050 181C     	 mov r0,r3
 552 0052 BD46     	 mov sp,r7
 553 0054 02B0     	 add sp,sp,#8
 554              	 
 555 0056 80BD     	 pop {r7,pc}
 556              	 .cfi_endproc
 557              	.LFE43:
 559              	 .section .text.lightBarrier3,"ax",%progbits
 560              	 .align 2
 561              	 .global lightBarrier3
 562              	 .code 16
 563              	 .thumb_func
 565              	lightBarrier3:
 566              	.LFB44:
 123:../HardwareController.c **** 
 124:../HardwareController.c **** int lightBarrier3(void) {
 567              	 .loc 1 124 0
 568              	 .cfi_startproc
 569 0000 80B5     	 push {r7,lr}
 570              	.LCFI23:
 571              	 .cfi_def_cfa_offset 8
 572              	 .cfi_offset 7,-8
 573              	 .cfi_offset 14,-4
 574 0002 82B0     	 sub sp,sp,#8
 575              	.LCFI24:
 576              	 .cfi_def_cfa_offset 16
 577 0004 00AF     	 add r7,sp,#0
 578              	.LCFI25:
 579              	 .cfi_def_cfa_register 7
 125:../HardwareController.c **** 	int temp1 = bit_read(lightbarrier3port, lightbarrier3pin);
 580              	 .loc 1 125 0
 581 0006 0220     	 mov r0,#2
 582 0008 0121     	 mov r1,#1
 583 000a FFF7FEFF 	 bl bit_read
 584 000e 031C     	 mov r3,r0
 585 0010 7B60     	 str r3,[r7,#4]
 126:../HardwareController.c **** 	delay_ms(LED_TOLERANCE_MILLIS);
 586              	 .loc 1 126 0
 587 0012 0520     	 mov r0,#5
 588 0014 FFF7FEFF 	 bl delay_ms
 127:../HardwareController.c **** 	int temp2 = bit_read(lightbarrier3port, lightbarrier3pin);
 589              	 .loc 1 127 0
 590 0018 0220     	 mov r0,#2
 591 001a 0121     	 mov r1,#1
 592 001c FFF7FEFF 	 bl bit_read
 593 0020 031C     	 mov r3,r0
 594 0022 3B60     	 str r3,[r7]
 128:../HardwareController.c **** 
 129:../HardwareController.c **** 	// implements tolerance
 130:../HardwareController.c **** 
 131:../HardwareController.c **** 	while (temp1 != temp2) {
 595              	 .loc 1 131 0
 596 0024 0AE0     	 b .L30
 597              	.L31:
 132:../HardwareController.c **** 		temp1 = temp2;
 598              	 .loc 1 132 0
 599 0026 3B68     	 ldr r3,[r7]
 600 0028 7B60     	 str r3,[r7,#4]
 133:../HardwareController.c **** 		delay_ms(LED_TOLERANCE_MILLIS);
 601              	 .loc 1 133 0
 602 002a 0520     	 mov r0,#5
 603 002c FFF7FEFF 	 bl delay_ms
 134:../HardwareController.c **** 		temp2 = bit_read(lightbarrier3port, lightbarrier3pin);
 604              	 .loc 1 134 0
 605 0030 0220     	 mov r0,#2
 606 0032 0121     	 mov r1,#1
 607 0034 FFF7FEFF 	 bl bit_read
 608 0038 031C     	 mov r3,r0
 609 003a 3B60     	 str r3,[r7]
 610              	.L30:
 131:../HardwareController.c **** 		temp1 = temp2;
 611              	 .loc 1 131 0
 612 003c 7A68     	 ldr r2,[r7,#4]
 613 003e 3B68     	 ldr r3,[r7]
 614 0040 9A42     	 cmp r2,r3
 615 0042 F0D1     	 bne .L31
 135:../HardwareController.c **** 	}
 136:../HardwareController.c **** 
 137:../HardwareController.c **** 	if (temp1 == 0) {
 616              	 .loc 1 137 0
 617 0044 7B68     	 ldr r3,[r7,#4]
 618 0046 002B     	 cmp r3,#0
 619 0048 01D1     	 bne .L32
 138:../HardwareController.c **** 		return ON;
 620              	 .loc 1 138 0
 621 004a 0123     	 mov r3,#1
 622 004c 00E0     	 b .L33
 623              	.L32:
 139:../HardwareController.c **** 	} else {
 140:../HardwareController.c **** 		return OFF;
 624              	 .loc 1 140 0
 625 004e 0023     	 mov r3,#0
 626              	.L33:
 141:../HardwareController.c **** 	}
 142:../HardwareController.c **** }
 627              	 .loc 1 142 0
 628 0050 181C     	 mov r0,r3
 629 0052 BD46     	 mov sp,r7
 630 0054 02B0     	 add sp,sp,#8
 631              	 
 632 0056 80BD     	 pop {r7,pc}
 633              	 .cfi_endproc
 634              	.LFE44:
 636              	 .section .text.pneumatics1,"ax",%progbits
 637              	 .align 2
 638              	 .global pneumatics1
 639              	 .code 16
 640              	 .thumb_func
 642              	pneumatics1:
 643              	.LFB45:
 143:../HardwareController.c **** 
 144:../HardwareController.c **** void pneumatics1(int outOrIn) {
 644              	 .loc 1 144 0
 645              	 .cfi_startproc
 646 0000 80B5     	 push {r7,lr}
 647              	.LCFI26:
 648              	 .cfi_def_cfa_offset 8
 649              	 .cfi_offset 7,-8
 650              	 .cfi_offset 14,-4
 651 0002 82B0     	 sub sp,sp,#8
 652              	.LCFI27:
 653              	 .cfi_def_cfa_offset 16
 654 0004 00AF     	 add r7,sp,#0
 655              	.LCFI28:
 656              	 .cfi_def_cfa_register 7
 657 0006 7860     	 str r0,[r7,#4]
 145:../HardwareController.c **** 	outOrIn ?
 146:../HardwareController.c **** 			bit_write(pneumatics1port, pneumatics1pin, OUT) :
 658              	 .loc 1 146 0
 659 0008 7B68     	 ldr r3,[r7,#4]
 660 000a 002B     	 cmp r3,#0
 661 000c 05D0     	 beq .L35
 662              	 .loc 1 146 0 is_stmt 0 discriminator 1
 663 000e 0020     	 mov r0,#0
 664 0010 0121     	 mov r1,#1
 665 0012 0122     	 mov r2,#1
 666 0014 FFF7FEFF 	 bl bit_write
 667 0018 04E0     	 b .L34
 668              	.L35:
 147:../HardwareController.c **** 			bit_write(pneumatics1port, pneumatics1pin, IN);
 669              	 .loc 1 147 0 is_stmt 1
 670 001a 0020     	 mov r0,#0
 671 001c 0121     	 mov r1,#1
 672 001e 0022     	 mov r2,#0
 673 0020 FFF7FEFF 	 bl bit_write
 674              	.L34:
 148:../HardwareController.c **** }
 675              	 .loc 1 148 0
 676 0024 BD46     	 mov sp,r7
 677 0026 02B0     	 add sp,sp,#8
 678              	 
 679 0028 80BD     	 pop {r7,pc}
 680              	 .cfi_endproc
 681              	.LFE45:
 683 002a C046     	 .section .text.pneumatics2,"ax",%progbits
 684              	 .align 2
 685              	 .global pneumatics2
 686              	 .code 16
 687              	 .thumb_func
 689              	pneumatics2:
 690              	.LFB46:
 149:../HardwareController.c **** 
 150:../HardwareController.c **** void pneumatics2(int outOrIn) {
 691              	 .loc 1 150 0
 692              	 .cfi_startproc
 693 0000 80B5     	 push {r7,lr}
 694              	.LCFI29:
 695              	 .cfi_def_cfa_offset 8
 696              	 .cfi_offset 7,-8
 697              	 .cfi_offset 14,-4
 698 0002 82B0     	 sub sp,sp,#8
 699              	.LCFI30:
 700              	 .cfi_def_cfa_offset 16
 701 0004 00AF     	 add r7,sp,#0
 702              	.LCFI31:
 703              	 .cfi_def_cfa_register 7
 704 0006 7860     	 str r0,[r7,#4]
 151:../HardwareController.c **** 	outOrIn ?
 152:../HardwareController.c **** 			bit_write(pneumatics2port, pneumatics2pin, OUT) :
 705              	 .loc 1 152 0
 706 0008 7B68     	 ldr r3,[r7,#4]
 707 000a 002B     	 cmp r3,#0
 708 000c 05D0     	 beq .L38
 709              	 .loc 1 152 0 is_stmt 0 discriminator 1
 710 000e 0020     	 mov r0,#0
 711 0010 0221     	 mov r1,#2
 712 0012 0122     	 mov r2,#1
 713 0014 FFF7FEFF 	 bl bit_write
 714 0018 04E0     	 b .L37
 715              	.L38:
 153:../HardwareController.c **** 			bit_write(pneumatics2port, pneumatics2pin, IN);
 716              	 .loc 1 153 0 is_stmt 1
 717 001a 0020     	 mov r0,#0
 718 001c 0221     	 mov r1,#2
 719 001e 0022     	 mov r2,#0
 720 0020 FFF7FEFF 	 bl bit_write
 721              	.L37:
 154:../HardwareController.c **** }
 722              	 .loc 1 154 0
 723 0024 BD46     	 mov sp,r7
 724 0026 02B0     	 add sp,sp,#8
 725              	 
 726 0028 80BD     	 pop {r7,pc}
 727              	 .cfi_endproc
 728              	.LFE46:
 730 002a C046     	 .section .text.readButton1,"ax",%progbits
 731              	 .align 2
 732              	 .global readButton1
 733              	 .code 16
 734              	 .thumb_func
 736              	readButton1:
 737              	.LFB47:
 155:../HardwareController.c **** 
 156:../HardwareController.c **** int readButton1(void) {
 738              	 .loc 1 156 0
 739              	 .cfi_startproc
 740 0000 80B5     	 push {r7,lr}
 741              	.LCFI32:
 742              	 .cfi_def_cfa_offset 8
 743              	 .cfi_offset 7,-8
 744              	 .cfi_offset 14,-4
 745 0002 00AF     	 add r7,sp,#0
 746              	.LCFI33:
 747              	 .cfi_def_cfa_register 7
 157:../HardwareController.c **** 	return !bit_read(button1port, button1pin);
 748              	 .loc 1 157 0
 749 0004 0120     	 mov r0,#1
 750 0006 0521     	 mov r1,#5
 751 0008 FFF7FEFF 	 bl bit_read
 752 000c 031C     	 mov r3,r0
 753 000e 5A42     	 neg r2,r3
 754 0010 5341     	 adc r3,r3,r2
 755 0012 DBB2     	 uxtb r3,r3
 158:../HardwareController.c **** }
 756              	 .loc 1 158 0
 757 0014 181C     	 mov r0,r3
 758 0016 BD46     	 mov sp,r7
 759              	 
 760 0018 80BD     	 pop {r7,pc}
 761              	 .cfi_endproc
 762              	.LFE47:
 764 001a C046     	 .section .text.readButton2,"ax",%progbits
 765              	 .align 2
 766              	 .global readButton2
 767              	 .code 16
 768              	 .thumb_func
 770              	readButton2:
 771              	.LFB48:
 159:../HardwareController.c **** 
 160:../HardwareController.c **** int readButton2(void) {
 772              	 .loc 1 160 0
 773              	 .cfi_startproc
 774 0000 80B5     	 push {r7,lr}
 775              	.LCFI34:
 776              	 .cfi_def_cfa_offset 8
 777              	 .cfi_offset 7,-8
 778              	 .cfi_offset 14,-4
 779 0002 00AF     	 add r7,sp,#0
 780              	.LCFI35:
 781              	 .cfi_def_cfa_register 7
 161:../HardwareController.c **** 	return !bit_read(button2port, button2pin);
 782              	 .loc 1 161 0
 783 0004 0120     	 mov r0,#1
 784 0006 0421     	 mov r1,#4
 785 0008 FFF7FEFF 	 bl bit_read
 786 000c 031C     	 mov r3,r0
 787 000e 5A42     	 neg r2,r3
 788 0010 5341     	 adc r3,r3,r2
 789 0012 DBB2     	 uxtb r3,r3
 162:../HardwareController.c **** }
 790              	 .loc 1 162 0
 791 0014 181C     	 mov r0,r3
 792 0016 BD46     	 mov sp,r7
 793              	 
 794 0018 80BD     	 pop {r7,pc}
 795              	 .cfi_endproc
 796              	.LFE48:
 798 001a C046     	 .section .text.readInductivSensor1,"ax",%progbits
 799              	 .align 2
 800              	 .global readInductivSensor1
 801              	 .code 16
 802              	 .thumb_func
 804              	readInductivSensor1:
 805              	.LFB49:
 163:../HardwareController.c **** 
 164:../HardwareController.c **** int readInductivSensor1(void) {
 806              	 .loc 1 164 0
 807              	 .cfi_startproc
 808 0000 80B5     	 push {r7,lr}
 809              	.LCFI36:
 810              	 .cfi_def_cfa_offset 8
 811              	 .cfi_offset 7,-8
 812              	 .cfi_offset 14,-4
 813 0002 00AF     	 add r7,sp,#0
 814              	.LCFI37:
 815              	 .cfi_def_cfa_register 7
 165:../HardwareController.c **** 	return bit_read(inductivSensor1Port, inductivSensor1Pin);
 816              	 .loc 1 165 0
 817 0004 0020     	 mov r0,#0
 818 0006 0A21     	 mov r1,#10
 819 0008 FFF7FEFF 	 bl bit_read
 820 000c 031C     	 mov r3,r0
 166:../HardwareController.c **** }
 821              	 .loc 1 166 0
 822 000e 181C     	 mov r0,r3
 823 0010 BD46     	 mov sp,r7
 824              	 
 825 0012 80BD     	 pop {r7,pc}
 826              	 .cfi_endproc
 827              	.LFE49:
 829              	 .section .text.readInductivSensor2,"ax",%progbits
 830              	 .align 2
 831              	 .global readInductivSensor2
 832              	 .code 16
 833              	 .thumb_func
 835              	readInductivSensor2:
 836              	.LFB50:
 167:../HardwareController.c **** 
 168:../HardwareController.c **** int readInductivSensor2(void) {
 837              	 .loc 1 168 0
 838              	 .cfi_startproc
 839 0000 80B5     	 push {r7,lr}
 840              	.LCFI38:
 841              	 .cfi_def_cfa_offset 8
 842              	 .cfi_offset 7,-8
 843              	 .cfi_offset 14,-4
 844 0002 00AF     	 add r7,sp,#0
 845              	.LCFI39:
 846              	 .cfi_def_cfa_register 7
 169:../HardwareController.c **** 	return bit_read(inductivSensor2Port, inductivSensor2Pin);
 847              	 .loc 1 169 0
 848 0004 0020     	 mov r0,#0
 849 0006 0B21     	 mov r1,#11
 850 0008 FFF7FEFF 	 bl bit_read
 851 000c 031C     	 mov r3,r0
 170:../HardwareController.c **** }
 852              	 .loc 1 170 0
 853 000e 181C     	 mov r0,r3
 854 0010 BD46     	 mov sp,r7
 855              	 
 856 0012 80BD     	 pop {r7,pc}
 857              	 .cfi_endproc
 858              	.LFE50:
 860              	 .section .text.slider,"ax",%progbits
 861              	 .align 2
 862              	 .global slider
 863              	 .code 16
 864              	 .thumb_func
 866              	slider:
 867              	.LFB51:
 171:../HardwareController.c **** 
 172:../HardwareController.c **** void slider(int velocity, int direction) {
 868              	 .loc 1 172 0
 869              	 .cfi_startproc
 870 0000 80B5     	 push {r7,lr}
 871              	.LCFI40:
 872              	 .cfi_def_cfa_offset 8
 873              	 .cfi_offset 7,-8
 874              	 .cfi_offset 14,-4
 875 0002 82B0     	 sub sp,sp,#8
 876              	.LCFI41:
 877              	 .cfi_def_cfa_offset 16
 878 0004 00AF     	 add r7,sp,#0
 879              	.LCFI42:
 880              	 .cfi_def_cfa_register 7
 881 0006 7860     	 str r0,[r7,#4]
 882 0008 3960     	 str r1,[r7]
 173:../HardwareController.c **** 	direction ?
 174:../HardwareController.c **** 			bit_write(dir1port, dir1pin, SLIDERBACKWARD) :
 883              	 .loc 1 174 0
 884 000a 3B68     	 ldr r3,[r7]
 885 000c 002B     	 cmp r3,#0
 886 000e 05D0     	 beq .L49
 887              	 .loc 1 174 0 is_stmt 0 discriminator 1
 888 0010 0020     	 mov r0,#0
 889 0012 0721     	 mov r1,#7
 890 0014 0122     	 mov r2,#1
 891 0016 FFF7FEFF 	 bl bit_write
 892 001a 04E0     	 b .L50
 893              	.L49:
 175:../HardwareController.c **** 			bit_write(dir1port, dir1pin, SLIDERFORWARD);
 894              	 .loc 1 175 0 is_stmt 1
 895 001c 0020     	 mov r0,#0
 896 001e 0721     	 mov r1,#7
 897 0020 0022     	 mov r2,#0
 898 0022 FFF7FEFF 	 bl bit_write
 899              	.L50:
 176:../HardwareController.c **** 	// inverse velocity by 50000
 177:../HardwareController.c **** 	pwm1_duty_cycle(50000 - velocity);
 900              	 .loc 1 177 0
 901 0026 7B68     	 ldr r3,[r7,#4]
 902 0028 9BB2     	 uxth r3,r3
 903 002a 044A     	 ldr r2,.L51
 904 002c D31A     	 sub r3,r2,r3
 905 002e 9BB2     	 uxth r3,r3
 906 0030 181C     	 mov r0,r3
 907 0032 FFF7FEFF 	 bl pwm1_duty_cycle
 178:../HardwareController.c **** }
 908              	 .loc 1 178 0
 909 0036 BD46     	 mov sp,r7
 910 0038 02B0     	 add sp,sp,#8
 911              	 
 912 003a 80BD     	 pop {r7,pc}
 913              	.L52:
 914              	 .align 2
 915              	.L51:
 916 003c 50C3FFFF 	 .word -15536
 917              	 .cfi_endproc
 918              	.LFE51:
 920              	 .text
 921              	.Letext0:
 922              	 .file 2 "../XMC1100-LibHaas.h"
DEFINED SYMBOLS
                            *ABS*:00000000 HardwareController.c
    {standard input}:18     .text.init:00000000 $t
    {standard input}:23     .text.init:00000000 init
    {standard input}:351    .text.productionLine:00000000 productionLine
    {standard input}:866    .text.slider:00000000 slider
    {standard input}:158    .text.laser:00000000 $t
    {standard input}:163    .text.laser:00000000 laser
    {standard input}:205    .text.LEDStripes:00000000 $t
    {standard input}:210    .text.LEDStripes:00000000 LEDStripes
    {standard input}:252    .text.redLED:00000000 $t
    {standard input}:257    .text.redLED:00000000 redLED
    {standard input}:299    .text.greenLED:00000000 $t
    {standard input}:304    .text.greenLED:00000000 greenLED
    {standard input}:346    .text.productionLine:00000000 $t
    {standard input}:401    .text.productionLine:0000003c $d
    {standard input}:406    .text.lightBarrier1:00000000 $t
    {standard input}:411    .text.lightBarrier1:00000000 lightBarrier1
    {standard input}:483    .text.lightBarrier2:00000000 $t
    {standard input}:488    .text.lightBarrier2:00000000 lightBarrier2
    {standard input}:560    .text.lightBarrier3:00000000 $t
    {standard input}:565    .text.lightBarrier3:00000000 lightBarrier3
    {standard input}:637    .text.pneumatics1:00000000 $t
    {standard input}:642    .text.pneumatics1:00000000 pneumatics1
    {standard input}:684    .text.pneumatics2:00000000 $t
    {standard input}:689    .text.pneumatics2:00000000 pneumatics2
    {standard input}:731    .text.readButton1:00000000 $t
    {standard input}:736    .text.readButton1:00000000 readButton1
    {standard input}:765    .text.readButton2:00000000 $t
    {standard input}:770    .text.readButton2:00000000 readButton2
    {standard input}:799    .text.readInductivSensor1:00000000 $t
    {standard input}:804    .text.readInductivSensor1:00000000 readInductivSensor1
    {standard input}:830    .text.readInductivSensor2:00000000 $t
    {standard input}:835    .text.readInductivSensor2:00000000 readInductivSensor2
    {standard input}:861    .text.slider:00000000 $t
    {standard input}:916    .text.slider:0000003c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
uart_init
uart_interrupt_enable
uart_select_channel
rs232_init
rs232_interrupt_enable
bit_init
bit_init_mode
pwm1_init
pwm1_start
pwm3_init
pwm3_start
bit_write
pwm3_duty_cycle
bit_read
delay_ms
pwm1_duty_cycle
