   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "system_XMC1100.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .global SystemCoreClock
  18              	 .section .no_init,"aw",%progbits
  19              	 .align 2
  22              	SystemCoreClock:
  23 0000 00000000 	 .space 4
  24              	 .section .text.SystemInit,"ax",%progbits
  25              	 .align 2
  26              	 .weak SystemInit
  27              	 .code 16
  28              	 .thumb_func
  30              	SystemInit:
  31              	.LFB36:
  32              	 .file 1 "../Startup/system_XMC1100.c"
   1:../Startup/system_XMC1100.c **** /**************************************************************************************************
   2:../Startup/system_XMC1100.c ****  * @file     system_XMC1100.c
   3:../Startup/system_XMC1100.c ****  * @brief    Device specific initialization for the XMC1100-Series according to CMSIS
   4:../Startup/system_XMC1100.c ****  * @version  V1.11
   5:../Startup/system_XMC1100.c ****  * @date     19 Jun 2017
   6:../Startup/system_XMC1100.c ****  *
   7:../Startup/system_XMC1100.c ****  * @cond
   8:../Startup/system_XMC1100.c ****  **************************************************************************************************
   9:../Startup/system_XMC1100.c ****  * Copyright (c) 2012-2017, Infineon Technologies AG
  10:../Startup/system_XMC1100.c ****  * All rights reserved.                        
  11:../Startup/system_XMC1100.c ****  *                                             
  12:../Startup/system_XMC1100.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Startup/system_XMC1100.c ****  * following conditions are met:   
  14:../Startup/system_XMC1100.c ****  *                                                                              
  15:../Startup/system_XMC1100.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Startup/system_XMC1100.c ****  * disclaimer.                        
  17:../Startup/system_XMC1100.c ****  * 
  18:../Startup/system_XMC1100.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Startup/system_XMC1100.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Startup/system_XMC1100.c ****  * 
  21:../Startup/system_XMC1100.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Startup/system_XMC1100.c ****  * products derived from this software without specific prior written permission.                  
  23:../Startup/system_XMC1100.c ****  *                                                                              
  24:../Startup/system_XMC1100.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Startup/system_XMC1100.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Startup/system_XMC1100.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Startup/system_XMC1100.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Startup/system_XMC1100.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Startup/system_XMC1100.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Startup/system_XMC1100.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Startup/system_XMC1100.c ****  *                                                                              
  32:../Startup/system_XMC1100.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Startup/system_XMC1100.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Startup/system_XMC1100.c ****  **************************************************************************************************
  35:../Startup/system_XMC1100.c ****  *
  36:../Startup/system_XMC1100.c ****  * *************************** Change history ********************************
  37:../Startup/system_XMC1100.c ****  * V1.2, 13 Dec 2012, PKB : Created change history table
  38:../Startup/system_XMC1100.c ****  * V1.3, 20 Dec 2012, PKB : Fixed SystemCoreClock computation
  39:../Startup/system_XMC1100.c ****  * V1.4, 02 Feb 2013, PKB : SCU_CLOCK -> SCU_CLK
  40:../Startup/system_XMC1100.c ****  * V1.5, 27 Nov 2013, DNE : Comments added in SystemInit function for MCLK support
  41:../Startup/system_XMC1100.c ****  * V1.6, 19 Feb 2014, JFT : Fixed SystemCoreClock when FDIV != 0 
  42:../Startup/system_XMC1100.c ****  * V1.7, 11 Dec 2014, JFT : SystemCoreClockSetup, SystemCoreSetup as weak functions
  43:../Startup/system_XMC1100.c ****  * V1.8, 03 Sep 2015, JFT : Override values of CLOCK_VAL1 and CLOCK_VAL2 defined in vector table (s
  44:../Startup/system_XMC1100.c ****  *                          MCLK = 32MHz, PCLK = 64MHz
  45:../Startup/system_XMC1100.c ****  * V1.9, 31 Mar 2016, JFT : Fix flash wait states to 1 cycle
  46:../Startup/system_XMC1100.c ****  * V1.10,22 Aug 2016, JFT : Update coding for fixed flash wait states using new macros in device he
  47:../Startup/system_XMC1100.c ****  *                          Add macro guard USE_DYNAMIC_FLASH_WS. If defined in compiler options, a
  48:../Startup/system_XMC1100.c ****  *                          are used for read accesses to the flash memory. Otherwise a fixed 1 WS 
  49:../Startup/system_XMC1100.c ****  * V1.11,19 Jun 2017, Rely on cmsis_compiler.h instead of defining __WEAK
  50:../Startup/system_XMC1100.c ****  *                    Added support for ARM Compiler 6 (armclang) 
  51:../Startup/system_XMC1100.c ****  * 
  52:../Startup/system_XMC1100.c ****  * @endcond 
  53:../Startup/system_XMC1100.c ****  */
  54:../Startup/system_XMC1100.c **** 
  55:../Startup/system_XMC1100.c **** /*******************************************************************************
  56:../Startup/system_XMC1100.c ****  * HEADER FILES
  57:../Startup/system_XMC1100.c ****  *******************************************************************************/
  58:../Startup/system_XMC1100.c **** 
  59:../Startup/system_XMC1100.c **** #include <XMC1100.h>
  60:../Startup/system_XMC1100.c **** #include "system_XMC1100.h"
  61:../Startup/system_XMC1100.c **** 
  62:../Startup/system_XMC1100.c **** /*******************************************************************************
  63:../Startup/system_XMC1100.c ****  * MACROS
  64:../Startup/system_XMC1100.c ****  *******************************************************************************/
  65:../Startup/system_XMC1100.c **** #define DCO1_FREQUENCY (64000000U)
  66:../Startup/system_XMC1100.c **** 
  67:../Startup/system_XMC1100.c **** /*******************************************************************************
  68:../Startup/system_XMC1100.c ****  * GLOBAL VARIABLES
  69:../Startup/system_XMC1100.c ****  *******************************************************************************/
  70:../Startup/system_XMC1100.c **** 
  71:../Startup/system_XMC1100.c **** #if defined ( __CC_ARM )
  72:../Startup/system_XMC1100.c **** uint32_t SystemCoreClock __attribute__((at(0x20003FFC)));
  73:../Startup/system_XMC1100.c **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  74:../Startup/system_XMC1100.c **** uint32_t SystemCoreClock __attribute__((section(".ARM.__at_0x20003FFC")));
  75:../Startup/system_XMC1100.c **** #elif defined ( __ICCARM__ )
  76:../Startup/system_XMC1100.c **** __no_init uint32_t SystemCoreClock;
  77:../Startup/system_XMC1100.c **** #elif defined ( __GNUC__ )
  78:../Startup/system_XMC1100.c **** uint32_t SystemCoreClock __attribute__((section(".no_init")));
  79:../Startup/system_XMC1100.c **** #elif defined ( __TASKING__ )
  80:../Startup/system_XMC1100.c **** uint32_t SystemCoreClock __at( 0x20003FFC );
  81:../Startup/system_XMC1100.c **** #endif
  82:../Startup/system_XMC1100.c **** 
  83:../Startup/system_XMC1100.c **** /*******************************************************************************
  84:../Startup/system_XMC1100.c ****  * API IMPLEMENTATION
  85:../Startup/system_XMC1100.c ****  *******************************************************************************/
  86:../Startup/system_XMC1100.c **** 
  87:../Startup/system_XMC1100.c **** __WEAK void SystemInit(void)
  88:../Startup/system_XMC1100.c **** {    
  33              	 .loc 1 88 0
  34              	 .cfi_startproc
  35 0000 80B5     	 push {r7,lr}
  36              	.LCFI0:
  37              	 .cfi_def_cfa_offset 8
  38              	 .cfi_offset 7,-8
  39              	 .cfi_offset 14,-4
  40 0002 00AF     	 add r7,sp,#0
  41              	.LCFI1:
  42              	 .cfi_def_cfa_register 7
  89:../Startup/system_XMC1100.c ****   SystemCoreSetup();
  43              	 .loc 1 89 0
  44 0004 FFF7FEFF 	 bl SystemCoreSetup
  90:../Startup/system_XMC1100.c ****   SystemCoreClockSetup();
  45              	 .loc 1 90 0
  46 0008 FFF7FEFF 	 bl SystemCoreClockSetup
  91:../Startup/system_XMC1100.c **** }
  47              	 .loc 1 91 0
  48 000c BD46     	 mov sp,r7
  49              	 
  50 000e 80BD     	 pop {r7,pc}
  51              	 .cfi_endproc
  52              	.LFE36:
  54              	 .section .text.SystemCoreSetup,"ax",%progbits
  55              	 .align 2
  56              	 .weak SystemCoreSetup
  57              	 .code 16
  58              	 .thumb_func
  60              	SystemCoreSetup:
  61              	.LFB37:
  92:../Startup/system_XMC1100.c **** 
  93:../Startup/system_XMC1100.c **** __WEAK void SystemCoreSetup(void)
  94:../Startup/system_XMC1100.c **** {
  62              	 .loc 1 94 0
  63              	 .cfi_startproc
  64 0000 80B5     	 push {r7,lr}
  65              	.LCFI2:
  66              	 .cfi_def_cfa_offset 8
  67              	 .cfi_offset 7,-8
  68              	 .cfi_offset 14,-4
  69 0002 00AF     	 add r7,sp,#0
  70              	.LCFI3:
  71              	 .cfi_def_cfa_register 7
  95:../Startup/system_XMC1100.c **** #ifndef USE_DYNAMIC_FLASH_WS
  96:../Startup/system_XMC1100.c ****   /* Fix flash wait states to 1 cycle (see DS Addendum) */
  97:../Startup/system_XMC1100.c ****   NVM->NVMCONF |= NVM_NVMCONF_WS_Msk;
  72              	 .loc 1 97 0
  73 0004 0A49     	 ldr r1,.L3
  74 0006 0A4B     	 ldr r3,.L3
  75 0008 1B89     	 ldrh r3,[r3,#8]
  76 000a 9BB2     	 uxth r3,r3
  77 000c 8022     	 mov r2,#128
  78 000e 5201     	 lsl r2,r2,#5
  79 0010 1343     	 orr r3,r2
  80 0012 9BB2     	 uxth r3,r3
  81 0014 0B81     	 strh r3,[r1,#8]
  98:../Startup/system_XMC1100.c ****   NVM->CONFIG1 |= NVM_CONFIG1_FIXWS_Msk;
  82              	 .loc 1 98 0
  83 0016 0649     	 ldr r1,.L3
  84 0018 054A     	 ldr r2,.L3
  85 001a 4823     	 mov r3,#72
  86 001c D35A     	 ldrh r3,[r2,r3]
  87 001e 9BB2     	 uxth r3,r3
  88 0020 8022     	 mov r2,#128
  89 0022 1201     	 lsl r2,r2,#4
  90 0024 1343     	 orr r3,r2
  91 0026 9AB2     	 uxth r2,r3
  92 0028 4823     	 mov r3,#72
  93 002a CA52     	 strh r2,[r1,r3]
  99:../Startup/system_XMC1100.c **** #endif
 100:../Startup/system_XMC1100.c **** }
  94              	 .loc 1 100 0
  95 002c BD46     	 mov sp,r7
  96              	 
  97 002e 80BD     	 pop {r7,pc}
  98              	.L4:
  99              	 .align 2
 100              	.L3:
 101 0030 00000540 	 .word 1074069504
 102              	 .cfi_endproc
 103              	.LFE37:
 105              	 .section .text.SystemCoreClockSetup,"ax",%progbits
 106              	 .align 2
 107              	 .weak SystemCoreClockSetup
 108              	 .code 16
 109              	 .thumb_func
 111              	SystemCoreClockSetup:
 112              	.LFB38:
 101:../Startup/system_XMC1100.c **** 
 102:../Startup/system_XMC1100.c **** __WEAK void SystemCoreClockSetup(void)
 103:../Startup/system_XMC1100.c **** {
 113              	 .loc 1 103 0
 114              	 .cfi_startproc
 115 0000 80B5     	 push {r7,lr}
 116              	.LCFI4:
 117              	 .cfi_def_cfa_offset 8
 118              	 .cfi_offset 7,-8
 119              	 .cfi_offset 14,-4
 120 0002 00AF     	 add r7,sp,#0
 121              	.LCFI5:
 122              	 .cfi_def_cfa_register 7
 104:../Startup/system_XMC1100.c ****   /* Override values of CLOCK_VAL1 and CLOCK_VAL2 defined in vector table */
 105:../Startup/system_XMC1100.c ****   /* MCLK = 32MHz, PCLK = 64MHz */
 106:../Startup/system_XMC1100.c ****   
 107:../Startup/system_XMC1100.c ****   SCU_GENERAL->PASSWD = 0x000000C0UL; /* disable bit protection */
 123              	 .loc 1 107 0
 124 0004 094B     	 ldr r3,.L7
 125 0006 C022     	 mov r2,#192
 126 0008 5A62     	 str r2,[r3,#36]
 108:../Startup/system_XMC1100.c ****   SCU_CLK->CLKCR = 0x3FF10100UL;
 127              	 .loc 1 108 0
 128 000a 094B     	 ldr r3,.L7+4
 129 000c 094A     	 ldr r2,.L7+8
 130 000e 1A60     	 str r2,[r3]
 109:../Startup/system_XMC1100.c ****   while((SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk));
 131              	 .loc 1 109 0
 132 0010 C046     	 mov r8,r8
 133              	.L6:
 134              	 .loc 1 109 0 is_stmt 0 discriminator 1
 135 0012 074B     	 ldr r3,.L7+4
 136 0014 1A68     	 ldr r2,[r3]
 137 0016 8023     	 mov r3,#128
 138 0018 DB05     	 lsl r3,r3,#23
 139 001a 1340     	 and r3,r2
 140 001c F9D1     	 bne .L6
 110:../Startup/system_XMC1100.c ****   SCU_GENERAL->PASSWD = 0x000000C3UL; /* enable bit protection */
 141              	 .loc 1 110 0 is_stmt 1
 142 001e 034B     	 ldr r3,.L7
 143 0020 C322     	 mov r2,#195
 144 0022 5A62     	 str r2,[r3,#36]
 111:../Startup/system_XMC1100.c ****   
 112:../Startup/system_XMC1100.c ****   SystemCoreClockUpdate();
 145              	 .loc 1 112 0
 146 0024 FFF7FEFF 	 bl SystemCoreClockUpdate
 113:../Startup/system_XMC1100.c **** }
 147              	 .loc 1 113 0
 148 0028 BD46     	 mov sp,r7
 149              	 
 150 002a 80BD     	 pop {r7,pc}
 151              	.L8:
 152              	 .align 2
 153              	.L7:
 154 002c 00000140 	 .word 1073807360
 155 0030 00030140 	 .word 1073808128
 156 0034 0001F13F 	 .word 1072759040
 157              	 .cfi_endproc
 158              	.LFE38:
 160              	 .global __aeabi_uidiv
 161              	 .section .text.SystemCoreClockUpdate,"ax",%progbits
 162              	 .align 2
 163              	 .weak SystemCoreClockUpdate
 164              	 .code 16
 165              	 .thumb_func
 167              	SystemCoreClockUpdate:
 168              	.LFB39:
 114:../Startup/system_XMC1100.c **** 
 115:../Startup/system_XMC1100.c **** __WEAK void SystemCoreClockUpdate(void)
 116:../Startup/system_XMC1100.c **** {
 169              	 .loc 1 116 0
 170              	 .cfi_startproc
 171 0000 80B5     	 push {r7,lr}
 172              	.LCFI6:
 173              	 .cfi_def_cfa_offset 8
 174              	 .cfi_offset 7,-8
 175              	 .cfi_offset 14,-4
 176 0002 00AF     	 add r7,sp,#0
 177              	.LCFI7:
 178              	 .cfi_def_cfa_register 7
 117:../Startup/system_XMC1100.c ****   static uint32_t IDIV, FDIV;
 118:../Startup/system_XMC1100.c **** 
 119:../Startup/system_XMC1100.c ****   IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
 179              	 .loc 1 119 0
 180 0004 124B     	 ldr r3,.L12
 181 0006 1A68     	 ldr r2,[r3]
 182 0008 FF23     	 mov r3,#255
 183 000a 1B02     	 lsl r3,r3,#8
 184 000c 1340     	 and r3,r2
 185 000e 1A0A     	 lsr r2,r3,#8
 186 0010 104B     	 ldr r3,.L12+4
 187 0012 1A60     	 str r2,[r3]
 120:../Startup/system_XMC1100.c ****   FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
 188              	 .loc 1 120 0
 189 0014 0E4B     	 ldr r3,.L12
 190 0016 1B68     	 ldr r3,[r3]
 191 0018 FF22     	 mov r2,#255
 192 001a 1A40     	 and r2,r3
 193 001c 0E4B     	 ldr r3,.L12+8
 194 001e 1A60     	 str r2,[r3]
 121:../Startup/system_XMC1100.c ****   
 122:../Startup/system_XMC1100.c ****   if (IDIV != 0)
 195              	 .loc 1 122 0
 196 0020 0C4B     	 ldr r3,.L12+4
 197 0022 1B68     	 ldr r3,[r3]
 198 0024 002B     	 cmp r3,#0
 199 0026 0ED0     	 beq .L10
 123:../Startup/system_XMC1100.c ****   {
 124:../Startup/system_XMC1100.c ****     /* Fractional divider is enabled and used */
 125:../Startup/system_XMC1100.c ****     SystemCoreClock = ((DCO1_FREQUENCY << 6U) / ((IDIV << 8) + FDIV)) << 1U;
 200              	 .loc 1 125 0
 201 0028 0A4B     	 ldr r3,.L12+4
 202 002a 1B68     	 ldr r3,[r3]
 203 002c 1A02     	 lsl r2,r3,#8
 204 002e 0A4B     	 ldr r3,.L12+8
 205 0030 1B68     	 ldr r3,[r3]
 206 0032 D318     	 add r3,r2,r3
 207 0034 0948     	 ldr r0,.L12+12
 208 0036 191C     	 mov r1,r3
 209 0038 FFF7FEFF 	 bl __aeabi_uidiv
 210 003c 031C     	 mov r3,r0
 211 003e 5A00     	 lsl r2,r3,#1
 212 0040 074B     	 ldr r3,.L12+16
 213 0042 1A60     	 str r2,[r3]
 214 0044 02E0     	 b .L9
 215              	.L10:
 126:../Startup/system_XMC1100.c ****   }
 127:../Startup/system_XMC1100.c ****   else
 128:../Startup/system_XMC1100.c ****   {
 129:../Startup/system_XMC1100.c ****     /* Fractional divider bypassed. Simply divide DCO_DCLK by 2 */
 130:../Startup/system_XMC1100.c ****     SystemCoreClock = DCO1_FREQUENCY >> 1U;
 216              	 .loc 1 130 0
 217 0046 064B     	 ldr r3,.L12+16
 218 0048 064A     	 ldr r2,.L12+20
 219 004a 1A60     	 str r2,[r3]
 220              	.L9:
 131:../Startup/system_XMC1100.c ****   }
 132:../Startup/system_XMC1100.c **** }
 221              	 .loc 1 132 0
 222 004c BD46     	 mov sp,r7
 223              	 
 224 004e 80BD     	 pop {r7,pc}
 225              	.L13:
 226              	 .align 2
 227              	.L12:
 228 0050 00030140 	 .word 1073808128
 229 0054 00000000 	 .word IDIV.4730
 230 0058 00000000 	 .word FDIV.4731
 231 005c 000024F4 	 .word -198967296
 232 0060 00000000 	 .word SystemCoreClock
 233 0064 0048E801 	 .word 32000000
 234              	 .cfi_endproc
 235              	.LFE39:
 237              	 .section .bss.IDIV.4730,"aw",%nobits
 238              	 .align 2
 241              	IDIV.4730:
 242 0000 00000000 	 .space 4
 243              	 .section .bss.FDIV.4731,"aw",%nobits
 244              	 .align 2
 247              	FDIV.4731:
 248 0000 00000000 	 .space 4
 249              	 .text
 250              	.Letext0:
 251              	 .file 2 "c:\\users\\follower\\downloads\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 252              	 .file 3 "c:\\users\\follower\\downloads\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 253              	 .file 4 "C:/Workspaces/DAVE-4.4.2-64Bit/JuFo/Libraries/CMSIS/Infineon/XMC1100_series/Include/XMC1100.h"
DEFINED SYMBOLS
                            *ABS*:00000000 system_XMC1100.c
    {standard input}:22     .no_init:00000000 SystemCoreClock
    {standard input}:19     .no_init:00000000 $d
    {standard input}:25     .text.SystemInit:00000000 $t
    {standard input}:30     .text.SystemInit:00000000 SystemInit
    {standard input}:60     .text.SystemCoreSetup:00000000 SystemCoreSetup
    {standard input}:111    .text.SystemCoreClockSetup:00000000 SystemCoreClockSetup
    {standard input}:55     .text.SystemCoreSetup:00000000 $t
    {standard input}:101    .text.SystemCoreSetup:00000030 $d
    {standard input}:106    .text.SystemCoreClockSetup:00000000 $t
    {standard input}:167    .text.SystemCoreClockUpdate:00000000 SystemCoreClockUpdate
    {standard input}:154    .text.SystemCoreClockSetup:0000002c $d
    {standard input}:162    .text.SystemCoreClockUpdate:00000000 $t
    {standard input}:228    .text.SystemCoreClockUpdate:00000050 $d
    {standard input}:241    .bss.IDIV.4730:00000000 IDIV.4730
    {standard input}:247    .bss.FDIV.4731:00000000 FDIV.4731
    {standard input}:238    .bss.IDIV.4730:00000000 $d
    {standard input}:244    .bss.FDIV.4731:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
