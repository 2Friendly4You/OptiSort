   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "xmc_eru.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_ERU_ETL_Init,"ax",%progbits
  18              	 .align 2
  19              	 .global XMC_ERU_ETL_Init
  20              	 .code 16
  21              	 .thumb_func
  23              	XMC_ERU_ETL_Init:
  24              	.LFB45:
  25              	 .file 1 "../Libraries/XMCLib/src/xmc_eru.c"
   1:../Libraries/XMCLib/src/xmc_eru.c **** /**
   2:../Libraries/XMCLib/src/xmc_eru.c ****  * @file xmc_eru.c
   3:../Libraries/XMCLib/src/xmc_eru.c ****  * @date 2016-03-10
   4:../Libraries/XMCLib/src/xmc_eru.c ****  *
   5:../Libraries/XMCLib/src/xmc_eru.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_eru.c ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_eru.c ****  *
   9:../Libraries/XMCLib/src/xmc_eru.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_eru.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_eru.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_eru.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_eru.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_eru.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_eru.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_eru.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_eru.c ****  * 
  18:../Libraries/XMCLib/src/xmc_eru.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_eru.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_eru.c ****  * 
  21:../Libraries/XMCLib/src/xmc_eru.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_eru.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_eru.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_eru.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_eru.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_eru.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_eru.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_eru.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_eru.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_eru.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_eru.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_eru.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_eru.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_eru.c ****  *
  36:../Libraries/XMCLib/src/xmc_eru.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_eru.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_eru.c ****  *
  39:../Libraries/XMCLib/src/xmc_eru.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_eru.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_eru.c ****  *
  42:../Libraries/XMCLib/src/xmc_eru.c ****  * 2015-06-20:
  43:../Libraries/XMCLib/src/xmc_eru.c ****  *     - Removed definition of GetDriverVersion API <br>
  44:../Libraries/XMCLib/src/xmc_eru.c ****  *
  45:../Libraries/XMCLib/src/xmc_eru.c ****  * 2016-03-10:
  46:../Libraries/XMCLib/src/xmc_eru.c ****  *     - XMC_ERU_ETL_GetEdgeDetection() API is added to get the configured edge for event generatio
  47:../Libraries/XMCLib/src/xmc_eru.c ****  *
  48:../Libraries/XMCLib/src/xmc_eru.c ****  * @endcond
  49:../Libraries/XMCLib/src/xmc_eru.c ****  */
  50:../Libraries/XMCLib/src/xmc_eru.c **** 
  51:../Libraries/XMCLib/src/xmc_eru.c **** /**************************************************************************************************
  52:../Libraries/XMCLib/src/xmc_eru.c ****  * HEADER FILES
  53:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
  54:../Libraries/XMCLib/src/xmc_eru.c **** 
  55:../Libraries/XMCLib/src/xmc_eru.c **** #include "xmc_eru.h"
  56:../Libraries/XMCLib/src/xmc_eru.c **** 
  57:../Libraries/XMCLib/src/xmc_eru.c **** /**************************************************************************************************
  58:../Libraries/XMCLib/src/xmc_eru.c ****  * MACROS
  59:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
  60:../Libraries/XMCLib/src/xmc_eru.c **** 
  61:../Libraries/XMCLib/src/xmc_eru.c **** #define ERU_EXISEL_BITSIZE (4UL) /* Used to set the input for path A and path B based on the channe
  62:../Libraries/XMCLib/src/xmc_eru.c **** #define ERU_EXISEL_INPUT_BITSIZE (2UL)
  63:../Libraries/XMCLib/src/xmc_eru.c **** 
  64:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_INPUT_A(input) \
  65:../Libraries/XMCLib/src/xmc_eru.c ****     ((input == XMC_ERU_ETL_INPUT_A0) || \
  66:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_A1) || \
  67:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_A2) || \
  68:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_A3))
  69:../Libraries/XMCLib/src/xmc_eru.c **** 
  70:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_INPUT_B(input) \
  71:../Libraries/XMCLib/src/xmc_eru.c ****     ((input == XMC_ERU_ETL_INPUT_B0) || \
  72:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_B1) || \
  73:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_B2) || \
  74:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_B3))
  75:../Libraries/XMCLib/src/xmc_eru.c **** 
  76:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_STATUS_FLAG_MODE(mode) \
  77:../Libraries/XMCLib/src/xmc_eru.c ****     ((mode == XMC_ERU_ETL_STATUS_FLAG_MODE_SWCTRL) || \
  78:../Libraries/XMCLib/src/xmc_eru.c ****      (mode == XMC_ERU_ETL_STATUS_FLAG_MODE_HWCTRL))
  79:../Libraries/XMCLib/src/xmc_eru.c **** 
  80:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_EVENT_SOURCE(source) \
  81:../Libraries/XMCLib/src/xmc_eru.c ****     ((source == XMC_ERU_ETL_SOURCE_A)              || \
  82:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_B)              || \
  83:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_OR_B)         || \
  84:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_AND_B)        || \
  85:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A)          || \
  86:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_OR_B)     || \
  87:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_AND_B)    || \
  88:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_B)          || \
  89:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_OR_NOT_B)     || \
  90:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_AND_NOT_B)    || \
  91:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_OR_NOT_B) || \
  92:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_AND_NOT_B))
  93:../Libraries/XMCLib/src/xmc_eru.c **** 
  94:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_TRIGGER_EDGE(edge) \
  95:../Libraries/XMCLib/src/xmc_eru.c ****     ((edge == XMC_ERU_ETL_EDGE_DETECTION_DISABLED) || \
  96:../Libraries/XMCLib/src/xmc_eru.c ****      (edge == XMC_ERU_ETL_EDGE_DETECTION_RISING) || \
  97:../Libraries/XMCLib/src/xmc_eru.c ****      (edge == XMC_ERU_ETL_EDGE_DETECTION_FALLING) || \
  98:../Libraries/XMCLib/src/xmc_eru.c ****      (edge == XMC_ERU_ETL_EDGE_DETECTION_BOTH))
  99:../Libraries/XMCLib/src/xmc_eru.c **** 
 100:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_TRIGGER_CHANNEL(channel) \
 101:../Libraries/XMCLib/src/xmc_eru.c ****     ((channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL0) || \
 102:../Libraries/XMCLib/src/xmc_eru.c ****      (channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL1) || \
 103:../Libraries/XMCLib/src/xmc_eru.c ****      (channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL2) || \
 104:../Libraries/XMCLib/src/xmc_eru.c ****      (channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL3))
 105:../Libraries/XMCLib/src/xmc_eru.c **** 
 106:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_OGU_CHECK_PATTERN_INPUT(input) \
 107:../Libraries/XMCLib/src/xmc_eru.c ****     ((input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT0) || \
 108:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT1) || \
 109:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT2) || \
 110:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT3))
 111:../Libraries/XMCLib/src/xmc_eru.c **** 
 112:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_OGU_CHECK_PERIPHERAL_TRIGGER(trigger) \
 113:../Libraries/XMCLib/src/xmc_eru.c ****     ((trigger == XMC_ERU_OGU_PERIPHERAL_TRIGGER1) || \
 114:../Libraries/XMCLib/src/xmc_eru.c ****      (trigger == XMC_ERU_OGU_PERIPHERAL_TRIGGER2) || \
 115:../Libraries/XMCLib/src/xmc_eru.c ****      (trigger == XMC_ERU_OGU_PERIPHERAL_TRIGGER3))
 116:../Libraries/XMCLib/src/xmc_eru.c **** 
 117:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_OGU_CHECK_SERIVCE_REQUEST(service) \
 118:../Libraries/XMCLib/src/xmc_eru.c ****     ((service == XMC_ERU_OGU_SERVICE_REQUEST_DISABLED) || \
 119:../Libraries/XMCLib/src/xmc_eru.c ****      (service == XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER) || \
 120:../Libraries/XMCLib/src/xmc_eru.c ****      (service == XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER_AND_PATTERN_MATCH) || \
 121:../Libraries/XMCLib/src/xmc_eru.c ****      (service == XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER_AND_PATTERN_MISMATCH))
 122:../Libraries/XMCLib/src/xmc_eru.c ****  
 123:../Libraries/XMCLib/src/xmc_eru.c **** /**************************************************************************************************
 124:../Libraries/XMCLib/src/xmc_eru.c ****  * API IMPLEMENTATION
 125:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
 126:../Libraries/XMCLib/src/xmc_eru.c **** /* Initializes the selected ERU_ETLx channel with the config structure.  */
 127:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
 128:../Libraries/XMCLib/src/xmc_eru.c ****                       const uint8_t channel,
 129:../Libraries/XMCLib/src/xmc_eru.c ****                       const XMC_ERU_ETL_CONFIG_t *const config)
 130:../Libraries/XMCLib/src/xmc_eru.c **** { 
  26              	 .loc 1 130 0
  27              	 .cfi_startproc
  28 0000 80B5     	 push {r7,lr}
  29              	.LCFI0:
  30              	 .cfi_def_cfa_offset 8
  31              	 .cfi_offset 7,-8
  32              	 .cfi_offset 14,-4
  33 0002 84B0     	 sub sp,sp,#16
  34              	.LCFI1:
  35              	 .cfi_def_cfa_offset 24
  36 0004 00AF     	 add r7,sp,#0
  37              	.LCFI2:
  38              	 .cfi_def_cfa_register 7
  39 0006 F860     	 str r0,[r7,#12]
  40 0008 7A60     	 str r2,[r7,#4]
  41 000a 0B23     	 mov r3,#11
  42 000c FB18     	 add r3,r7,r3
  43 000e 0A1C     	 add r2,r1,#0
  44 0010 1A70     	 strb r2,[r3]
 131:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 132:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));
 133:../Libraries/XMCLib/src/xmc_eru.c **** 
 134:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ERU_Enable(eru);
  45              	 .loc 1 134 0
  46 0012 FB68     	 ldr r3,[r7,#12]
  47 0014 181C     	 mov r0,r3
  48 0016 FFF7FEFF 	 bl XMC_ERU_Enable
 135:../Libraries/XMCLib/src/xmc_eru.c **** 
 136:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXISEL = (eru->EXISEL & 
  49              	 .loc 1 136 0
  50 001a FB68     	 ldr r3,[r7,#12]
  51 001c 1B68     	 ldr r3,[r3]
 137:../Libraries/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
  52              	 .loc 1 137 0
  53 001e 0B22     	 mov r2,#11
  54 0020 BA18     	 add r2,r7,r2
  55 0022 1278     	 ldrb r2,[r2]
  56 0024 9200     	 lsl r2,r2,#2
  57 0026 111C     	 mov r1,r2
  58 0028 0F22     	 mov r2,#15
  59 002a 8A40     	 lsl r2,r2,r1
  60 002c D243     	 mvn r2,r2
 136:../Libraries/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
  61              	 .loc 1 136 0
  62 002e 1A40     	 and r2,r3
 138:../Libraries/XMCLib/src/xmc_eru.c ****                 (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  63              	 .loc 1 138 0
  64 0030 7B68     	 ldr r3,[r7,#4]
  65 0032 1B68     	 ldr r3,[r3]
  66 0034 0B21     	 mov r1,#11
  67 0036 7918     	 add r1,r7,r1
  68 0038 0978     	 ldrb r1,[r1]
  69 003a 8900     	 lsl r1,r1,#2
  70 003c 8B40     	 lsl r3,r3,r1
 137:../Libraries/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
  71              	 .loc 1 137 0
  72 003e 1A43     	 orr r2,r3
 136:../Libraries/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
  73              	 .loc 1 136 0
  74 0040 FB68     	 ldr r3,[r7,#12]
  75 0042 1A60     	 str r2,[r3]
 139:../Libraries/XMCLib/src/xmc_eru.c ****   
 140:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON[channel] = config->raw;
  76              	 .loc 1 140 0
  77 0044 0B23     	 mov r3,#11
  78 0046 FB18     	 add r3,r7,r3
  79 0048 1A78     	 ldrb r2,[r3]
  80 004a 7B68     	 ldr r3,[r7,#4]
  81 004c 5968     	 ldr r1,[r3,#4]
  82 004e FB68     	 ldr r3,[r7,#12]
  83 0050 0432     	 add r2,r2,#4
  84 0052 9200     	 lsl r2,r2,#2
  85 0054 D150     	 str r1,[r2,r3]
 141:../Libraries/XMCLib/src/xmc_eru.c **** }
  86              	 .loc 1 141 0
  87 0056 BD46     	 mov sp,r7
  88 0058 04B0     	 add sp,sp,#16
  89              	 
  90 005a 80BD     	 pop {r7,pc}
  91              	 .cfi_endproc
  92              	.LFE45:
  94              	 .section .text.XMC_ERU_OGU_Init,"ax",%progbits
  95              	 .align 2
  96              	 .global XMC_ERU_OGU_Init
  97              	 .code 16
  98              	 .thumb_func
 100              	XMC_ERU_OGU_Init:
 101              	.LFB46:
 142:../Libraries/XMCLib/src/xmc_eru.c **** 
 143:../Libraries/XMCLib/src/xmc_eru.c **** /* Initializes the selected ERU_OGUy channel with the config structure.  */
 144:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_Init(XMC_ERU_t *const eru,
 145:../Libraries/XMCLib/src/xmc_eru.c ****                       const uint8_t channel,
 146:../Libraries/XMCLib/src/xmc_eru.c ****                       const XMC_ERU_OGU_CONFIG_t *const config)
 147:../Libraries/XMCLib/src/xmc_eru.c **** {
 102              	 .loc 1 147 0
 103              	 .cfi_startproc
 104 0000 80B5     	 push {r7,lr}
 105              	.LCFI3:
 106              	 .cfi_def_cfa_offset 8
 107              	 .cfi_offset 7,-8
 108              	 .cfi_offset 14,-4
 109 0002 84B0     	 sub sp,sp,#16
 110              	.LCFI4:
 111              	 .cfi_def_cfa_offset 24
 112 0004 00AF     	 add r7,sp,#0
 113              	.LCFI5:
 114              	 .cfi_def_cfa_register 7
 115 0006 F860     	 str r0,[r7,#12]
 116 0008 7A60     	 str r2,[r7,#4]
 117 000a 0B23     	 mov r3,#11
 118 000c FB18     	 add r3,r7,r3
 119 000e 0A1C     	 add r2,r1,#0
 120 0010 1A70     	 strb r2,[r3]
 148:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 149:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Channel Number", (channel < 4U));
 150:../Libraries/XMCLib/src/xmc_eru.c **** 
 151:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ERU_Enable(eru);
 121              	 .loc 1 151 0
 122 0012 FB68     	 ldr r3,[r7,#12]
 123 0014 181C     	 mov r0,r3
 124 0016 FFF7FEFF 	 bl XMC_ERU_Enable
 152:../Libraries/XMCLib/src/xmc_eru.c **** 
 153:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON[channel] = config->raw;
 125              	 .loc 1 153 0
 126 001a 0B23     	 mov r3,#11
 127 001c FB18     	 add r3,r7,r3
 128 001e 1A78     	 ldrb r2,[r3]
 129 0020 7B68     	 ldr r3,[r7,#4]
 130 0022 1968     	 ldr r1,[r3]
 131 0024 FB68     	 ldr r3,[r7,#12]
 132 0026 0832     	 add r2,r2,#8
 133 0028 9200     	 lsl r2,r2,#2
 134 002a D150     	 str r1,[r2,r3]
 154:../Libraries/XMCLib/src/xmc_eru.c **** }
 135              	 .loc 1 154 0
 136 002c BD46     	 mov sp,r7
 137 002e 04B0     	 add sp,sp,#16
 138              	 
 139 0030 80BD     	 pop {r7,pc}
 140              	 .cfi_endproc
 141              	.LFE46:
 143 0032 C046     	 .section .text.XMC_ERU_ETL_SetInput,"ax",%progbits
 144              	 .align 2
 145              	 .global XMC_ERU_ETL_SetInput
 146              	 .code 16
 147              	 .thumb_func
 149              	XMC_ERU_ETL_SetInput:
 150              	.LFB47:
 155:../Libraries/XMCLib/src/xmc_eru.c **** 
 156:../Libraries/XMCLib/src/xmc_eru.c **** /* Configures the event source for path A and path B, with selected input_a and input_b respectivel
 157:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetInput(XMC_ERU_t *const eru,
 158:../Libraries/XMCLib/src/xmc_eru.c ****                           const uint8_t channel,
 159:../Libraries/XMCLib/src/xmc_eru.c ****                           const XMC_ERU_ETL_INPUT_A_t input_a,
 160:../Libraries/XMCLib/src/xmc_eru.c ****                           const XMC_ERU_ETL_INPUT_B_t input_b)
 161:../Libraries/XMCLib/src/xmc_eru.c **** {
 151              	 .loc 1 161 0
 152              	 .cfi_startproc
 153 0000 90B5     	 push {r4,r7,lr}
 154              	.LCFI6:
 155              	 .cfi_def_cfa_offset 12
 156              	 .cfi_offset 4,-12
 157              	 .cfi_offset 7,-8
 158              	 .cfi_offset 14,-4
 159 0002 83B0     	 sub sp,sp,#12
 160              	.LCFI7:
 161              	 .cfi_def_cfa_offset 24
 162 0004 00AF     	 add r7,sp,#0
 163              	.LCFI8:
 164              	 .cfi_def_cfa_register 7
 165 0006 7860     	 str r0,[r7,#4]
 166 0008 0C1C     	 mov r4,r1
 167 000a 101C     	 mov r0,r2
 168 000c 191C     	 mov r1,r3
 169 000e FB1C     	 add r3,r7,#3
 170 0010 221C     	 add r2,r4,#0
 171 0012 1A70     	 strb r2,[r3]
 172 0014 BB1C     	 add r3,r7,#2
 173 0016 021C     	 add r2,r0,#0
 174 0018 1A70     	 strb r2,[r3]
 175 001a 7B1C     	 add r3,r7,#1
 176 001c 0A1C     	 add r2,r1,#0
 177 001e 1A70     	 strb r2,[r3]
 162:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 163:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid Channel Number", (channel < 4U));
 164:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid A", XMC_ERU_ETL_CHECK_INPUT_A(input_a));
 165:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid B", XMC_ERU_ETL_CHECK_INPUT_B(input_b));
 166:../Libraries/XMCLib/src/xmc_eru.c **** 
 167:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXISEL = (eru->EXISEL & ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channe
 178              	 .loc 1 167 0
 179 0020 7B68     	 ldr r3,[r7,#4]
 180 0022 1B68     	 ldr r3,[r3]
 181 0024 FA1C     	 add r2,r7,#3
 182 0026 1278     	 ldrb r2,[r2]
 183 0028 9200     	 lsl r2,r2,#2
 184 002a 111C     	 mov r1,r2
 185 002c 0F22     	 mov r2,#15
 186 002e 8A40     	 lsl r2,r2,r1
 187 0030 D243     	 mvn r2,r2
 188 0032 1A40     	 and r2,r3
 168:../Libraries/XMCLib/src/xmc_eru.c ****                 (((uint32_t)input_a | (uint32_t)(input_b << ERU_EXISEL_INPUT_BITSIZE))  << (channel
 189              	 .loc 1 168 0
 190 0034 BB1C     	 add r3,r7,#2
 191 0036 1B78     	 ldrb r3,[r3]
 192 0038 791C     	 add r1,r7,#1
 193 003a 0978     	 ldrb r1,[r1]
 194 003c 8900     	 lsl r1,r1,#2
 195 003e 0B43     	 orr r3,r1
 196 0040 F91C     	 add r1,r7,#3
 197 0042 0978     	 ldrb r1,[r1]
 198 0044 8900     	 lsl r1,r1,#2
 199 0046 8B40     	 lsl r3,r3,r1
 167:../Libraries/XMCLib/src/xmc_eru.c ****                 (((uint32_t)input_a | (uint32_t)(input_b << ERU_EXISEL_INPUT_BITSIZE))  << (channel
 200              	 .loc 1 167 0
 201 0048 1A43     	 orr r2,r3
 202 004a 7B68     	 ldr r3,[r7,#4]
 203 004c 1A60     	 str r2,[r3]
 169:../Libraries/XMCLib/src/xmc_eru.c **** }
 204              	 .loc 1 169 0
 205 004e BD46     	 mov sp,r7
 206 0050 03B0     	 add sp,sp,#12
 207              	 
 208 0052 90BD     	 pop {r4,r7,pc}
 209              	 .cfi_endproc
 210              	.LFE47:
 212              	 .section .text.XMC_ERU_ETL_SetSource,"ax",%progbits
 213              	 .align 2
 214              	 .global XMC_ERU_ETL_SetSource
 215              	 .code 16
 216              	 .thumb_func
 218              	XMC_ERU_ETL_SetSource:
 219              	.LFB48:
 170:../Libraries/XMCLib/src/xmc_eru.c **** 
 171:../Libraries/XMCLib/src/xmc_eru.c **** /* Select input path combination along with polarity for event generation by setting (SS, NA, NB) b
 172:../Libraries/XMCLib/src/xmc_eru.c ****    EXICONx(x = [0 to 3]) register */
 173:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetSource(XMC_ERU_t *const eru,
 174:../Libraries/XMCLib/src/xmc_eru.c ****                           const uint8_t channel,
 175:../Libraries/XMCLib/src/xmc_eru.c ****                           const XMC_ERU_ETL_SOURCE_t source)
 176:../Libraries/XMCLib/src/xmc_eru.c **** {
 220              	 .loc 1 176 0
 221              	 .cfi_startproc
 222 0000 90B5     	 push {r4,r7,lr}
 223              	.LCFI9:
 224              	 .cfi_def_cfa_offset 12
 225              	 .cfi_offset 4,-12
 226              	 .cfi_offset 7,-8
 227              	 .cfi_offset 14,-4
 228 0002 83B0     	 sub sp,sp,#12
 229              	.LCFI10:
 230              	 .cfi_def_cfa_offset 24
 231 0004 00AF     	 add r7,sp,#0
 232              	.LCFI11:
 233              	 .cfi_def_cfa_register 7
 234 0006 7860     	 str r0,[r7,#4]
 235 0008 081C     	 mov r0,r1
 236 000a 111C     	 mov r1,r2
 237 000c FB1C     	 add r3,r7,#3
 238 000e 021C     	 add r2,r0,#0
 239 0010 1A70     	 strb r2,[r3]
 240 0012 BB1C     	 add r3,r7,#2
 241 0014 0A1C     	 add r2,r1,#0
 242 0016 1A70     	 strb r2,[r3]
 177:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 178:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Channel Number", (channel < 4U));
 179:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Source", XMC_ERU_ETL_CHECK_EVENT_SOURCE(source));
 180:../Libraries/XMCLib/src/xmc_eru.c **** 
 181:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].SS = (uint8_t)source;
 243              	 .loc 1 181 0
 244 0018 FB1C     	 add r3,r7,#3
 245 001a 1A78     	 ldrb r2,[r3]
 246 001c BB1C     	 add r3,r7,#2
 247 001e 1B78     	 ldrb r3,[r3]
 248 0020 0F21     	 mov r1,#15
 249 0022 0B40     	 and r3,r1
 250 0024 D9B2     	 uxtb r1,r3
 251 0026 7B68     	 ldr r3,[r7,#4]
 252 0028 0432     	 add r2,r2,#4
 253 002a 9200     	 lsl r2,r2,#2
 254 002c 0F20     	 mov r0,#15
 255 002e 0140     	 and r1,r0
 256 0030 0902     	 lsl r1,r1,#8
 257 0032 D058     	 ldr r0,[r2,r3]
 258 0034 034C     	 ldr r4,.L5
 259 0036 2040     	 and r0,r4
 260 0038 0143     	 orr r1,r0
 261 003a D150     	 str r1,[r2,r3]
 182:../Libraries/XMCLib/src/xmc_eru.c **** }
 262              	 .loc 1 182 0
 263 003c BD46     	 mov sp,r7
 264 003e 03B0     	 add sp,sp,#12
 265              	 
 266 0040 90BD     	 pop {r4,r7,pc}
 267              	.L6:
 268 0042 C046     	 .align 2
 269              	.L5:
 270 0044 FFF0FFFF 	 .word -3841
 271              	 .cfi_endproc
 272              	.LFE48:
 274              	 .section .text.XMC_ERU_ETL_SetEdgeDetection,"ax",%progbits
 275              	 .align 2
 276              	 .global XMC_ERU_ETL_SetEdgeDetection
 277              	 .code 16
 278              	 .thumb_func
 280              	XMC_ERU_ETL_SetEdgeDetection:
 281              	.LFB49:
 183:../Libraries/XMCLib/src/xmc_eru.c **** 
 184:../Libraries/XMCLib/src/xmc_eru.c **** /* Configure event trigger edge/s by setting (RE, FE) bits of EXICONx(x = [0 to 3]) register.*/
 185:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetEdgeDetection(XMC_ERU_t *const eru,
 186:../Libraries/XMCLib/src/xmc_eru.c ****                                   const uint8_t channel,
 187:../Libraries/XMCLib/src/xmc_eru.c ****                                   const XMC_ERU_ETL_EDGE_DETECTION_t edge_detection)
 188:../Libraries/XMCLib/src/xmc_eru.c **** {
 282              	 .loc 1 188 0
 283              	 .cfi_startproc
 284 0000 90B5     	 push {r4,r7,lr}
 285              	.LCFI12:
 286              	 .cfi_def_cfa_offset 12
 287              	 .cfi_offset 4,-12
 288              	 .cfi_offset 7,-8
 289              	 .cfi_offset 14,-4
 290 0002 83B0     	 sub sp,sp,#12
 291              	.LCFI13:
 292              	 .cfi_def_cfa_offset 24
 293 0004 00AF     	 add r7,sp,#0
 294              	.LCFI14:
 295              	 .cfi_def_cfa_register 7
 296 0006 7860     	 str r0,[r7,#4]
 297 0008 081C     	 mov r0,r1
 298 000a 111C     	 mov r1,r2
 299 000c FB1C     	 add r3,r7,#3
 300 000e 021C     	 add r2,r0,#0
 301 0010 1A70     	 strb r2,[r3]
 302 0012 BB1C     	 add r3,r7,#2
 303 0014 0A1C     	 add r2,r1,#0
 304 0016 1A70     	 strb r2,[r3]
 189:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 190:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Channel Number", (channel < 4U));
 191:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Trigger Edge", XMC_ERU_ETL_CHECK_TRIGGER_EDGE(ed
 192:../Libraries/XMCLib/src/xmc_eru.c **** 
 193:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].ED = (uint8_t)edge_detection;
 305              	 .loc 1 193 0
 306 0018 FB1C     	 add r3,r7,#3
 307 001a 1A78     	 ldrb r2,[r3]
 308 001c BB1C     	 add r3,r7,#2
 309 001e 1B78     	 ldrb r3,[r3]
 310 0020 0321     	 mov r1,#3
 311 0022 0B40     	 and r3,r1
 312 0024 D9B2     	 uxtb r1,r3
 313 0026 7B68     	 ldr r3,[r7,#4]
 314 0028 0432     	 add r2,r2,#4
 315 002a 9200     	 lsl r2,r2,#2
 316 002c 0320     	 mov r0,#3
 317 002e 0140     	 and r1,r0
 318 0030 8900     	 lsl r1,r1,#2
 319 0032 D058     	 ldr r0,[r2,r3]
 320 0034 0C24     	 mov r4,#12
 321 0036 A043     	 bic r0,r4
 322 0038 0143     	 orr r1,r0
 323 003a D150     	 str r1,[r2,r3]
 194:../Libraries/XMCLib/src/xmc_eru.c **** }
 324              	 .loc 1 194 0
 325 003c BD46     	 mov sp,r7
 326 003e 03B0     	 add sp,sp,#12
 327              	 
 328 0040 90BD     	 pop {r4,r7,pc}
 329              	 .cfi_endproc
 330              	.LFE49:
 332 0042 C046     	 .section .text.XMC_ERU_ETL_GetEdgeDetection,"ax",%progbits
 333              	 .align 2
 334              	 .global XMC_ERU_ETL_GetEdgeDetection
 335              	 .code 16
 336              	 .thumb_func
 338              	XMC_ERU_ETL_GetEdgeDetection:
 339              	.LFB50:
 195:../Libraries/XMCLib/src/xmc_eru.c **** 
 196:../Libraries/XMCLib/src/xmc_eru.c **** /* Returns the configured event trigger edge/s by reading (RE, FE) bits of EXICONx(x = [0 to 3]) re
 197:../Libraries/XMCLib/src/xmc_eru.c **** XMC_ERU_ETL_EDGE_DETECTION_t XMC_ERU_ETL_GetEdgeDetection(XMC_ERU_t *const eru, const uint8_t chann
 198:../Libraries/XMCLib/src/xmc_eru.c **** {
 340              	 .loc 1 198 0
 341              	 .cfi_startproc
 342 0000 80B5     	 push {r7,lr}
 343              	.LCFI15:
 344              	 .cfi_def_cfa_offset 8
 345              	 .cfi_offset 7,-8
 346              	 .cfi_offset 14,-4
 347 0002 82B0     	 sub sp,sp,#8
 348              	.LCFI16:
 349              	 .cfi_def_cfa_offset 16
 350 0004 00AF     	 add r7,sp,#0
 351              	.LCFI17:
 352              	 .cfi_def_cfa_register 7
 353 0006 7860     	 str r0,[r7,#4]
 354 0008 0A1C     	 mov r2,r1
 355 000a FB1C     	 add r3,r7,#3
 356 000c 1A70     	 strb r2,[r3]
 199:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_GetEdgeDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 200:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_GetEdgeDetection:Invalid Channel Number", (channel < 4U));
 201:../Libraries/XMCLib/src/xmc_eru.c ****   return ((XMC_ERU_ETL_EDGE_DETECTION_t)(eru->EXICON_b[channel].ED));
 357              	 .loc 1 201 0
 358 000e FB1C     	 add r3,r7,#3
 359 0010 1A78     	 ldrb r2,[r3]
 360 0012 7B68     	 ldr r3,[r7,#4]
 361 0014 0432     	 add r2,r2,#4
 362 0016 9200     	 lsl r2,r2,#2
 363 0018 D358     	 ldr r3,[r2,r3]
 364 001a 9B08     	 lsr r3,r3,#2
 365 001c 1A1C     	 add r2,r3,#0
 366 001e 0323     	 mov r3,#3
 367 0020 1340     	 and r3,r2
 368 0022 DBB2     	 uxtb r3,r3
 202:../Libraries/XMCLib/src/xmc_eru.c **** }
 369              	 .loc 1 202 0
 370 0024 181C     	 mov r0,r3
 371 0026 BD46     	 mov sp,r7
 372 0028 02B0     	 add sp,sp,#8
 373              	 
 374 002a 80BD     	 pop {r7,pc}
 375              	 .cfi_endproc
 376              	.LFE50:
 378              	 .section .text.XMC_ERU_ETL_SetStatusFlagMode,"ax",%progbits
 379              	 .align 2
 380              	 .global XMC_ERU_ETL_SetStatusFlagMode
 381              	 .code 16
 382              	 .thumb_func
 384              	XMC_ERU_ETL_SetStatusFlagMode:
 385              	.LFB51:
 203:../Libraries/XMCLib/src/xmc_eru.c **** 
 204:../Libraries/XMCLib/src/xmc_eru.c **** /* Set the status flag bit(FL) in EXICONx(x = [0 to 3]). */
 205:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetStatusFlagMode(XMC_ERU_t *const eru,
 206:../Libraries/XMCLib/src/xmc_eru.c ****                                    const uint8_t channel,
 207:../Libraries/XMCLib/src/xmc_eru.c ****                                    const XMC_ERU_ETL_STATUS_FLAG_MODE_t mode)
 208:../Libraries/XMCLib/src/xmc_eru.c **** {
 386              	 .loc 1 208 0
 387              	 .cfi_startproc
 388 0000 90B5     	 push {r4,r7,lr}
 389              	.LCFI18:
 390              	 .cfi_def_cfa_offset 12
 391              	 .cfi_offset 4,-12
 392              	 .cfi_offset 7,-8
 393              	 .cfi_offset 14,-4
 394 0002 83B0     	 sub sp,sp,#12
 395              	.LCFI19:
 396              	 .cfi_def_cfa_offset 24
 397 0004 00AF     	 add r7,sp,#0
 398              	.LCFI20:
 399              	 .cfi_def_cfa_register 7
 400 0006 7860     	 str r0,[r7,#4]
 401 0008 081C     	 mov r0,r1
 402 000a 111C     	 mov r1,r2
 403 000c FB1C     	 add r3,r7,#3
 404 000e 021C     	 add r2,r0,#0
 405 0010 1A70     	 strb r2,[r3]
 406 0012 BB1C     	 add r3,r7,#2
 407 0014 0A1C     	 add r2,r1,#0
 408 0016 1A70     	 strb r2,[r3]
 209:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru))
 210:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Channel Number", (channel < 4U));
 211:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Status Flag Mode", XMC_ERU_ETL_CHECK_STATUS_FLA
 212:../Libraries/XMCLib/src/xmc_eru.c **** 
 213:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].LD = (uint8_t)mode;
 409              	 .loc 1 213 0
 410 0018 FB1C     	 add r3,r7,#3
 411 001a 1A78     	 ldrb r2,[r3]
 412 001c BB1C     	 add r3,r7,#2
 413 001e 1B78     	 ldrb r3,[r3]
 414 0020 0121     	 mov r1,#1
 415 0022 0B40     	 and r3,r1
 416 0024 D9B2     	 uxtb r1,r3
 417 0026 7B68     	 ldr r3,[r7,#4]
 418 0028 0432     	 add r2,r2,#4
 419 002a 9200     	 lsl r2,r2,#2
 420 002c 0120     	 mov r0,#1
 421 002e 0140     	 and r1,r0
 422 0030 4900     	 lsl r1,r1,#1
 423 0032 D058     	 ldr r0,[r2,r3]
 424 0034 0224     	 mov r4,#2
 425 0036 A043     	 bic r0,r4
 426 0038 0143     	 orr r1,r0
 427 003a D150     	 str r1,[r2,r3]
 214:../Libraries/XMCLib/src/xmc_eru.c **** }
 428              	 .loc 1 214 0
 429 003c BD46     	 mov sp,r7
 430 003e 03B0     	 add sp,sp,#12
 431              	 
 432 0040 90BD     	 pop {r4,r7,pc}
 433              	 .cfi_endproc
 434              	.LFE51:
 436 0042 C046     	 .section .text.XMC_ERU_ETL_EnableOutputTrigger,"ax",%progbits
 437              	 .align 2
 438              	 .global XMC_ERU_ETL_EnableOutputTrigger
 439              	 .code 16
 440              	 .thumb_func
 442              	XMC_ERU_ETL_EnableOutputTrigger:
 443              	.LFB52:
 215:../Libraries/XMCLib/src/xmc_eru.c **** 
 216:../Libraries/XMCLib/src/xmc_eru.c **** /* Configure which Channel of OGUy(Output gating unit y = [0 to 3]) to be mapped by the trigger pul
 217:../Libraries/XMCLib/src/xmc_eru.c ****  * ETLx(Event Trigger Logic, x = [0 to 3]) by setting (OCS and PE) bit fields. */
 218:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_EnableOutputTrigger(XMC_ERU_t *const eru,
 219:../Libraries/XMCLib/src/xmc_eru.c ****                                      const uint8_t channel,
 220:../Libraries/XMCLib/src/xmc_eru.c ****                                      const XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL_t trigger)
 221:../Libraries/XMCLib/src/xmc_eru.c **** {
 444              	 .loc 1 221 0
 445              	 .cfi_startproc
 446 0000 90B5     	 push {r4,r7,lr}
 447              	.LCFI21:
 448              	 .cfi_def_cfa_offset 12
 449              	 .cfi_offset 4,-12
 450              	 .cfi_offset 7,-8
 451              	 .cfi_offset 14,-4
 452 0002 83B0     	 sub sp,sp,#12
 453              	.LCFI22:
 454              	 .cfi_def_cfa_offset 24
 455 0004 00AF     	 add r7,sp,#0
 456              	.LCFI23:
 457              	 .cfi_def_cfa_register 7
 458 0006 7860     	 str r0,[r7,#4]
 459 0008 081C     	 mov r0,r1
 460 000a 111C     	 mov r1,r2
 461 000c FB1C     	 add r3,r7,#3
 462 000e 021C     	 add r2,r0,#0
 463 0010 1A70     	 strb r2,[r3]
 464 0012 BB1C     	 add r3,r7,#2
 465 0014 0A1C     	 add r2,r1,#0
 466 0016 1A70     	 strb r2,[r3]
 222:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru
 223:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Channel Number", (channel < 4U));
 224:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Output Channel", XMC_ERU_ETL_CHECK_TRIGGER_CH
 225:../Libraries/XMCLib/src/xmc_eru.c **** 
 226:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].OCS = (uint8_t)trigger;
 467              	 .loc 1 226 0
 468 0018 FB1C     	 add r3,r7,#3
 469 001a 1A78     	 ldrb r2,[r3]
 470 001c BB1C     	 add r3,r7,#2
 471 001e 1B78     	 ldrb r3,[r3]
 472 0020 0721     	 mov r1,#7
 473 0022 0B40     	 and r3,r1
 474 0024 D9B2     	 uxtb r1,r3
 475 0026 7B68     	 ldr r3,[r7,#4]
 476 0028 0432     	 add r2,r2,#4
 477 002a 9200     	 lsl r2,r2,#2
 478 002c 0720     	 mov r0,#7
 479 002e 0140     	 and r1,r0
 480 0030 0901     	 lsl r1,r1,#4
 481 0032 D058     	 ldr r0,[r2,r3]
 482 0034 7024     	 mov r4,#112
 483 0036 A043     	 bic r0,r4
 484 0038 0143     	 orr r1,r0
 485 003a D150     	 str r1,[r2,r3]
 227:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].PE = (uint8_t)true;
 486              	 .loc 1 227 0
 487 003c FB1C     	 add r3,r7,#3
 488 003e 1A78     	 ldrb r2,[r3]
 489 0040 7B68     	 ldr r3,[r7,#4]
 490 0042 0432     	 add r2,r2,#4
 491 0044 9200     	 lsl r2,r2,#2
 492 0046 D158     	 ldr r1,[r2,r3]
 493 0048 0120     	 mov r0,#1
 494 004a 0143     	 orr r1,r0
 495 004c D150     	 str r1,[r2,r3]
 228:../Libraries/XMCLib/src/xmc_eru.c **** }
 496              	 .loc 1 228 0
 497 004e BD46     	 mov sp,r7
 498 0050 03B0     	 add sp,sp,#12
 499              	 
 500 0052 90BD     	 pop {r4,r7,pc}
 501              	 .cfi_endproc
 502              	.LFE52:
 504              	 .section .text.XMC_ERU_ETL_DisableOutputTrigger,"ax",%progbits
 505              	 .align 2
 506              	 .global XMC_ERU_ETL_DisableOutputTrigger
 507              	 .code 16
 508              	 .thumb_func
 510              	XMC_ERU_ETL_DisableOutputTrigger:
 511              	.LFB53:
 229:../Libraries/XMCLib/src/xmc_eru.c **** 
 230:../Libraries/XMCLib/src/xmc_eru.c **** /* Disables the trigger pulse generation by clearing the (PE) of the EXICONx(x = [0 to 3]). */
 231:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_DisableOutputTrigger(XMC_ERU_t *const eru, const uint8_t channel)
 232:../Libraries/XMCLib/src/xmc_eru.c **** {
 512              	 .loc 1 232 0
 513              	 .cfi_startproc
 514 0000 80B5     	 push {r7,lr}
 515              	.LCFI24:
 516              	 .cfi_def_cfa_offset 8
 517              	 .cfi_offset 7,-8
 518              	 .cfi_offset 14,-4
 519 0002 82B0     	 sub sp,sp,#8
 520              	.LCFI25:
 521              	 .cfi_def_cfa_offset 16
 522 0004 00AF     	 add r7,sp,#0
 523              	.LCFI26:
 524              	 .cfi_def_cfa_register 7
 525 0006 7860     	 str r0,[r7,#4]
 526 0008 0A1C     	 mov r2,r1
 527 000a FB1C     	 add r3,r7,#3
 528 000c 1A70     	 strb r2,[r3]
 233:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_DisableOutputTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(er
 234:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_DisableOutputTrigger:Invalid Channel Number", (channel < 4U));
 235:../Libraries/XMCLib/src/xmc_eru.c **** 
 236:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].PE = false;
 529              	 .loc 1 236 0
 530 000e FB1C     	 add r3,r7,#3
 531 0010 1A78     	 ldrb r2,[r3]
 532 0012 7B68     	 ldr r3,[r7,#4]
 533 0014 0432     	 add r2,r2,#4
 534 0016 9200     	 lsl r2,r2,#2
 535 0018 D158     	 ldr r1,[r2,r3]
 536 001a 0120     	 mov r0,#1
 537 001c 8143     	 bic r1,r0
 538 001e D150     	 str r1,[r2,r3]
 237:../Libraries/XMCLib/src/xmc_eru.c **** }
 539              	 .loc 1 237 0
 540 0020 BD46     	 mov sp,r7
 541 0022 02B0     	 add sp,sp,#8
 542              	 
 543 0024 80BD     	 pop {r7,pc}
 544              	 .cfi_endproc
 545              	.LFE53:
 547 0026 C046     	 .section .text.XMC_ERU_OGU_EnablePatternDetection,"ax",%progbits
 548              	 .align 2
 549              	 .global XMC_ERU_OGU_EnablePatternDetection
 550              	 .code 16
 551              	 .thumb_func
 553              	XMC_ERU_OGU_EnablePatternDetection:
 554              	.LFB54:
 238:../Libraries/XMCLib/src/xmc_eru.c **** 
 239:../Libraries/XMCLib/src/xmc_eru.c **** /* Configures ERU_ETLx(x = [0 to 3]) for pattern match detection by setting IPENx(x = [0 to 3) and 
 240:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_EnablePatternDetection(XMC_ERU_t *const eru,
 241:../Libraries/XMCLib/src/xmc_eru.c ****                                         const uint8_t channel,
 242:../Libraries/XMCLib/src/xmc_eru.c ****                                         const XMC_ERU_OGU_PATTERN_DETECTION_INPUT_t input)
 243:../Libraries/XMCLib/src/xmc_eru.c **** {
 555              	 .loc 1 243 0
 556              	 .cfi_startproc
 557 0000 90B5     	 push {r4,r7,lr}
 558              	.LCFI27:
 559              	 .cfi_def_cfa_offset 12
 560              	 .cfi_offset 4,-12
 561              	 .cfi_offset 7,-8
 562              	 .cfi_offset 14,-4
 563 0002 83B0     	 sub sp,sp,#12
 564              	.LCFI28:
 565              	 .cfi_def_cfa_offset 24
 566 0004 00AF     	 add r7,sp,#0
 567              	.LCFI29:
 568              	 .cfi_def_cfa_register 7
 569 0006 7860     	 str r0,[r7,#4]
 570 0008 081C     	 mov r0,r1
 571 000a 111C     	 mov r1,r2
 572 000c FB1C     	 add r3,r7,#3
 573 000e 021C     	 add r2,r0,#0
 574 0010 1A70     	 strb r2,[r3]
 575 0012 BB1C     	 add r3,r7,#2
 576 0014 0A1C     	 add r2,r1,#0
 577 0016 1A70     	 strb r2,[r3]
 244:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(
 245:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Channel Number", (channel < 4U));
 246:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Pattern input", XMC_ERU_OGU_CHECK_PATTERN_
 247:../Libraries/XMCLib/src/xmc_eru.c **** 
 248:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].IPEN = (uint8_t)input;
 578              	 .loc 1 248 0
 579 0018 FB1C     	 add r3,r7,#3
 580 001a 1A78     	 ldrb r2,[r3]
 581 001c BB1C     	 add r3,r7,#2
 582 001e 1B78     	 ldrb r3,[r3]
 583 0020 0F21     	 mov r1,#15
 584 0022 0B40     	 and r3,r1
 585 0024 D9B2     	 uxtb r1,r3
 586 0026 7B68     	 ldr r3,[r7,#4]
 587 0028 0832     	 add r2,r2,#8
 588 002a 9200     	 lsl r2,r2,#2
 589 002c 0F20     	 mov r0,#15
 590 002e 0140     	 and r1,r0
 591 0030 0903     	 lsl r1,r1,#12
 592 0032 D058     	 ldr r0,[r2,r3]
 593 0034 074C     	 ldr r4,.L14
 594 0036 2040     	 and r0,r4
 595 0038 0143     	 orr r1,r0
 596 003a D150     	 str r1,[r2,r3]
 249:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].GEEN = true;
 597              	 .loc 1 249 0
 598 003c FB1C     	 add r3,r7,#3
 599 003e 1A78     	 ldrb r2,[r3]
 600 0040 7B68     	 ldr r3,[r7,#4]
 601 0042 0832     	 add r2,r2,#8
 602 0044 9200     	 lsl r2,r2,#2
 603 0046 D158     	 ldr r1,[r2,r3]
 604 0048 0420     	 mov r0,#4
 605 004a 0143     	 orr r1,r0
 606 004c D150     	 str r1,[r2,r3]
 250:../Libraries/XMCLib/src/xmc_eru.c **** }
 607              	 .loc 1 250 0
 608 004e BD46     	 mov sp,r7
 609 0050 03B0     	 add sp,sp,#12
 610              	 
 611 0052 90BD     	 pop {r4,r7,pc}
 612              	.L15:
 613              	 .align 2
 614              	.L14:
 615 0054 FF0FFFFF 	 .word -61441
 616              	 .cfi_endproc
 617              	.LFE54:
 619              	 .section .text.XMC_ERU_OGU_DisablePatternDetection,"ax",%progbits
 620              	 .align 2
 621              	 .global XMC_ERU_OGU_DisablePatternDetection
 622              	 .code 16
 623              	 .thumb_func
 625              	XMC_ERU_OGU_DisablePatternDetection:
 626              	.LFB55:
 251:../Libraries/XMCLib/src/xmc_eru.c **** 
 252:../Libraries/XMCLib/src/xmc_eru.c **** /* Disable the pattern detection by clearing (GEEN) bit. */
 253:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_DisablePatternDetection(XMC_ERU_t *const eru, const uint8_t channel)
 254:../Libraries/XMCLib/src/xmc_eru.c **** {
 627              	 .loc 1 254 0
 628              	 .cfi_startproc
 629 0000 80B5     	 push {r7,lr}
 630              	.LCFI30:
 631              	 .cfi_def_cfa_offset 8
 632              	 .cfi_offset 7,-8
 633              	 .cfi_offset 14,-4
 634 0002 82B0     	 sub sp,sp,#8
 635              	.LCFI31:
 636              	 .cfi_def_cfa_offset 16
 637 0004 00AF     	 add r7,sp,#0
 638              	.LCFI32:
 639              	 .cfi_def_cfa_register 7
 640 0006 7860     	 str r0,[r7,#4]
 641 0008 0A1C     	 mov r2,r1
 642 000a FB1C     	 add r3,r7,#3
 643 000c 1A70     	 strb r2,[r3]
 255:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePatternDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR
 256:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePatternDetection:Invalid Channel Number", (channel < 4U));
 257:../Libraries/XMCLib/src/xmc_eru.c **** 
 258:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].GEEN = false;
 644              	 .loc 1 258 0
 645 000e FB1C     	 add r3,r7,#3
 646 0010 1A78     	 ldrb r2,[r3]
 647 0012 7B68     	 ldr r3,[r7,#4]
 648 0014 0832     	 add r2,r2,#8
 649 0016 9200     	 lsl r2,r2,#2
 650 0018 D158     	 ldr r1,[r2,r3]
 651 001a 0420     	 mov r0,#4
 652 001c 8143     	 bic r1,r0
 653 001e D150     	 str r1,[r2,r3]
 259:../Libraries/XMCLib/src/xmc_eru.c **** }
 654              	 .loc 1 259 0
 655 0020 BD46     	 mov sp,r7
 656 0022 02B0     	 add sp,sp,#8
 657              	 
 658 0024 80BD     	 pop {r7,pc}
 659              	 .cfi_endproc
 660              	.LFE55:
 662 0026 C046     	 .section .text.XMC_ERU_OGU_EnablePeripheralTrigger,"ax",%progbits
 663              	 .align 2
 664              	 .global XMC_ERU_OGU_EnablePeripheralTrigger
 665              	 .code 16
 666              	 .thumb_func
 668              	XMC_ERU_OGU_EnablePeripheralTrigger:
 669              	.LFB56:
 260:../Libraries/XMCLib/src/xmc_eru.c **** 
 261:../Libraries/XMCLib/src/xmc_eru.c **** /* Configures peripheral trigger input, by setting (ISS) bit. */
 262:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_EnablePeripheralTrigger(XMC_ERU_t *const eru,
 263:../Libraries/XMCLib/src/xmc_eru.c ****                                          const uint8_t channel,
 264:../Libraries/XMCLib/src/xmc_eru.c ****                                          const XMC_ERU_OGU_PERIPHERAL_TRIGGER_t peripheral_trigger)
 265:../Libraries/XMCLib/src/xmc_eru.c **** {
 670              	 .loc 1 265 0
 671              	 .cfi_startproc
 672 0000 90B5     	 push {r4,r7,lr}
 673              	.LCFI33:
 674              	 .cfi_def_cfa_offset 12
 675              	 .cfi_offset 4,-12
 676              	 .cfi_offset 7,-8
 677              	 .cfi_offset 14,-4
 678 0002 83B0     	 sub sp,sp,#12
 679              	.LCFI34:
 680              	 .cfi_def_cfa_offset 24
 681 0004 00AF     	 add r7,sp,#0
 682              	.LCFI35:
 683              	 .cfi_def_cfa_register 7
 684 0006 7860     	 str r0,[r7,#4]
 685 0008 081C     	 mov r0,r1
 686 000a 111C     	 mov r1,r2
 687 000c FB1C     	 add r3,r7,#3
 688 000e 021C     	 add r2,r0,#0
 689 0010 1A70     	 strb r2,[r3]
 690 0012 BB1C     	 add r3,r7,#2
 691 0014 0A1C     	 add r2,r1,#0
 692 0016 1A70     	 strb r2,[r3]
 266:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR
 267:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Channel Number", (channel < 4U));
 268:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Peripheral Trigger Input", 
 269:../Libraries/XMCLib/src/xmc_eru.c ****               XMC_ERU_OGU_CHECK_PERIPHERAL_TRIGGER(peripheral_trigger));
 270:../Libraries/XMCLib/src/xmc_eru.c **** 
 271:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].ISS = (uint8_t)peripheral_trigger;
 693              	 .loc 1 271 0
 694 0018 FB1C     	 add r3,r7,#3
 695 001a 1A78     	 ldrb r2,[r3]
 696 001c BB1C     	 add r3,r7,#2
 697 001e 1B78     	 ldrb r3,[r3]
 698 0020 0321     	 mov r1,#3
 699 0022 0B40     	 and r3,r1
 700 0024 D9B2     	 uxtb r1,r3
 701 0026 7B68     	 ldr r3,[r7,#4]
 702 0028 0832     	 add r2,r2,#8
 703 002a 9200     	 lsl r2,r2,#2
 704 002c 0320     	 mov r0,#3
 705 002e 0140     	 and r1,r0
 706 0030 D058     	 ldr r0,[r2,r3]
 707 0032 0324     	 mov r4,#3
 708 0034 A043     	 bic r0,r4
 709 0036 0143     	 orr r1,r0
 710 0038 D150     	 str r1,[r2,r3]
 272:../Libraries/XMCLib/src/xmc_eru.c **** }
 711              	 .loc 1 272 0
 712 003a BD46     	 mov sp,r7
 713 003c 03B0     	 add sp,sp,#12
 714              	 
 715 003e 90BD     	 pop {r4,r7,pc}
 716              	 .cfi_endproc
 717              	.LFE56:
 719              	 .section .text.XMC_ERU_OGU_DisablePeripheralTrigger,"ax",%progbits
 720              	 .align 2
 721              	 .global XMC_ERU_OGU_DisablePeripheralTrigger
 722              	 .code 16
 723              	 .thumb_func
 725              	XMC_ERU_OGU_DisablePeripheralTrigger:
 726              	.LFB57:
 273:../Libraries/XMCLib/src/xmc_eru.c **** 
 274:../Libraries/XMCLib/src/xmc_eru.c **** /* Disables event generation based on peripheral trigger by clearing (ISS) bit. */
 275:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_DisablePeripheralTrigger(XMC_ERU_t *const eru,
 276:../Libraries/XMCLib/src/xmc_eru.c ****                                           const uint8_t channel)
 277:../Libraries/XMCLib/src/xmc_eru.c **** {
 727              	 .loc 1 277 0
 728              	 .cfi_startproc
 729 0000 80B5     	 push {r7,lr}
 730              	.LCFI36:
 731              	 .cfi_def_cfa_offset 8
 732              	 .cfi_offset 7,-8
 733              	 .cfi_offset 14,-4
 734 0002 82B0     	 sub sp,sp,#8
 735              	.LCFI37:
 736              	 .cfi_def_cfa_offset 16
 737 0004 00AF     	 add r7,sp,#0
 738              	.LCFI38:
 739              	 .cfi_def_cfa_register 7
 740 0006 7860     	 str r0,[r7,#4]
 741 0008 0A1C     	 mov r2,r1
 742 000a FB1C     	 add r3,r7,#3
 743 000c 1A70     	 strb r2,[r3]
 278:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePeripheralTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PT
 279:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePeripheralTrigger:Invalid Channel Number", (channel < 4U));
 280:../Libraries/XMCLib/src/xmc_eru.c **** 
 281:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].ISS = (uint8_t)0;
 744              	 .loc 1 281 0
 745 000e FB1C     	 add r3,r7,#3
 746 0010 1A78     	 ldrb r2,[r3]
 747 0012 7B68     	 ldr r3,[r7,#4]
 748 0014 0832     	 add r2,r2,#8
 749 0016 9200     	 lsl r2,r2,#2
 750 0018 D158     	 ldr r1,[r2,r3]
 751 001a 0320     	 mov r0,#3
 752 001c 8143     	 bic r1,r0
 753 001e D150     	 str r1,[r2,r3]
 282:../Libraries/XMCLib/src/xmc_eru.c **** }
 754              	 .loc 1 282 0
 755 0020 BD46     	 mov sp,r7
 756 0022 02B0     	 add sp,sp,#8
 757              	 
 758 0024 80BD     	 pop {r7,pc}
 759              	 .cfi_endproc
 760              	.LFE57:
 762 0026 C046     	 .section .text.XMC_ERU_OGU_SetServiceRequestMode,"ax",%progbits
 763              	 .align 2
 764              	 .global XMC_ERU_OGU_SetServiceRequestMode
 765              	 .code 16
 766              	 .thumb_func
 768              	XMC_ERU_OGU_SetServiceRequestMode:
 769              	.LFB58:
 283:../Libraries/XMCLib/src/xmc_eru.c **** 
 284:../Libraries/XMCLib/src/xmc_eru.c **** /* Configures the gating scheme for service request generation by setting (GP) bit. */
 285:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_SetServiceRequestMode(XMC_ERU_t *const eru,
 286:../Libraries/XMCLib/src/xmc_eru.c ****                                        const uint8_t channel,
 287:../Libraries/XMCLib/src/xmc_eru.c ****                                        const XMC_ERU_OGU_SERVICE_REQUEST_t mode)
 288:../Libraries/XMCLib/src/xmc_eru.c **** {
 770              	 .loc 1 288 0
 771              	 .cfi_startproc
 772 0000 90B5     	 push {r4,r7,lr}
 773              	.LCFI39:
 774              	 .cfi_def_cfa_offset 12
 775              	 .cfi_offset 4,-12
 776              	 .cfi_offset 7,-8
 777              	 .cfi_offset 14,-4
 778 0002 83B0     	 sub sp,sp,#12
 779              	.LCFI40:
 780              	 .cfi_def_cfa_offset 24
 781 0004 00AF     	 add r7,sp,#0
 782              	.LCFI41:
 783              	 .cfi_def_cfa_register 7
 784 0006 7860     	 str r0,[r7,#4]
 785 0008 081C     	 mov r0,r1
 786 000a 111C     	 mov r1,r2
 787 000c FB1C     	 add r3,r7,#3
 788 000e 021C     	 add r2,r0,#0
 789 0010 1A70     	 strb r2,[r3]
 790 0012 BB1C     	 add r3,r7,#2
 791 0014 0A1C     	 add r2,r1,#0
 792 0016 1A70     	 strb r2,[r3]
 289:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(e
 290:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Channel Number", (channel < 4U));
 291:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Service Request Mode", XMC_ERU_OGU_CHECK_SE
 292:../Libraries/XMCLib/src/xmc_eru.c **** 
 293:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].GP = (uint8_t)mode;
 793              	 .loc 1 293 0
 794 0018 FB1C     	 add r3,r7,#3
 795 001a 1A78     	 ldrb r2,[r3]
 796 001c BB1C     	 add r3,r7,#2
 797 001e 1B78     	 ldrb r3,[r3]
 798 0020 0321     	 mov r1,#3
 799 0022 0B40     	 and r3,r1
 800 0024 D9B2     	 uxtb r1,r3
 801 0026 7B68     	 ldr r3,[r7,#4]
 802 0028 0832     	 add r2,r2,#8
 803 002a 9200     	 lsl r2,r2,#2
 804 002c 0320     	 mov r0,#3
 805 002e 0140     	 and r1,r0
 806 0030 0901     	 lsl r1,r1,#4
 807 0032 D058     	 ldr r0,[r2,r3]
 808 0034 3024     	 mov r4,#48
 809 0036 A043     	 bic r0,r4
 810 0038 0143     	 orr r1,r0
 811 003a D150     	 str r1,[r2,r3]
 294:../Libraries/XMCLib/src/xmc_eru.c **** 
 295:../Libraries/XMCLib/src/xmc_eru.c **** }
 812              	 .loc 1 295 0
 813 003c BD46     	 mov sp,r7
 814 003e 03B0     	 add sp,sp,#12
 815              	 
 816 0040 90BD     	 pop {r4,r7,pc}
 817              	 .cfi_endproc
 818              	.LFE58:
 820 0042 C046     	 .text
 821              	.Letext0:
 822              	 .file 2 "c:\\users\\follower\\downloads\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 823              	 .file 3 "c:\\users\\follower\\downloads\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 824              	 .file 4 "C:/Workspaces/DAVE-4.4.2-64Bit/JuFo/Libraries/XMCLib/inc/xmc_eru.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_eru.c
    {standard input}:18     .text.XMC_ERU_ETL_Init:00000000 $t
    {standard input}:23     .text.XMC_ERU_ETL_Init:00000000 XMC_ERU_ETL_Init
    {standard input}:95     .text.XMC_ERU_OGU_Init:00000000 $t
    {standard input}:100    .text.XMC_ERU_OGU_Init:00000000 XMC_ERU_OGU_Init
    {standard input}:144    .text.XMC_ERU_ETL_SetInput:00000000 $t
    {standard input}:149    .text.XMC_ERU_ETL_SetInput:00000000 XMC_ERU_ETL_SetInput
    {standard input}:213    .text.XMC_ERU_ETL_SetSource:00000000 $t
    {standard input}:218    .text.XMC_ERU_ETL_SetSource:00000000 XMC_ERU_ETL_SetSource
    {standard input}:270    .text.XMC_ERU_ETL_SetSource:00000044 $d
    {standard input}:275    .text.XMC_ERU_ETL_SetEdgeDetection:00000000 $t
    {standard input}:280    .text.XMC_ERU_ETL_SetEdgeDetection:00000000 XMC_ERU_ETL_SetEdgeDetection
    {standard input}:333    .text.XMC_ERU_ETL_GetEdgeDetection:00000000 $t
    {standard input}:338    .text.XMC_ERU_ETL_GetEdgeDetection:00000000 XMC_ERU_ETL_GetEdgeDetection
    {standard input}:379    .text.XMC_ERU_ETL_SetStatusFlagMode:00000000 $t
    {standard input}:384    .text.XMC_ERU_ETL_SetStatusFlagMode:00000000 XMC_ERU_ETL_SetStatusFlagMode
    {standard input}:437    .text.XMC_ERU_ETL_EnableOutputTrigger:00000000 $t
    {standard input}:442    .text.XMC_ERU_ETL_EnableOutputTrigger:00000000 XMC_ERU_ETL_EnableOutputTrigger
    {standard input}:505    .text.XMC_ERU_ETL_DisableOutputTrigger:00000000 $t
    {standard input}:510    .text.XMC_ERU_ETL_DisableOutputTrigger:00000000 XMC_ERU_ETL_DisableOutputTrigger
    {standard input}:548    .text.XMC_ERU_OGU_EnablePatternDetection:00000000 $t
    {standard input}:553    .text.XMC_ERU_OGU_EnablePatternDetection:00000000 XMC_ERU_OGU_EnablePatternDetection
    {standard input}:615    .text.XMC_ERU_OGU_EnablePatternDetection:00000054 $d
    {standard input}:620    .text.XMC_ERU_OGU_DisablePatternDetection:00000000 $t
    {standard input}:625    .text.XMC_ERU_OGU_DisablePatternDetection:00000000 XMC_ERU_OGU_DisablePatternDetection
    {standard input}:663    .text.XMC_ERU_OGU_EnablePeripheralTrigger:00000000 $t
    {standard input}:668    .text.XMC_ERU_OGU_EnablePeripheralTrigger:00000000 XMC_ERU_OGU_EnablePeripheralTrigger
    {standard input}:720    .text.XMC_ERU_OGU_DisablePeripheralTrigger:00000000 $t
    {standard input}:725    .text.XMC_ERU_OGU_DisablePeripheralTrigger:00000000 XMC_ERU_OGU_DisablePeripheralTrigger
    {standard input}:763    .text.XMC_ERU_OGU_SetServiceRequestMode:00000000 $t
    {standard input}:768    .text.XMC_ERU_OGU_SetServiceRequestMode:00000000 XMC_ERU_OGU_SetServiceRequestMode
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_ERU_Enable
