   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "main.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.__NVIC_SystemReset,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	__NVIC_SystemReset:
  23              	.LFB33:
  24              	 .file 1 "C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include/core_cm0.h"
   1:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**************************************************************************//**
   2:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  * @file     core_cm0.h
   3:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  * @version  V5.0.2
   5:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  * @date     19. April 2017
   6:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
   7:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /*
   8:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  *
  10:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  *
  12:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  * not use this file except in compliance with the License.
  14:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  * You may obtain a copy of the License at
  15:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  *
  16:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  *
  18:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  * See the License for the specific language governing permissions and
  22:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  * limitations under the License.
  23:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
  24:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
  25:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #if   defined ( __ICCARM__ )
  26:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #elif defined (__clang__)
  28:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #endif
  30:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
  31:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
  34:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #include <stdint.h>
  35:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
  36:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
  37:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  extern "C" {
  38:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #endif
  39:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
  40:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
  41:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
  44:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
  47:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****      Unions are used for effective representation of core registers.
  49:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
  50:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
  53:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
  54:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
  55:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /*******************************************************************************
  56:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  *                 CMSIS definitions
  57:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
  58:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
  59:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup Cortex_M0
  60:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   @{
  61:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
  62:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
  63:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #include "cmsis_version.h"
  64:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  
  65:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /*  CMSIS CM0 definitions */
  66:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
  71:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
  73:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     This core does not support an FPU at all
  75:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** */
  76:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define __FPU_USED       0U
  77:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
  78:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #if defined ( __CC_ARM )
  79:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  82:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
  83:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  87:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
  88:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __GNUC__ )
  89:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  92:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
  93:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __ICCARM__ )
  94:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __ARMVFP__
  95:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  97:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
  98:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 102:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 103:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __TASKING__ )
 104:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __FPU_VFP__
 105:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 107:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 108:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __CSMC__ )
 109:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 112:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 113:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #endif
 114:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 115:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 117:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 118:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
 119:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** }
 120:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #endif
 121:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 122:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 124:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 126:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 129:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
 130:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  extern "C" {
 131:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #endif
 132:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 133:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /* check device defines and use defaults */
 134:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef __CM0_REV
 136:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     #define __CM0_REV               0x0000U
 137:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 139:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 140:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 144:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 145:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 149:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #endif
 150:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 151:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 153:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 155:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     \li to specify the access to peripheral variables.
 157:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** */
 159:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
 160:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #else
 162:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #endif
 164:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 167:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /* following defines should be used for structure members */
 168:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 172:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group Cortex_M0 */
 173:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 174:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 175:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 176:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /*******************************************************************************
 177:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  *                 Register Abstraction
 178:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   Core Register contain:
 179:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   - Core Register
 180:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   - Core NVIC Register
 181:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   - Core SCB Register
 182:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   - Core SysTick Register
 183:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
 184:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 185:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** */
 188:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 189:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 190:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 191:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Core Register type definitions.
 193:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   @{
 194:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
 195:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 196:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 197:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
 199:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 200:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** {
 201:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   struct
 202:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   {
 203:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** } APSR_Type;
 211:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 212:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /* APSR Register Definitions */
 213:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 216:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 219:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 222:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 225:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 226:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 227:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
 229:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 230:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** {
 231:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   struct
 232:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   {
 233:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** } IPSR_Type;
 238:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 239:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /* IPSR Register Definitions */
 240:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 243:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 244:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 245:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
 247:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 248:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** {
 249:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   struct
 250:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   {
 251:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** } xPSR_Type;
 262:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 263:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /* xPSR Register Definitions */
 264:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 267:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 270:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 273:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 276:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 279:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 282:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 283:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 284:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
 286:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 287:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** {
 288:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   struct
 289:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   {
 290:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** } CONTROL_Type;
 296:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 297:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /* CONTROL Register Definitions */
 298:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 301:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 303:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 304:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 305:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 306:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   @{
 309:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
 310:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 311:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 312:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
 314:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** typedef struct
 315:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** {
 316:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED0[31U];
 318:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RSERVED1[31U];
 320:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED2[31U];
 322:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED3[31U];
 324:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED4[64U];
 325:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** }  NVIC_Type;
 327:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 328:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 330:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 331:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 332:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_core_register
 333:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   @{
 336:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
 337:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 338:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 339:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
 341:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** typedef struct
 342:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** {
 343:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED0;
 346:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED1;
 350:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** } SCB_Type;
 353:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 354:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /* SCB CPUID Register Definitions */
 355:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 358:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 361:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 364:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 367:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 370:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 374:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 377:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 380:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 383:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 386:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 389:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 392:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 395:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 398:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 402:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 405:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 408:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 411:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 414:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /* SCB System Control Register Definitions */
 415:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 418:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 421:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 424:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 428:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 431:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 435:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 437:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 438:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 439:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_core_register
 440:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   @{
 443:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
 444:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 445:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 446:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
 448:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** typedef struct
 449:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** {
 450:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** } SysTick_Type;
 455:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 456:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 460:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 463:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 466:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 469:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Reload Register Definitions */
 470:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 473:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Current Register Definitions */
 474:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 477:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 481:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 484:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 487:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 489:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 490:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 491:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_core_register
 492:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   @{
 496:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
 497:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 499:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 500:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 501:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 502:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   @{
 505:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
 506:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 507:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 508:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \return           Masked and shifted value.
 512:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** */
 513:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 515:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 516:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \return           Masked and shifted bit field value.
 520:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** */
 521:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 523:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 525:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 526:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 527:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 528:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   @{
 531:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
 532:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 533:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /* Memory mapping of Core Hardware */
 534:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 539:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 543:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 544:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /*@} */
 545:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 546:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 547:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 548:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /*******************************************************************************
 549:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  *                Hardware Abstraction Layer
 550:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   Core Function Interface contains:
 551:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   - Core NVIC Functions
 552:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   - Core SysTick Functions
 553:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   - Core Register Access Functions
 554:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
 555:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 556:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** */
 558:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 559:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 560:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 561:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 563:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   @{
 567:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
 568:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 569:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 573:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #else
 575:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /*#define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping   not available for Cortex-M0 */
 576:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /*#define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping   not available for Cortex-M0 */
 577:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 589:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 593:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #else
 595:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 599:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 601:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 602:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 603:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 604:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 605:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 606:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 607:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 608:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 609:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 610:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Enable Interrupt
 611:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 612:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 613:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 614:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
 615:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 616:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** {
 617:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 618:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   {
 619:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 620:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   }
 621:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** }
 622:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 623:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 624:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 625:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Get Interrupt Enable status
 626:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 627:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 628:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \return             0  Interrupt is not enabled.
 629:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \return             1  Interrupt is enabled.
 630:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 631:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
 632:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 633:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** {
 634:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 635:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   {
 636:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1
 637:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   }
 638:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   else
 639:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   {
 640:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     return(0U);
 641:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   }
 642:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** }
 643:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 644:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 645:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 646:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Disable Interrupt
 647:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 648:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 649:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 650:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
 651:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 652:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** {
 653:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 654:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   {
 655:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 656:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     __DSB();
 657:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     __ISB();
 658:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   }
 659:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** }
 660:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 661:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 662:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 663:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Get Pending Interrupt
 664:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 665:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 666:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \return             0  Interrupt status is not pending.
 667:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \return             1  Interrupt status is pending.
 668:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 669:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
 670:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 671:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** {
 672:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 673:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   {
 674:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1
 675:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   }
 676:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   else
 677:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   {
 678:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     return(0U);
 679:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   }
 680:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** }
 681:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 682:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 683:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 684:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Set Pending Interrupt
 685:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 686:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 687:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 688:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
 689:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 690:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** {
 691:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 692:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   {
 693:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 694:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   }
 695:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** }
 696:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 697:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 698:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 699:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Clear Pending Interrupt
 700:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 701:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 702:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 703:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
 704:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 705:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** {
 706:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 707:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   {
 708:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 709:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   }
 710:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** }
 711:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 712:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 713:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 714:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Set Interrupt Priority
 715:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 716:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 717:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****            or negative to specify a processor exception.
 718:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 719:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]  priority  Priority to set.
 720:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 721:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
 722:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 723:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** {
 724:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 725:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   {
 726:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 727:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 728:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   }
 729:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   else
 730:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   {
 731:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 732:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 733:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   }
 734:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** }
 735:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 736:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 737:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 738:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Get Interrupt Priority
 739:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
 740:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 741:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****            or negative to specify a processor exception.
 742:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]   IRQn  Interrupt number.
 743:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \return             Interrupt Priority.
 744:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 745:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
 746:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
 747:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** {
 748:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 749:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 750:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   {
 751:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 752:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   }
 753:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   else
 754:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   {
 755:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 756:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   }
 757:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** }
 758:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 759:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 760:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 761:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Set Interrupt Vector
 762:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \details Sets an interrupt vector in SRAM based interrupt vector table.
 763:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 764:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****            or negative to specify a processor exception.
 765:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****            Address 0 must be mapped to SRAM.
 766:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]   IRQn      Interrupt number
 767:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]   vector    Address of interrupt handler function
 768:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
 769:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
 770:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** {
 771:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t *vectors = (uint32_t *)0x0U;
 772:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
 773:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** }
 774:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 775:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 776:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 777:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Get Interrupt Vector
 778:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \details Reads an interrupt vector from interrupt vector table.
 779:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 780:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****            or negative to specify a processor exception.
 781:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]   IRQn      Interrupt number.
 782:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \return                 Address of interrupt handler function
 783:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
 784:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
 785:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** {
 786:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t *vectors = (uint32_t *)0x0U;
 787:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
 788:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** }
 789:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 790:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 791:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** /**
 792:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \brief   System Reset
 793:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   \details Initiates a system reset request to reset the MCU.
 794:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****  */
 795:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_SystemReset(void)
 796:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** {
  25              	 .loc 1 796 0
  26              	 .cfi_startproc
  27 0000 80B5     	 push {r7,lr}
  28              	.LCFI0:
  29              	 .cfi_def_cfa_offset 8
  30              	 .cfi_offset 7,-8
  31              	 .cfi_offset 14,-4
  32 0002 00AF     	 add r7,sp,#0
  33              	.LCFI1:
  34              	 .cfi_def_cfa_register 7
  35              	.LBB6:
  36              	.LBB7:
  37              	 .file 2 "C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include/cmsis_gcc.h"
   1:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**************************************************************************//**
   2:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @version  V5.0.2
   5:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @date     13. February 2017
   6:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  ******************************************************************************/
   7:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /*
   8:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  10:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  12:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  16:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  18:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * limitations under the License.
  23:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
  24:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  25:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  28:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ignore some GCC warnings */
  29:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic push
  30:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  34:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __has_builtin
  36:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  38:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  39:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __ASM
  41:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __ASM                                  __asm
  42:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  43:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __INLINE
  44:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __INLINE                               inline
  45:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  46:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  49:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif                                           
  52:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  55:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __USED
  56:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  58:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __WEAK
  59:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  61:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __PACKED
  62:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  64:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  67:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  70:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  78:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  86:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  94:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 102:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 110:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __ALIGNED
 111:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 113:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __RESTRICT
 114:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 116:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 117:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 118:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   @{
 122:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 123:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 124:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 125:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 129:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 131:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 133:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 134:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 135:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 136:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 140:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 142:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 144:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 145:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 146:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 147:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Control Register
 148:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Control Register value
 150:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 151:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 153:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 154:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 155:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 157:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 158:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 159:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 160:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 162:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               non-secure Control Register value
 165:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 166:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 168:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 169:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 170:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 172:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 173:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 174:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 175:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 176:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 177:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Control Register
 178:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 181:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 183:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 185:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 186:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 187:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 189:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 193:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 195:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 197:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 198:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 199:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 200:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 201:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get IPSR Register
 202:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               IPSR Register value
 204:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 205:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 207:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 208:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 209:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 211:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 212:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 213:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 214:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 215:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get APSR Register
 216:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               APSR Register value
 218:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 219:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 221:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 222:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 223:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 225:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 226:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 227:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 228:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 229:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get xPSR Register
 230:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               xPSR Register value
 232:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 233:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 235:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 236:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 237:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 239:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 240:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 241:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 242:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 243:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSP Register value
 246:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 247:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 249:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 250:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 251:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 253:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 254:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 255:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 256:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 258:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSP Register value
 261:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 262:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 264:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 265:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 266:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 268:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 269:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 270:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 271:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 272:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 273:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 277:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 279:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 281:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 282:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 283:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 285:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 289:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 291:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 293:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 294:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 295:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 296:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 297:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSP Register value
 300:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 301:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 303:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 304:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 305:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 307:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 308:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 309:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 310:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 312:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSP Register value
 315:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 316:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 318:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 319:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 320:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 322:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 323:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 324:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 325:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 326:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 327:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 331:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 333:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 335:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 336:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 337:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 339:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 343:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 345:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 347:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 348:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 349:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 350:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 352:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               SP Register value
 355:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 356:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 358:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 359:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 360:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 362:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 363:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 364:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 365:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 366:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 370:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 372:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 374:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 375:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 376:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 377:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 378:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Priority Mask
 379:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Priority Mask value
 381:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 382:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 384:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 385:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 386:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 388:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 389:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 390:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 391:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 393:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Priority Mask value
 396:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 397:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 399:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 400:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 401:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 403:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 404:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 405:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 406:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 407:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 408:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Priority Mask
 409:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 412:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 414:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 416:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 417:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 418:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 420:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 424:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 426:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 428:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 429:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 430:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 431:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 435:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Enable FIQ
 436:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 439:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 441:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 443:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 444:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 445:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 446:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Disable FIQ
 447:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 450:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 452:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 454:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 455:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 456:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 457:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Base Priority
 458:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Base Priority register value
 460:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 461:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 463:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 464:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 465:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 467:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 468:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 469:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 470:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 472:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Base Priority register value
 475:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 476:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 478:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 479:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 480:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 482:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 483:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 484:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 485:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 486:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 487:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Base Priority
 488:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 491:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 493:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 495:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 496:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 497:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 499:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 503:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 505:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 507:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 508:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 509:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 510:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 511:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 516:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 518:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 520:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 521:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 522:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 523:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Fault Mask
 524:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Fault Mask register value
 526:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 527:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 529:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 530:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 531:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 533:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 534:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 535:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 536:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 538:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Fault Mask register value
 541:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 542:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 544:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 545:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 546:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 548:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 549:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 550:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 551:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 552:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 553:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Fault Mask
 554:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 557:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 559:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 561:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 562:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 563:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 565:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 569:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 571:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 573:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 574:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 575:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 579:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 580:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 583:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 584:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 586:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSPLIM Register value
 587:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 588:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 589:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 590:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 591:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 592:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 593:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 594:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 595:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 596:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 597:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 598:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 599:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 600:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 601:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 602:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSPLIM Register value
 603:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 604:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 605:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 606:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 607:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 608:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 609:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 610:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 611:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 612:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 613:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 614:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 615:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 616:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 617:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 618:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 619:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 620:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 621:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 622:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 623:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 624:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 625:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 626:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 627:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 628:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 629:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 630:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 631:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 632:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 633:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 634:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 635:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 636:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 637:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 638:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 639:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 640:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 641:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 642:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSPLIM Register value
 643:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 644:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 645:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 646:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 647:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 648:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 649:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 650:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 651:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 652:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 653:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 654:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 655:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 656:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 657:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 658:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 659:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSPLIM Register value
 660:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 661:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 662:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 663:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 664:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 665:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 666:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 667:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 668:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 669:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 670:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 671:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 672:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 673:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 674:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 675:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 676:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 677:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 678:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 679:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 680:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 681:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 682:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 683:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 684:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 685:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 686:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 687:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 688:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 689:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 690:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 691:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 692:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 693:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 694:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 695:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 696:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 697:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 698:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 699:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 700:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 701:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 702:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 703:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get FPSCR
 704:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 705:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 706:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 707:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 708:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 709:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 710:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 711:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >=
 712:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 713:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 714:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 715:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 716:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 717:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 718:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 719:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 720:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 721:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(0U);
 722:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 723:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 724:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 725:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 726:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 727:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set FPSCR
 728:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 729:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 730:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 731:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 732:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 733:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 734:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 735:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr) || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >=
 736:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 737:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 738:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 739:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 740:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 741:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 742:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   (void)fpscr;
 743:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 744:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 745:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 746:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 747:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 748:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 749:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 750:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 751:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 752:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 753:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 754:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 755:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 756:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   Access to dedicated instructions
 757:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   @{
 758:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** */
 759:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 760:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 761:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 762:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 763:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 764:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 765:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 766:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 767:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 768:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 769:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 770:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 771:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 772:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 773:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 774:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   No Operation
 775:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 776:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 777:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 778:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 779:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 780:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Wait For Interrupt
 781:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 782:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 783:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 784:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 785:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 786:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 787:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Wait For Event
 788:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 789:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 790:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 791:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 792:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 793:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 794:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 795:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Send Event
 796:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 797:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 798:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 799:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 800:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 801:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 802:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 803:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 804:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 805:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****            after the instruction has been completed.
 806:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 807:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 808:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 809:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 810:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 811:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 812:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 813:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 814:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 815:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 816:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 817:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 818:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 819:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 820:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
  38              	 .loc 2 820 0
  39              	
  40 0004 BFF34F8F 	 dsb 0xF
  41              	
  42              	 .code 16
  43              	.LBE7:
  44              	.LBE6:
 797:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   __DSB();                                                          /* Ensure all outstanding memor
 798:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****                                                                        buffered write are completed
 799:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
  45              	 .loc 1 799 0
  46 0008 034B     	 ldr r3,.L3
  47 000a 044A     	 ldr r2,.L3+4
  48 000c DA60     	 str r2,[r3,#12]
  49              	.LBB8:
  50              	.LBB9:
  51              	 .loc 2 820 0
  52              	
  53 000e BFF34F8F 	 dsb 0xF
  54              	
  55              	 .code 16
  56              	.L2:
  57              	.LBE9:
  58              	.LBE8:
 800:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 801:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   __DSB();                                                          /* Ensure completion of memory 
 802:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h **** 
 803:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   for(;;)                                                           /* wait until reset */
 804:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   {
 805:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****     __NOP();
  59              	 .loc 1 805 0 discriminator 1
  60              	
  61 0012 C046     	 nop
  62              	
 806:C:/Users/Public/OptiSort/OptiSort/Microcontroller/Libraries/CMSIS/Include\core_cm0.h ****   }
  63              	 .loc 1 806 0 discriminator 1
  64              	 .code 16
  65 0014 FDE7     	 b .L2
  66              	.L4:
  67 0016 C046     	 .align 2
  68              	.L3:
  69 0018 00ED00E0 	 .word -536810240
  70 001c 0400FA05 	 .word 100270084
  71              	 .cfi_endproc
  72              	.LFE33:
  74              	 .comm nextObjects,400,4
  75              	 .global numObjects
  76              	 .section .bss.numObjects,"aw",%nobits
  77              	 .align 2
  80              	numObjects:
  81 0000 00000000 	 .space 4
  82              	 .global handleObjectMovingAway
  83              	 .section .bss.handleObjectMovingAway,"aw",%nobits
  84              	 .align 2
  87              	handleObjectMovingAway:
  88 0000 00000000 	 .space 4
  89              	 .global sortObjectMovingAway
  90              	 .section .bss.sortObjectMovingAway,"aw",%nobits
  91              	 .align 2
  94              	sortObjectMovingAway:
  95 0000 00000000 	 .space 4
  96              	 .global productionLineSpeed
  97              	 .section .data.productionLineSpeed,"aw",%progbits
  98              	 .align 2
 101              	productionLineSpeed:
 102 0000 983A0000 	 .word 15000
 103              	 .section .rodata
 104              	 .align 2
 105              	.LC1:
 106 0000 5363616E 	 .ascii "Scanning\000"
 106      6E696E67 
 106      00
 107 0009 000000   	 .align 2
 108              	.LC5:
 109 000c 536F7274 	 .ascii "Sorting\000"
 109      696E6700 
 110              	 .align 2
 111              	.LC8:
 112 0014 73706565 	 .ascii "speed\000"
 112      6400
 113 001a 0000     	 .align 2
 114              	.LC13:
 115 001c 53706565 	 .ascii "Speed changed to: %ld\000"
 115      64206368 
 115      616E6765 
 115      6420746F 
 115      3A20256C 
 116 0032 0000     	 .align 2
 117              	.LC15:
 118 0034 496E7661 	 .ascii "Invalid speed. Please enter a value between 0 and 5"
 118      6C696420 
 118      73706565 
 118      642E2050 
 118      6C656173 
 119 0067 30303030 	 .ascii "0000.\000"
 119      2E00
 120              	 .section .text.main,"ax",%progbits
 121              	 .align 2
 122              	 .global main
 123              	 .code 16
 124              	 .thumb_func
 126              	main:
 127              	.LFB41:
 128              	 .file 3 "../main.c"
   1:../main.c     **** #include <xmc_common.h>
   2:../main.c     **** #include "XMC1100-LibHaas.h"
   3:../main.c     **** #include "HardwareController.h"
   4:../main.c     **** #include "string.h"
   5:../main.c     **** 
   6:../main.c     **** #define MAX_OBJECTS 100
   7:../main.c     **** int nextObjects[MAX_OBJECTS];
   8:../main.c     **** int numObjects = 0; // Tracks the number of objects in the array
   9:../main.c     **** 
  10:../main.c     **** // 1 if an object is currently being handled, 0 otherwise
  11:../main.c     **** int handleObjectMovingAway = 0;
  12:../main.c     **** int sortObjectMovingAway = 0;
  13:../main.c     **** 
  14:../main.c     **** int productionLineSpeed = 15000; // 15000 is a good value for the production line speed
  15:../main.c     **** 
  16:../main.c     **** void handleNewObject();
  17:../main.c     **** void sortObject();
  18:../main.c     **** void test(int onOrOff);
  19:../main.c     **** 
  20:../main.c     **** int main(void)
  21:../main.c     **** {
 129              	 .loc 3 21 0
 130              	 .cfi_startproc
 131 0000 80B5     	 push {r7,lr}
 132              	.LCFI2:
 133              	 .cfi_def_cfa_offset 8
 134              	 .cfi_offset 7,-8
 135              	 .cfi_offset 14,-4
 136 0002 92B0     	 sub sp,sp,#72
 137              	.LCFI3:
 138              	 .cfi_def_cfa_offset 80
 139 0004 00AF     	 add r7,sp,#0
 140              	.LCFI4:
 141              	 .cfi_def_cfa_register 7
  22:../main.c     **** 	init();
 142              	 .loc 3 22 0
 143 0006 FFF7FEFF 	 bl init
  23:../main.c     **** 	LEDStripes(OFF);
 144              	 .loc 3 23 0
 145 000a 0020     	 mov r0,#0
 146 000c FFF7FEFF 	 bl LEDStripes
  24:../main.c     **** 	productionLine(0, FORWARD);
 147              	 .loc 3 24 0
 148 0010 0020     	 mov r0,#0
 149 0012 0021     	 mov r1,#0
 150 0014 FFF7FEFF 	 bl productionLine
  25:../main.c     **** 	slider(0, SLIDERFORWARD);
 151              	 .loc 3 25 0
 152 0018 0020     	 mov r0,#0
 153 001a 0021     	 mov r1,#0
 154 001c FFF7FEFF 	 bl slider
  26:../main.c     **** 	test(OFF);
 155              	 .loc 3 26 0
 156 0020 0020     	 mov r0,#0
 157 0022 FFF7FEFF 	 bl test
 158              	.L18:
  27:../main.c     **** 
  28:../main.c     **** 	while (1U)
  29:../main.c     **** 	{
  30:../main.c     **** 		laser(ON);
 159              	 .loc 3 30 0
 160 0026 0120     	 mov r0,#1
 161 0028 FFF7FEFF 	 bl laser
  31:../main.c     **** 		// New object handling
  32:../main.c     **** 		if (lightBarrier2() == OFF && handleObjectMovingAway == 0)
 162              	 .loc 3 32 0
 163 002c FFF7FEFF 	 bl lightBarrier2
 164 0030 031E     	 sub r3,r0,#0
 165 0032 09D1     	 bne .L6
 166              	 .loc 3 32 0 is_stmt 0 discriminator 1
 167 0034 4C4B     	 ldr r3,.L19
 168 0036 1B68     	 ldr r3,[r3]
 169 0038 002B     	 cmp r3,#0
 170 003a 05D1     	 bne .L6
  33:../main.c     **** 		{
  34:../main.c     **** 			handleNewObject();
 171              	 .loc 3 34 0 is_stmt 1
 172 003c FFF7FEFF 	 bl handleNewObject
  35:../main.c     **** 			rs232_print("Scanning");
 173              	 .loc 3 35 0
 174 0040 4A4B     	 ldr r3,.L19+4
 175 0042 181C     	 mov r0,r3
 176 0044 FFF7FEFF 	 bl rs232_print
 177              	.L6:
  36:../main.c     **** 		}
  37:../main.c     **** 
  38:../main.c     **** 		// Object sorting if necessary
  39:../main.c     **** 		if (lightBarrier1() == OFF && numObjects > 0 && sortObjectMovingAway == 0)
 178              	 .loc 3 39 0
 179 0048 FFF7FEFF 	 bl lightBarrier1
 180 004c 031E     	 sub r3,r0,#0
 181 004e 0DD1     	 bne .L7
 182              	 .loc 3 39 0 is_stmt 0 discriminator 1
 183 0050 474B     	 ldr r3,.L19+8
 184 0052 1B68     	 ldr r3,[r3]
 185 0054 002B     	 cmp r3,#0
 186 0056 09DD     	 ble .L7
 187              	 .loc 3 39 0 discriminator 2
 188 0058 464B     	 ldr r3,.L19+12
 189 005a 1B68     	 ldr r3,[r3]
 190 005c 002B     	 cmp r3,#0
 191 005e 05D1     	 bne .L7
  40:../main.c     **** 		{
  41:../main.c     **** 			sortObject();
 192              	 .loc 3 41 0 is_stmt 1
 193 0060 FFF7FEFF 	 bl sortObject
  42:../main.c     **** 			rs232_print("Sorting");
 194              	 .loc 3 42 0
 195 0064 444B     	 ldr r3,.L19+16
 196 0066 181C     	 mov r0,r3
 197 0068 FFF7FEFF 	 bl rs232_print
 198              	.L7:
  43:../main.c     **** 		}
  44:../main.c     **** 
  45:../main.c     **** 		// Reset flags
  46:../main.c     **** 		if (lightBarrier2() == ON)
 199              	 .loc 3 46 0
 200 006c FFF7FEFF 	 bl lightBarrier2
 201 0070 031E     	 sub r3,r0,#0
 202 0072 012B     	 cmp r3,#1
 203 0074 02D1     	 bne .L8
  47:../main.c     **** 		{
  48:../main.c     **** 			handleObjectMovingAway = 0;
 204              	 .loc 3 48 0
 205 0076 3C4B     	 ldr r3,.L19
 206 0078 0022     	 mov r2,#0
 207 007a 1A60     	 str r2,[r3]
 208              	.L8:
  49:../main.c     **** 		}
  50:../main.c     **** 		if (lightBarrier1() == ON)
 209              	 .loc 3 50 0
 210 007c FFF7FEFF 	 bl lightBarrier1
 211 0080 031E     	 sub r3,r0,#0
 212 0082 012B     	 cmp r3,#1
 213 0084 02D1     	 bne .L9
  51:../main.c     **** 		{
  52:../main.c     **** 			sortObjectMovingAway = 0;
 214              	 .loc 3 52 0
 215 0086 3B4B     	 ldr r3,.L19+12
 216 0088 0022     	 mov r2,#0
 217 008a 1A60     	 str r2,[r3]
 218              	.L9:
  53:../main.c     **** 		}
  54:../main.c     **** 
  55:../main.c     **** 		// Reset the slider if the button is pressed
  56:../main.c     **** 		if (readButton1() == ON)
 219              	 .loc 3 56 0
 220 008c FFF7FEFF 	 bl readButton1
 221 0090 031E     	 sub r3,r0,#0
 222 0092 012B     	 cmp r3,#1
 223 0094 0DD1     	 bne .L10
  57:../main.c     **** 		{
  58:../main.c     **** 			// slider to max backward position
  59:../main.c     **** 			slider(50000, SLIDERBACKWARD);
 224              	 .loc 3 59 0
 225 0096 394B     	 ldr r3,.L19+20
 226 0098 181C     	 mov r0,r3
 227 009a 0121     	 mov r1,#1
 228 009c FFF7FEFF 	 bl slider
  60:../main.c     **** 			while (readInductivSensor1() == 0)
 229              	 .loc 3 60 0
 230 00a0 C046     	 mov r8,r8
 231              	.L11:
 232              	 .loc 3 60 0 is_stmt 0 discriminator 1
 233 00a2 FFF7FEFF 	 bl readInductivSensor1
 234 00a6 031E     	 sub r3,r0,#0
 235 00a8 FBD0     	 beq .L11
  61:../main.c     **** 				;
  62:../main.c     **** 			// slider stops
  63:../main.c     **** 			slider(0, SLIDERFORWARD);
 236              	 .loc 3 63 0 is_stmt 1
 237 00aa 0020     	 mov r0,#0
 238 00ac 0021     	 mov r1,#0
 239 00ae FFF7FEFF 	 bl slider
 240              	.L10:
  64:../main.c     **** 		}
  65:../main.c     **** 
  66:../main.c     **** 		// reset system, if button 2 is pressed
  67:../main.c     **** 		if (readButton2() == ON)
 241              	 .loc 3 67 0
 242 00b2 FFF7FEFF 	 bl readButton2
 243 00b6 031E     	 sub r3,r0,#0
 244 00b8 012B     	 cmp r3,#1
 245 00ba 07D1     	 bne .L12
  68:../main.c     **** 		{
  69:../main.c     **** 			// wait till the button is released
  70:../main.c     **** 			while (readButton2() == ON)
 246              	 .loc 3 70 0
 247 00bc C046     	 mov r8,r8
 248              	.L13:
 249              	 .loc 3 70 0 is_stmt 0 discriminator 1
 250 00be FFF7FEFF 	 bl readButton2
 251 00c2 031E     	 sub r3,r0,#0
 252 00c4 012B     	 cmp r3,#1
 253 00c6 FAD0     	 beq .L13
  71:../main.c     **** 				;
  72:../main.c     **** 			// reset the system
  73:../main.c     **** 			NVIC_SystemReset();
 254              	 .loc 3 73 0 is_stmt 1
 255 00c8 FFF7FEFF 	 bl __NVIC_SystemReset
 256              	.L12:
  74:../main.c     **** 		}
  75:../main.c     **** 
  76:../main.c     **** 		// check if uart data begins with "speed"
  77:../main.c     **** 		// example input: "speed15000\n\r"
  78:../main.c     **** 		// example input: "speed0\n\r"
  79:../main.c     **** 		// example input: "speed1000\n\r"
  80:../main.c     **** 		// example input: "speed50000\n\r"
  81:../main.c     **** 		if (strncmp(uartReceivedata, "speed", 5) == 0 && uartEnterReceive != 0)
 257              	 .loc 3 81 0
 258 00cc 2C4A     	 ldr r2,.L19+24
 259 00ce 2D4B     	 ldr r3,.L19+28
 260 00d0 101C     	 mov r0,r2
 261 00d2 191C     	 mov r1,r3
 262 00d4 0522     	 mov r2,#5
 263 00d6 FFF7FEFF 	 bl strncmp
 264 00da 031E     	 sub r3,r0,#0
 265 00dc 3DD1     	 bne .L14
 266              	 .loc 3 81 0 is_stmt 0 discriminator 1
 267 00de 2A4B     	 ldr r3,.L19+32
 268 00e0 1B78     	 ldrb r3,[r3]
 269 00e2 002B     	 cmp r3,#0
 270 00e4 39D0     	 beq .L14
 271              	.LBB10:
  82:../main.c     **** 		{
  83:../main.c     **** 		    char *ptr;
  84:../main.c     **** 		    long nextProductionLineSpeed = strtol(uartReceivedata + 5, &ptr, 10); // Convert starting fro
 272              	 .loc 3 84 0 is_stmt 1
 273 00e6 294A     	 ldr r2,.L19+36
 274 00e8 4023     	 mov r3,#64
 275 00ea FB18     	 add r3,r7,r3
 276 00ec 101C     	 mov r0,r2
 277 00ee 191C     	 mov r1,r3
 278 00f0 0A22     	 mov r2,#10
 279 00f2 FFF7FEFF 	 bl strtol
 280 00f6 031C     	 mov r3,r0
 281 00f8 7B64     	 str r3,[r7,#68]
  85:../main.c     **** 
  86:../main.c     **** 		    // Validate conversion success and range. Ensure the remainder points to a newline, carriage 
  87:../main.c     **** 		    if (ptr != uartReceivedata + 5 && (*ptr == '\n' || *ptr == '\r' || *ptr == '\0') && nextProdu
 282              	 .loc 3 87 0
 283 00fa 3A6C     	 ldr r2,[r7,#64]
 284 00fc 234B     	 ldr r3,.L19+36
 285 00fe 9A42     	 cmp r2,r3
 286 0100 22D0     	 beq .L15
 287              	 .loc 3 87 0 is_stmt 0 discriminator 1
 288 0102 3B6C     	 ldr r3,[r7,#64]
 289 0104 1B78     	 ldrb r3,[r3]
 290 0106 0A2B     	 cmp r3,#10
 291 0108 07D0     	 beq .L16
 292              	 .loc 3 87 0 discriminator 3
 293 010a 3B6C     	 ldr r3,[r7,#64]
 294 010c 1B78     	 ldrb r3,[r3]
 295 010e 0D2B     	 cmp r3,#13
 296 0110 03D0     	 beq .L16
 297              	 .loc 3 87 0 discriminator 5
 298 0112 3B6C     	 ldr r3,[r7,#64]
 299 0114 1B78     	 ldrb r3,[r3]
 300 0116 002B     	 cmp r3,#0
 301 0118 16D1     	 bne .L15
 302              	.L16:
 303              	 .loc 3 87 0 discriminator 6
 304 011a 7B6C     	 ldr r3,[r7,#68]
 305 011c 002B     	 cmp r3,#0
 306 011e 13DB     	 blt .L15
 307              	 .loc 3 87 0 discriminator 7
 308 0120 7B6C     	 ldr r3,[r7,#68]
 309 0122 164A     	 ldr r2,.L19+20
 310 0124 9342     	 cmp r3,r2
 311 0126 0FDC     	 bgt .L15
 312              	.LBB11:
  88:../main.c     **** 		    {
  89:../main.c     **** 		        productionLineSpeed = (int)nextProductionLineSpeed; // Assuming productionLineSpeed is an
 313              	 .loc 3 89 0 is_stmt 1
 314 0128 194B     	 ldr r3,.L19+40
 315 012a 7A6C     	 ldr r2,[r7,#68]
 316 012c 1A60     	 str r2,[r3]
  90:../main.c     **** 		        // Assuming a function exists to convert int to string for printing
  91:../main.c     **** 		        char feedback[64];
  92:../main.c     **** 		        sprintf(feedback, "Speed changed to: %ld", nextProductionLineSpeed);
 317              	 .loc 3 92 0
 318 012e 391C     	 mov r1,r7
 319 0130 184A     	 ldr r2,.L19+44
 320 0132 7B6C     	 ldr r3,[r7,#68]
 321 0134 081C     	 mov r0,r1
 322 0136 111C     	 mov r1,r2
 323 0138 1A1C     	 mov r2,r3
 324 013a FFF7FEFF 	 bl sprintf
  93:../main.c     **** 		        rs232_print(feedback);
 325              	 .loc 3 93 0
 326 013e 3B1C     	 mov r3,r7
 327 0140 181C     	 mov r0,r3
 328 0142 FFF7FEFF 	 bl rs232_print
 329              	.LBE11:
  88:../main.c     **** 		    {
 330              	 .loc 3 88 0
 331 0146 03E0     	 b .L17
 332              	.L15:
  94:../main.c     **** 		    }
  95:../main.c     **** 		    else
  96:../main.c     **** 		    {
  97:../main.c     **** 		        // Feedback for invalid input
  98:../main.c     **** 		        rs232_print("Invalid speed. Please enter a value between 0 and 50000.");
 333              	 .loc 3 98 0
 334 0148 134B     	 ldr r3,.L19+48
 335 014a 181C     	 mov r0,r3
 336 014c FFF7FEFF 	 bl rs232_print
 337              	.L17:
  99:../main.c     **** 		    }
 100:../main.c     **** 
 101:../main.c     **** 		    uartEnterReceive = 0;
 338              	 .loc 3 101 0 discriminator 1
 339 0150 0D4B     	 ldr r3,.L19+32
 340 0152 0022     	 mov r2,#0
 341 0154 1A70     	 strb r2,[r3]
 102:../main.c     **** 		    uart_clear_receivedata();
 342              	 .loc 3 102 0 discriminator 1
 343 0156 FFF7FEFF 	 bl uart_clear_receivedata
 344              	.L14:
 345              	.LBE10:
 103:../main.c     **** 		}
 104:../main.c     **** 
 105:../main.c     **** 		productionLine(productionLineSpeed, FORWARD);
 346              	 .loc 3 105 0
 347 015a 0D4B     	 ldr r3,.L19+40
 348 015c 1B68     	 ldr r3,[r3]
 349 015e 181C     	 mov r0,r3
 350 0160 0021     	 mov r1,#0
 351 0162 FFF7FEFF 	 bl productionLine
 106:../main.c     **** 	}
 352              	 .loc 3 106 0
 353 0166 5EE7     	 b .L18
 354              	.L20:
 355              	 .align 2
 356              	.L19:
 357 0168 00000000 	 .word handleObjectMovingAway
 358 016c 00000000 	 .word .LC1
 359 0170 00000000 	 .word numObjects
 360 0174 00000000 	 .word sortObjectMovingAway
 361 0178 0C000000 	 .word .LC5
 362 017c 50C30000 	 .word 50000
 363 0180 00000000 	 .word uartReceivedata
 364 0184 14000000 	 .word .LC8
 365 0188 00000000 	 .word uartEnterReceive
 366 018c 05000000 	 .word uartReceivedata+5
 367 0190 00000000 	 .word productionLineSpeed
 368 0194 1C000000 	 .word .LC13
 369 0198 34000000 	 .word .LC15
 370              	 .cfi_endproc
 371              	.LFE41:
 373              	 .section .rodata
 374 006d 000000   	 .align 2
 375              	.LC18:
 376 0070 536F7274 	 .ascii "Sort out or don't?\012\015\000"
 376      206F7574 
 376      206F7220 
 376      646F6E27 
 376      743F0A0D 
 377 0085 000000   	 .align 2
 378              	.LC22:
 379 0088 446F206E 	 .ascii "Do nothing.\000"
 379      6F746869 
 379      6E672E00 
 380              	 .section .text.handleNewObject,"ax",%progbits
 381              	 .align 2
 382              	 .global handleNewObject
 383              	 .code 16
 384              	 .thumb_func
 386              	handleNewObject:
 387              	.LFB42:
 107:../main.c     **** 
 108:../main.c     **** 	return 0; // Added return statement for formality, though it will never be reached in this loop
 109:../main.c     **** }
 110:../main.c     **** 
 111:../main.c     **** void handleNewObject()
 112:../main.c     **** {
 388              	 .loc 3 112 0
 389              	 .cfi_startproc
 390 0000 80B5     	 push {r7,lr}
 391              	.LCFI5:
 392              	 .cfi_def_cfa_offset 8
 393              	 .cfi_offset 7,-8
 394              	 .cfi_offset 14,-4
 395 0002 00AF     	 add r7,sp,#0
 396              	.LCFI6:
 397              	 .cfi_def_cfa_register 7
 113:../main.c     **** 	handleObjectMovingAway = 1;
 398              	 .loc 3 113 0
 399 0004 2D4B     	 ldr r3,.L27
 400 0006 0122     	 mov r2,#1
 401 0008 1A60     	 str r2,[r3]
 114:../main.c     **** 
 115:../main.c     **** 	productionLine(0, FORWARD);
 402              	 .loc 3 115 0
 403 000a 0020     	 mov r0,#0
 404 000c 0021     	 mov r1,#0
 405 000e FFF7FEFF 	 bl productionLine
 116:../main.c     **** 
 117:../main.c     **** 	LEDStripes(ON);
 406              	 .loc 3 117 0
 407 0012 0120     	 mov r0,#1
 408 0014 FFF7FEFF 	 bl LEDStripes
 118:../main.c     **** 	laser(OFF);
 409              	 .loc 3 118 0
 410 0018 0020     	 mov r0,#0
 411 001a FFF7FEFF 	 bl laser
 119:../main.c     **** 
 120:../main.c     **** 	pneumatics1(OUT);
 412              	 .loc 3 120 0
 413 001e 0120     	 mov r0,#1
 414 0020 FFF7FEFF 	 bl pneumatics1
 121:../main.c     **** 
 122:../main.c     **** 	// Get classification
 123:../main.c     **** 	uart_print("Sort out or don't?\n\r");
 415              	 .loc 3 123 0
 416 0024 264B     	 ldr r3,.L27+4
 417 0026 181C     	 mov r0,r3
 418 0028 FFF7FEFF 	 bl uart_print
 124:../main.c     **** 
 125:../main.c     **** 	// uart_wait_of_enter();
 126:../main.c     **** 	while (uartEnterReceive == 0)
 419              	 .loc 3 126 0
 420 002c 0CE0     	 b .L22
 421              	.L24:
 127:../main.c     **** 	{
 128:../main.c     **** 		if (readButton2() == ON)
 422              	 .loc 3 128 0
 423 002e FFF7FEFF 	 bl readButton2
 424 0032 031E     	 sub r3,r0,#0
 425 0034 012B     	 cmp r3,#1
 426 0036 07D1     	 bne .L22
 129:../main.c     **** 		{
 130:../main.c     **** 			// wait till the button is released
 131:../main.c     **** 			while (readButton2() == ON)
 427              	 .loc 3 131 0
 428 0038 C046     	 mov r8,r8
 429              	.L23:
 430              	 .loc 3 131 0 is_stmt 0 discriminator 1
 431 003a FFF7FEFF 	 bl readButton2
 432 003e 031E     	 sub r3,r0,#0
 433 0040 012B     	 cmp r3,#1
 434 0042 FAD0     	 beq .L23
 132:../main.c     **** 				;
 133:../main.c     **** 			// reset the system
 134:../main.c     **** 			NVIC_SystemReset();
 435              	 .loc 3 134 0 is_stmt 1
 436 0044 FFF7FEFF 	 bl __NVIC_SystemReset
 437              	.L22:
 126:../main.c     **** 	{
 438              	 .loc 3 126 0
 439 0048 1E4B     	 ldr r3,.L27+8
 440 004a 1B78     	 ldrb r3,[r3]
 441 004c 002B     	 cmp r3,#0
 442 004e EED0     	 beq .L24
 135:../main.c     **** 		}
 136:../main.c     **** 	}
 137:../main.c     **** 	uartEnterReceive = 0;
 443              	 .loc 3 137 0
 444 0050 1C4B     	 ldr r3,.L27+8
 445 0052 0022     	 mov r2,#0
 446 0054 1A70     	 strb r2,[r3]
 138:../main.c     **** 
 139:../main.c     **** 	rs232_print(uartReceivedata);
 447              	 .loc 3 139 0
 448 0056 1C4B     	 ldr r3,.L27+12
 449 0058 181C     	 mov r0,r3
 450 005a FFF7FEFF 	 bl rs232_print
 140:../main.c     **** 
 141:../main.c     **** 	pneumatics1(IN);
 451              	 .loc 3 141 0
 452 005e 0020     	 mov r0,#0
 453 0060 FFF7FEFF 	 bl pneumatics1
 142:../main.c     **** 
 143:../main.c     **** 	// Save if apple is good or bad in the nextObjects array (append to the end of the array)
 144:../main.c     **** 	if (uartReceivedata[0] == 'n')
 454              	 .loc 3 144 0
 455 0064 184B     	 ldr r3,.L27+12
 456 0066 1B78     	 ldrb r3,[r3]
 457 0068 6E2B     	 cmp r3,#110
 458 006a 04D1     	 bne .L25
 145:../main.c     **** 	{
 146:../main.c     **** 		// do nothing
 147:../main.c     **** 		rs232_print("Do nothing.");
 459              	 .loc 3 147 0
 460 006c 174B     	 ldr r3,.L27+16
 461 006e 181C     	 mov r0,r3
 462 0070 FFF7FEFF 	 bl rs232_print
 463 0074 12E0     	 b .L26
 464              	.L25:
 148:../main.c     **** 	}
 149:../main.c     **** 	else if (numObjects < MAX_OBJECTS)
 465              	 .loc 3 149 0
 466 0076 164B     	 ldr r3,.L27+20
 467 0078 1B68     	 ldr r3,[r3]
 468 007a 632B     	 cmp r3,#99
 469 007c 0EDC     	 bgt .L26
 150:../main.c     **** 	{
 151:../main.c     **** 		nextObjects[numObjects++] = (uartReceivedata[0] == 'd' ? DONTSORTOUT : SORTOUT); // Fixed logic f
 470              	 .loc 3 151 0
 471 007e 144B     	 ldr r3,.L27+20
 472 0080 1B68     	 ldr r3,[r3]
 473 0082 591C     	 add r1,r3,#1
 474 0084 124A     	 ldr r2,.L27+20
 475 0086 1160     	 str r1,[r2]
 476 0088 0F4A     	 ldr r2,.L27+12
 477 008a 1278     	 ldrb r2,[r2]
 478 008c 643A     	 sub r2,r2,#100
 479 008e 511E     	 sub r1,r2,#1
 480 0090 8A41     	 sbc r2,r2,r1
 481 0092 D2B2     	 uxtb r2,r2
 482 0094 111C     	 mov r1,r2
 483 0096 0F4A     	 ldr r2,.L27+24
 484 0098 9B00     	 lsl r3,r3,#2
 485 009a 9950     	 str r1,[r3,r2]
 486              	.L26:
 152:../main.c     **** 	}
 153:../main.c     **** 	uart_clear_receivedata();
 487              	 .loc 3 153 0
 488 009c FFF7FEFF 	 bl uart_clear_receivedata
 154:../main.c     **** 
 155:../main.c     **** 	laser(ON);
 489              	 .loc 3 155 0
 490 00a0 0120     	 mov r0,#1
 491 00a2 FFF7FEFF 	 bl laser
 156:../main.c     **** 	LEDStripes(OFF);
 492              	 .loc 3 156 0
 493 00a6 0020     	 mov r0,#0
 494 00a8 FFF7FEFF 	 bl LEDStripes
 157:../main.c     **** 	productionLine(productionLineSpeed, FORWARD);
 495              	 .loc 3 157 0
 496 00ac 0A4B     	 ldr r3,.L27+28
 497 00ae 1B68     	 ldr r3,[r3]
 498 00b0 181C     	 mov r0,r3
 499 00b2 0021     	 mov r1,#0
 500 00b4 FFF7FEFF 	 bl productionLine
 158:../main.c     **** }
 501              	 .loc 3 158 0
 502 00b8 BD46     	 mov sp,r7
 503              	 
 504 00ba 80BD     	 pop {r7,pc}
 505              	.L28:
 506              	 .align 2
 507              	.L27:
 508 00bc 00000000 	 .word handleObjectMovingAway
 509 00c0 70000000 	 .word .LC18
 510 00c4 00000000 	 .word uartEnterReceive
 511 00c8 00000000 	 .word uartReceivedata
 512 00cc 88000000 	 .word .LC22
 513 00d0 00000000 	 .word numObjects
 514 00d4 00000000 	 .word nextObjects
 515 00d8 00000000 	 .word productionLineSpeed
 516              	 .cfi_endproc
 517              	.LFE42:
 519              	 .section .text.sortObject,"ax",%progbits
 520              	 .align 2
 521              	 .global sortObject
 522              	 .code 16
 523              	 .thumb_func
 525              	sortObject:
 526              	.LFB43:
 159:../main.c     **** 
 160:../main.c     **** void sortObject()
 161:../main.c     **** {
 527              	 .loc 3 161 0
 528              	 .cfi_startproc
 529 0000 80B5     	 push {r7,lr}
 530              	.LCFI7:
 531              	 .cfi_def_cfa_offset 8
 532              	 .cfi_offset 7,-8
 533              	 .cfi_offset 14,-4
 534 0002 82B0     	 sub sp,sp,#8
 535              	.LCFI8:
 536              	 .cfi_def_cfa_offset 16
 537 0004 00AF     	 add r7,sp,#0
 538              	.LCFI9:
 539              	 .cfi_def_cfa_register 7
 162:../main.c     **** 	sortObjectMovingAway = 1;
 540              	 .loc 3 162 0
 541 0006 244B     	 ldr r3,.L36
 542 0008 0122     	 mov r2,#1
 543 000a 1A60     	 str r2,[r3]
 163:../main.c     **** 
 164:../main.c     **** 	productionLine(0, FORWARD);
 544              	 .loc 3 164 0
 545 000c 0020     	 mov r0,#0
 546 000e 0021     	 mov r1,#0
 547 0010 FFF7FEFF 	 bl productionLine
 165:../main.c     **** 	if (nextObjects[0] == SORTOUT)
 548              	 .loc 3 165 0
 549 0014 214B     	 ldr r3,.L36+4
 550 0016 1B68     	 ldr r3,[r3]
 551 0018 012B     	 cmp r3,#1
 552 001a 17D1     	 bne .L30
 166:../main.c     **** 	{
 167:../main.c     **** 		slider(50000, SLIDERFORWARD);
 553              	 .loc 3 167 0
 554 001c 204B     	 ldr r3,.L36+8
 555 001e 181C     	 mov r0,r3
 556 0020 0021     	 mov r1,#0
 557 0022 FFF7FEFF 	 bl slider
 168:../main.c     **** 		while (readInductivSensor2() == 0)
 558              	 .loc 3 168 0
 559 0026 C046     	 mov r8,r8
 560              	.L31:
 561              	 .loc 3 168 0 is_stmt 0 discriminator 1
 562 0028 FFF7FEFF 	 bl readInductivSensor2
 563 002c 031E     	 sub r3,r0,#0
 564 002e FBD0     	 beq .L31
 169:../main.c     **** 			;
 170:../main.c     **** 		slider(50000, SLIDERBACKWARD);
 565              	 .loc 3 170 0 is_stmt 1
 566 0030 1B4B     	 ldr r3,.L36+8
 567 0032 181C     	 mov r0,r3
 568 0034 0121     	 mov r1,#1
 569 0036 FFF7FEFF 	 bl slider
 171:../main.c     **** 		while (readInductivSensor1() == 0)
 570              	 .loc 3 171 0
 571 003a C046     	 mov r8,r8
 572              	.L32:
 573              	 .loc 3 171 0 is_stmt 0 discriminator 1
 574 003c FFF7FEFF 	 bl readInductivSensor1
 575 0040 031E     	 sub r3,r0,#0
 576 0042 FBD0     	 beq .L32
 172:../main.c     **** 			;
 173:../main.c     **** 		// slider stops
 174:../main.c     **** 		slider(0, SLIDERFORWARD);
 577              	 .loc 3 174 0 is_stmt 1
 578 0044 0020     	 mov r0,#0
 579 0046 0021     	 mov r1,#0
 580 0048 FFF7FEFF 	 bl slider
 581              	.L30:
 582              	.LBB12:
 175:../main.c     **** 	}
 176:../main.c     **** 	// Shift the nextObjects array elements left, deleting the first element
 177:../main.c     **** 	for (int i = 1; i < numObjects; i++)
 583              	 .loc 3 177 0
 584 004c 0123     	 mov r3,#1
 585 004e 7B60     	 str r3,[r7,#4]
 586 0050 0BE0     	 b .L33
 587              	.L34:
 178:../main.c     **** 	{
 179:../main.c     **** 		nextObjects[i - 1] = nextObjects[i];
 588              	 .loc 3 179 0 discriminator 3
 589 0052 7B68     	 ldr r3,[r7,#4]
 590 0054 5A1E     	 sub r2,r3,#1
 591 0056 114B     	 ldr r3,.L36+4
 592 0058 7968     	 ldr r1,[r7,#4]
 593 005a 8900     	 lsl r1,r1,#2
 594 005c C958     	 ldr r1,[r1,r3]
 595 005e 0F4B     	 ldr r3,.L36+4
 596 0060 9200     	 lsl r2,r2,#2
 597 0062 D150     	 str r1,[r2,r3]
 177:../main.c     **** 	{
 598              	 .loc 3 177 0 discriminator 3
 599 0064 7B68     	 ldr r3,[r7,#4]
 600 0066 0133     	 add r3,r3,#1
 601 0068 7B60     	 str r3,[r7,#4]
 602              	.L33:
 177:../main.c     **** 	{
 603              	 .loc 3 177 0 is_stmt 0 discriminator 1
 604 006a 0E4B     	 ldr r3,.L36+12
 605 006c 1B68     	 ldr r3,[r3]
 606 006e 7A68     	 ldr r2,[r7,#4]
 607 0070 9A42     	 cmp r2,r3
 608 0072 EEDB     	 blt .L34
 609              	.LBE12:
 180:../main.c     **** 	}
 181:../main.c     **** 	if (numObjects > 0)
 610              	 .loc 3 181 0 is_stmt 1
 611 0074 0B4B     	 ldr r3,.L36+12
 612 0076 1B68     	 ldr r3,[r3]
 613 0078 002B     	 cmp r3,#0
 614 007a 04DD     	 ble .L35
 182:../main.c     **** 		numObjects--; // Decrease the objects count after sorting one out
 615              	 .loc 3 182 0
 616 007c 094B     	 ldr r3,.L36+12
 617 007e 1B68     	 ldr r3,[r3]
 618 0080 5A1E     	 sub r2,r3,#1
 619 0082 084B     	 ldr r3,.L36+12
 620 0084 1A60     	 str r2,[r3]
 621              	.L35:
 183:../main.c     **** 	productionLine(productionLineSpeed, FORWARD);
 622              	 .loc 3 183 0
 623 0086 084B     	 ldr r3,.L36+16
 624 0088 1B68     	 ldr r3,[r3]
 625 008a 181C     	 mov r0,r3
 626 008c 0021     	 mov r1,#0
 627 008e FFF7FEFF 	 bl productionLine
 184:../main.c     **** }
 628              	 .loc 3 184 0
 629 0092 BD46     	 mov sp,r7
 630 0094 02B0     	 add sp,sp,#8
 631              	 
 632 0096 80BD     	 pop {r7,pc}
 633              	.L37:
 634              	 .align 2
 635              	.L36:
 636 0098 00000000 	 .word sortObjectMovingAway
 637 009c 00000000 	 .word nextObjects
 638 00a0 50C30000 	 .word 50000
 639 00a4 00000000 	 .word numObjects
 640 00a8 00000000 	 .word productionLineSpeed
 641              	 .cfi_endproc
 642              	.LFE43:
 644              	 .section .text.test,"ax",%progbits
 645              	 .align 2
 646              	 .global test
 647              	 .code 16
 648              	 .thumb_func
 650              	test:
 651              	.LFB44:
 185:../main.c     **** 
 186:../main.c     **** void test(int onOrOff)
 187:../main.c     **** {
 652              	 .loc 3 187 0
 653              	 .cfi_startproc
 654 0000 80B5     	 push {r7,lr}
 655              	.LCFI10:
 656              	 .cfi_def_cfa_offset 8
 657              	 .cfi_offset 7,-8
 658              	 .cfi_offset 14,-4
 659 0002 82B0     	 sub sp,sp,#8
 660              	.LCFI11:
 661              	 .cfi_def_cfa_offset 16
 662 0004 00AF     	 add r7,sp,#0
 663              	.LCFI12:
 664              	 .cfi_def_cfa_register 7
 665 0006 7860     	 str r0,[r7,#4]
 188:../main.c     **** 	if (!onOrOff)
 666              	 .loc 3 188 0
 667 0008 7B68     	 ldr r3,[r7,#4]
 668 000a 002B     	 cmp r3,#0
 669 000c 10D1     	 bne .L39
 189:../main.c     **** 	{
 190:../main.c     **** 		// shut everything down
 191:../main.c     **** 		laser(OFF);
 670              	 .loc 3 191 0
 671 000e 0020     	 mov r0,#0
 672 0010 FFF7FEFF 	 bl laser
 192:../main.c     **** 		LEDStripes(OFF);
 673              	 .loc 3 192 0
 674 0014 0020     	 mov r0,#0
 675 0016 FFF7FEFF 	 bl LEDStripes
 193:../main.c     **** 		redLED(OFF);
 676              	 .loc 3 193 0
 677 001a 0020     	 mov r0,#0
 678 001c FFF7FEFF 	 bl redLED
 194:../main.c     **** 		greenLED(OFF);
 679              	 .loc 3 194 0
 680 0020 0020     	 mov r0,#0
 681 0022 FFF7FEFF 	 bl greenLED
 195:../main.c     **** 		productionLine(0, FORWARD);
 682              	 .loc 3 195 0
 683 0026 0020     	 mov r0,#0
 684 0028 0021     	 mov r1,#0
 685 002a FFF7FEFF 	 bl productionLine
 196:../main.c     **** 		return;
 686              	 .loc 3 196 0
 687 002e 7FE0     	 b .L38
 688              	.L39:
 197:../main.c     **** 	}
 198:../main.c     **** 
 199:../main.c     **** 	// light test: manual check
 200:../main.c     **** 	laser(ON);
 689              	 .loc 3 200 0
 690 0030 0120     	 mov r0,#1
 691 0032 FFF7FEFF 	 bl laser
 201:../main.c     **** 	LEDStripes(ON);
 692              	 .loc 3 201 0
 693 0036 0120     	 mov r0,#1
 694 0038 FFF7FEFF 	 bl LEDStripes
 202:../main.c     **** 	redLED(ON);
 695              	 .loc 3 202 0
 696 003c 0120     	 mov r0,#1
 697 003e FFF7FEFF 	 bl redLED
 203:../main.c     **** 	greenLED(ON);
 698              	 .loc 3 203 0
 699 0042 0120     	 mov r0,#1
 700 0044 FFF7FEFF 	 bl greenLED
 204:../main.c     **** 	delay_ms(5000);
 701              	 .loc 3 204 0
 702 0048 3B4B     	 ldr r3,.L47
 703 004a 181C     	 mov r0,r3
 704 004c FFF7FEFF 	 bl delay_ms
 205:../main.c     **** 	LEDStripes(OFF);
 705              	 .loc 3 205 0
 706 0050 0020     	 mov r0,#0
 707 0052 FFF7FEFF 	 bl LEDStripes
 206:../main.c     **** 	redLED(OFF);
 708              	 .loc 3 206 0
 709 0056 0020     	 mov r0,#0
 710 0058 FFF7FEFF 	 bl redLED
 207:../main.c     **** 	greenLED(OFF);
 711              	 .loc 3 207 0
 712 005c 0020     	 mov r0,#0
 713 005e FFF7FEFF 	 bl greenLED
 208:../main.c     **** 	delay_ms(2000);
 714              	 .loc 3 208 0
 715 0062 FA23     	 mov r3,#250
 716 0064 DB00     	 lsl r3,r3,#3
 717 0066 181C     	 mov r0,r3
 718 0068 FFF7FEFF 	 bl delay_ms
 209:../main.c     **** 
 210:../main.c     **** 	// check lightbarriers: automatic check
 211:../main.c     **** 	if (lightBarrier1())
 719              	 .loc 3 211 0
 720 006c FFF7FEFF 	 bl lightBarrier1
 721 0070 031E     	 sub r3,r0,#0
 722 0072 03D0     	 beq .L41
 212:../main.c     **** 	{
 213:../main.c     **** 		greenLED(ON);
 723              	 .loc 3 213 0
 724 0074 0120     	 mov r0,#1
 725 0076 FFF7FEFF 	 bl greenLED
 726 007a 02E0     	 b .L42
 727              	.L41:
 214:../main.c     **** 	}
 215:../main.c     **** 	else
 216:../main.c     **** 	{
 217:../main.c     **** 		redLED(ON);
 728              	 .loc 3 217 0
 729 007c 0120     	 mov r0,#1
 730 007e FFF7FEFF 	 bl redLED
 731              	.L42:
 218:../main.c     **** 	}
 219:../main.c     **** 	delay_ms(1000);
 732              	 .loc 3 219 0
 733 0082 FA23     	 mov r3,#250
 734 0084 9B00     	 lsl r3,r3,#2
 735 0086 181C     	 mov r0,r3
 736 0088 FFF7FEFF 	 bl delay_ms
 220:../main.c     **** 	redLED(OFF);
 737              	 .loc 3 220 0
 738 008c 0020     	 mov r0,#0
 739 008e FFF7FEFF 	 bl redLED
 221:../main.c     **** 	greenLED(OFF);
 740              	 .loc 3 221 0
 741 0092 0020     	 mov r0,#0
 742 0094 FFF7FEFF 	 bl greenLED
 222:../main.c     **** 	delay_ms(500);
 743              	 .loc 3 222 0
 744 0098 FA23     	 mov r3,#250
 745 009a 5B00     	 lsl r3,r3,#1
 746 009c 181C     	 mov r0,r3
 747 009e FFF7FEFF 	 bl delay_ms
 223:../main.c     **** 	if (lightBarrier2())
 748              	 .loc 3 223 0
 749 00a2 FFF7FEFF 	 bl lightBarrier2
 750 00a6 031E     	 sub r3,r0,#0
 751 00a8 03D0     	 beq .L43
 224:../main.c     **** 	{
 225:../main.c     **** 		greenLED(ON);
 752              	 .loc 3 225 0
 753 00aa 0120     	 mov r0,#1
 754 00ac FFF7FEFF 	 bl greenLED
 755 00b0 02E0     	 b .L44
 756              	.L43:
 226:../main.c     **** 	}
 227:../main.c     **** 	else
 228:../main.c     **** 	{
 229:../main.c     **** 		redLED(ON);
 757              	 .loc 3 229 0
 758 00b2 0120     	 mov r0,#1
 759 00b4 FFF7FEFF 	 bl redLED
 760              	.L44:
 230:../main.c     **** 	}
 231:../main.c     **** 	delay_ms(1000);
 761              	 .loc 3 231 0
 762 00b8 FA23     	 mov r3,#250
 763 00ba 9B00     	 lsl r3,r3,#2
 764 00bc 181C     	 mov r0,r3
 765 00be FFF7FEFF 	 bl delay_ms
 232:../main.c     **** 	redLED(OFF);
 766              	 .loc 3 232 0
 767 00c2 0020     	 mov r0,#0
 768 00c4 FFF7FEFF 	 bl redLED
 233:../main.c     **** 	greenLED(OFF);
 769              	 .loc 3 233 0
 770 00c8 0020     	 mov r0,#0
 771 00ca FFF7FEFF 	 bl greenLED
 234:../main.c     **** 	delay_ms(500);
 772              	 .loc 3 234 0
 773 00ce FA23     	 mov r3,#250
 774 00d0 5B00     	 lsl r3,r3,#1
 775 00d2 181C     	 mov r0,r3
 776 00d4 FFF7FEFF 	 bl delay_ms
 235:../main.c     **** 	if (lightBarrier3())
 777              	 .loc 3 235 0
 778 00d8 FFF7FEFF 	 bl lightBarrier3
 779 00dc 031E     	 sub r3,r0,#0
 780 00de 03D0     	 beq .L45
 236:../main.c     **** 	{
 237:../main.c     **** 		greenLED(ON);
 781              	 .loc 3 237 0
 782 00e0 0120     	 mov r0,#1
 783 00e2 FFF7FEFF 	 bl greenLED
 784 00e6 02E0     	 b .L46
 785              	.L45:
 238:../main.c     **** 	}
 239:../main.c     **** 	else
 240:../main.c     **** 	{
 241:../main.c     **** 		redLED(ON);
 786              	 .loc 3 241 0
 787 00e8 0120     	 mov r0,#1
 788 00ea FFF7FEFF 	 bl redLED
 789              	.L46:
 242:../main.c     **** 	}
 243:../main.c     **** 	delay_ms(1000);
 790              	 .loc 3 243 0
 791 00ee FA23     	 mov r3,#250
 792 00f0 9B00     	 lsl r3,r3,#2
 793 00f2 181C     	 mov r0,r3
 794 00f4 FFF7FEFF 	 bl delay_ms
 244:../main.c     **** 	redLED(OFF);
 795              	 .loc 3 244 0
 796 00f8 0020     	 mov r0,#0
 797 00fa FFF7FEFF 	 bl redLED
 245:../main.c     **** 	greenLED(OFF);
 798              	 .loc 3 245 0
 799 00fe 0020     	 mov r0,#0
 800 0100 FFF7FEFF 	 bl greenLED
 246:../main.c     **** 
 247:../main.c     **** 	/*
 248:../main.c     **** 	 // check productionLine
 249:../main.c     **** 	 productionLine(productionLineSpeed, BACKWARD);
 250:../main.c     **** 	 delay_ms(1000);
 251:../main.c     **** 	 productionLine(productionLineSpeed, FORWARD);
 252:../main.c     **** 	 delay_ms(1000);
 253:../main.c     **** 	 productionLine(0, FORWARD);
 254:../main.c     **** 	 */
 255:../main.c     **** 
 256:../main.c     **** 	// check pneumatics1
 257:../main.c     **** 	pneumatics1(OUT);
 801              	 .loc 3 257 0
 802 0104 0120     	 mov r0,#1
 803 0106 FFF7FEFF 	 bl pneumatics1
 258:../main.c     **** 	delay_ms(1000);
 804              	 .loc 3 258 0
 805 010a FA23     	 mov r3,#250
 806 010c 9B00     	 lsl r3,r3,#2
 807 010e 181C     	 mov r0,r3
 808 0110 FFF7FEFF 	 bl delay_ms
 259:../main.c     **** 	pneumatics1(IN);
 809              	 .loc 3 259 0
 810 0114 0020     	 mov r0,#0
 811 0116 FFF7FEFF 	 bl pneumatics1
 260:../main.c     **** 	pneumatics2(OUT);
 812              	 .loc 3 260 0
 813 011a 0120     	 mov r0,#1
 814 011c FFF7FEFF 	 bl pneumatics2
 261:../main.c     **** 	delay_ms(1000);
 815              	 .loc 3 261 0
 816 0120 FA23     	 mov r3,#250
 817 0122 9B00     	 lsl r3,r3,#2
 818 0124 181C     	 mov r0,r3
 819 0126 FFF7FEFF 	 bl delay_ms
 262:../main.c     **** 	pneumatics2(IN);
 820              	 .loc 3 262 0
 821 012a 0020     	 mov r0,#0
 822 012c FFF7FEFF 	 bl pneumatics2
 823              	.L38:
 263:../main.c     **** }
 824              	 .loc 3 263 0
 825 0130 BD46     	 mov sp,r7
 826 0132 02B0     	 add sp,sp,#8
 827              	 
 828 0134 80BD     	 pop {r7,pc}
 829              	.L48:
 830 0136 C046     	 .align 2
 831              	.L47:
 832 0138 88130000 	 .word 5000
 833              	 .cfi_endproc
 834              	.LFE44:
 836              	 .text
 837              	.Letext0:
 838              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 839              	 .file 5 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 840              	 .file 6 "<built-in>"
 841              	 .file 7 "../XMC1100-LibHaas.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:18     .text.__NVIC_SystemReset:00000000 $t
    {standard input}:22     .text.__NVIC_SystemReset:00000000 __NVIC_SystemReset
    {standard input}:69     .text.__NVIC_SystemReset:00000018 $d
                            *COM*:00000190 nextObjects
    {standard input}:80     .bss.numObjects:00000000 numObjects
    {standard input}:77     .bss.numObjects:00000000 $d
    {standard input}:87     .bss.handleObjectMovingAway:00000000 handleObjectMovingAway
    {standard input}:84     .bss.handleObjectMovingAway:00000000 $d
    {standard input}:94     .bss.sortObjectMovingAway:00000000 sortObjectMovingAway
    {standard input}:91     .bss.sortObjectMovingAway:00000000 $d
    {standard input}:101    .data.productionLineSpeed:00000000 productionLineSpeed
    {standard input}:98     .data.productionLineSpeed:00000000 $d
    {standard input}:104    .rodata:00000000 $d
    {standard input}:121    .text.main:00000000 $t
    {standard input}:126    .text.main:00000000 main
    {standard input}:650    .text.test:00000000 test
    {standard input}:386    .text.handleNewObject:00000000 handleNewObject
    {standard input}:525    .text.sortObject:00000000 sortObject
    {standard input}:357    .text.main:00000168 $d
    {standard input}:381    .text.handleNewObject:00000000 $t
    {standard input}:508    .text.handleNewObject:000000bc $d
    {standard input}:520    .text.sortObject:00000000 $t
    {standard input}:636    .text.sortObject:00000098 $d
    {standard input}:645    .text.test:00000000 $t
    {standard input}:832    .text.test:00000138 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
init
LEDStripes
productionLine
slider
laser
lightBarrier2
rs232_print
lightBarrier1
readButton1
readInductivSensor1
readButton2
strncmp
strtol
sprintf
uart_clear_receivedata
uartReceivedata
uartEnterReceive
pneumatics1
uart_print
readInductivSensor2
redLED
greenLED
delay_ms
lightBarrier3
pneumatics2
